<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>quanyechavshuo</title>
    <description>A blog about programming and network security</description>
    <link>http://3xp10it.cc/</link>
    <atom:link href="http://3xp10it.cc/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 19 Sep 2019 12:08:15 +0800</pubDate>
    <lastBuildDate>Thu, 19 Sep 2019 12:08:15 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>主力怎样在保持收盘大阳线的情况下出货</title>
        <description>&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;p&gt;对狂龙十八段一篇«怎样识别拉升出货法»的思考&lt;/p&gt;

&lt;h3 id=&quot;拉升出货实例&quot;&gt;拉升出货实例&lt;/h3&gt;

&lt;embed src=&quot;https://drive.google.com/viewerng/viewer?embedded=true&amp;amp;url=https://raw.githubusercontent.com/3xp10it/pic/master/怎样识别拉升出货法.pdf&quot; width=&quot;100%&quot; height=&quot;1100&quot; /&gt;

&lt;blockquote&gt;
  &lt;p&gt;“上涨未明显放量,上涨最快速的阶段,也基本上,全由小单拉升构成”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从中可以看出当时主力拉升的成本很低,而要通过小单就可以成功拉升,背后需要对应着较小的抛压,较小的抛压意味着个股有利好或大盘情况良好,于是得出以下结论:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ 主力最好的出货方式是边拉升边出货
+ 主力最好的出货时机是个股有利好或大盘情况良好
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;主力操盘推演&quot;&gt;主力操盘推演&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/dapanjieduan.png&quot; alt=&quot;大盘不同阶段&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大盘不好的时候(上图E,F段)主力一般都会被套,如果主力不在大盘良好的情况下就开始拉升,而是等到大盘到了E/F段才开始拉升,这种主力太傻了,不值得跟随.主力最佳的操盘策略应该是:C段之前完成吸货,B段末判断大盘要开始转成上升走势,于是C段开始拉升,D段开始出货(或E段借利好也能出货).&lt;/p&gt;

&lt;p&gt;到了D/E段还因洗盘而没有开始拉升的主力是笨庄,因为&lt;code class=&quot;highlighter-rouge&quot;&gt;1.A股是牛短熊长&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;2.现在市场逐渐由单庄变成混庄&lt;/code&gt;,主力对个股走势操纵的话语权在逐渐下降,主力越来越需要看大盘吃饭了,大盘的好时机难得,不在难得的时机下拉升,而一再拖延到大盘开始走坏才想拉升,这时候已经不是主力想拉就能拉的动了,大量聪明的主力在这时(D/E/F段)已经在出货而导致大盘加快走坏,散户也在恐慌性抛盘,笨庄只能”满仓”被套,跟了这样的庄是很难盈利的.&lt;/p&gt;

&lt;p&gt;想赚钱必须充分利用大盘环境良好的时间(B/C段),如果个股在大盘处于B/C/D段还没有表现必须放弃,大盘好而个股不拉的庄股要放弃,得出以下结论:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ 选股的最佳时机是大盘处于B段的时候
+ 选股的最佳标的是大盘走好时个股一定会启动拉升的个股,例如处于缠论买3的庄股
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 18 Sep 2019 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/09/18/%E4%B8%BB%E5%8A%9B%E6%80%8E%E6%A0%B7%E5%9C%A8%E4%BF%9D%E6%8C%81%E6%94%B6%E7%9B%98%E5%A4%A7%E9%98%B3%E7%BA%BF%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%87%BA%E8%B4%A7/</link>
        <guid isPermaLink="true">http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/09/18/%E4%B8%BB%E5%8A%9B%E6%80%8E%E6%A0%B7%E5%9C%A8%E4%BF%9D%E6%8C%81%E6%94%B6%E7%9B%98%E5%A4%A7%E9%98%B3%E7%BA%BF%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%87%BA%E8%B4%A7/</guid>
        
        <category>出货</category>
        
        
        <category>炒股</category>
        
      </item>
    
      <item>
        <title>看盘细节笔记</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/看盘细节.png&quot; alt=&quot;视觉卡片&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 17 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/08/17/%E7%9C%8B%E7%9B%98%E7%BB%86%E8%8A%82%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/08/17/%E7%9C%8B%E7%9B%98%E7%BB%86%E8%8A%82%E7%AC%94%E8%AE%B0/</guid>
        
        <category>细节</category>
        
        
        <category>炒股</category>
        
      </item>
    
      <item>
        <title>盘面细节分析笔记</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/盘面细节分析.png&quot; alt=&quot;视觉卡片&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 15 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/08/15/%E7%9B%98%E9%9D%A2%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/08/15/%E7%9B%98%E9%9D%A2%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</guid>
        
        <category>盘口</category>
        
        <category>细节</category>
        
        
        <category>炒股</category>
        
      </item>
    
      <item>
        <title>主力行为盘口解密1,2,3,4,5,6笔记</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://to_add&quot; alt=&quot;视觉卡片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1-3电子版在&lt;a href=&quot;https://pan.baidu.com/s/1j7kqp8SleY6DFxW1AfEfNQ&quot;&gt;这里&lt;/a&gt;,密码&lt;code class=&quot;highlighter-rouge&quot;&gt;b4p9&lt;/code&gt;,4-6册需要购买实体书&lt;/p&gt;

</description>
        <pubDate>Thu, 15 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/08/15/%E4%B8%BB%E5%8A%9B%E8%A1%8C%E4%B8%BA%E7%9B%98%E5%8F%A3%E8%A7%A3%E5%AF%861,2,3,4,5,6%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/08/15/%E4%B8%BB%E5%8A%9B%E8%A1%8C%E4%B8%BA%E7%9B%98%E5%8F%A3%E8%A7%A3%E5%AF%861,2,3,4,5,6%E7%AC%94%E8%AE%B0/</guid>
        
        <category>盘口</category>
        
        
        <category>炒股</category>
        
      </item>
    
      <item>
        <title>frida开启ios app签名服务</title>
        <description>&lt;h3 id=&quot;0x0-about&quot;&gt;0x0 About&lt;/h3&gt;

&lt;p&gt;一般情况下,app因为安全性会有签名机制,大多数服务器上重要的接口都需要签名算法验证通过后才可访问,一般情况下,服务器上的验证算法是通过校验客户端请求时间戳达到防重放的目的(签名机制也可用于提升攻击难度),校验算法示例可参考&lt;a href=&quot;https://blog.csdn.net/koastal/article/details/53456696&quot;&gt;这里&lt;/a&gt;,简单的校验伪代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;客户端请求如下:

POST /jiekou HTTP/1.1
Host: www.baidu.com
content: text/html; charset=UTF-8
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Accept-Encoding: gzip, deflate
Accept: */*
User-Agent: xxx/5.4.7 (iPhone; iOS 11.1.1; Scale/2.00)
Accept-Language: zh-Hans-CN;q=1
Content-Length: 376
Connection: close

a=1&amp;amp;b=2&amp;amp;reqTime=20190813160148620&amp;amp;sign_value=Q980XOWEJ7658799ZX90876876O

其中reqTime是客户端请求携带的请求时间戳,sign_value是客户端签名算法的签名结果


服务端校验如下:

if request_value.reqTime+60s &amp;lt; serverTime:
    deny
if get_sign_value(request_value)!=request_value.sign_value:
    deny
normal_response()

其中request_value是客户端提交的请求包数据,request_value.reqTime是请求包中的reqTime参数的值,serverTime是服务器接收到请求的时间戳,request_value.sign_value是请求包中的sign_value参数的值
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;本文记录通过frida开启ios app客户端的签名算法的rpc调用服务&lt;/p&gt;

&lt;h3 id=&quot;0x1-分析签名函数&quot;&gt;0x1 分析签名函数&lt;/h3&gt;

&lt;p&gt;ios app通过Cluth脱壳后通过ida反编译,正常测试时抓包发现大多请求都带有&lt;code class=&quot;highlighter-rouge&quot;&gt;openapi_sign=xxxxxxxxxxxxx&lt;/code&gt;,推断app的签名结果会赋值到openapi_sign参数中,在ida中搜索openapi_sign,结果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/goldsun1.png&quot; alt=&quot;goldsun1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在汇编区中按f5得到object-c风格的代码,显示是&lt;code class=&quot;highlighter-rouge&quot;&gt;signRequestUrlWithParameters:secret:signMethod:&lt;/code&gt;函数实现的签名,在ida的函数窗口区搜索这个函数,如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/goldsun2.png&quot; alt=&quot;goldsun2&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/goldsun3.png&quot; alt=&quot;goldsun3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;signRequestUrlWithParameters:secret:signMethod:&lt;/code&gt;代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;id __cdecl +[GSNetworkUtils signRequestUrlWithParameters:secret:signMethod:](GSNetworkUtils_meta *self, SEL a2, id a3, id a4, id a5)
{
  id v5; // x20
  id v6; // x21
  void *v7; // x19
  __int64 v8; // x1
  void *v9; // x22
  __int64 v10; // x1
  __int64 v11; // x1
  void *v12; // x26
  void *v13; // x21
  void *v14; // x24
  void *v15; // x21
  __int64 v16; // x20
  void *v17; // x0
  __int64 v18; // x21
  int v19; // w25
  __int64 v20; // x1
  void *v21; // x27
  __int64 v22; // x24
  unsigned __int64 v23; // x22
  void *v24; // x26
  __int64 v25; // x19
  void *v26; // x25
  void *v27; // x19
  const __CFString *v28; // x20
  id result; // x0
  void *v30; // [xsp+10h] [xbp-150h]
  void *v31; // [xsp+18h] [xbp-148h]
  struct objc_object *v32; // [xsp+28h] [xbp-138h]
  void *v33; // [xsp+30h] [xbp-130h]
  GSNetworkUtils_meta *v34; // [xsp+38h] [xbp-128h]
  void *v35; // [xsp+40h] [xbp-120h]
  __int128 v36; // [xsp+48h] [xbp-118h]
  __int128 v37; // [xsp+58h] [xbp-108h]
  __int128 v38; // [xsp+68h] [xbp-F8h]
  __int128 v39; // [xsp+78h] [xbp-E8h]
  char v40; // [xsp+88h] [xbp-D8h]
  __int64 v41; // [xsp+108h] [xbp-58h]

  v5 = a5;
  v6 = a4;
  v34 = self;
  v7 = (void *)objc_retain(a3, a2);
  v9 = (void *)objc_retain(v6, v8);
  v12 = (void *)objc_retain(v5, v10);
  v35 = v7;
  if ( !v7 )
    goto LABEL_19;
  objc_msgSend(v7, &quot;allKeys&quot;);
  v13 = (void *)objc_retainAutoreleasedReturnValue();
  if ( !objc_msgSend(v13, &quot;count&quot;) )
  {
    objc_release(v13);
    goto LABEL_19;
  }
  v14 = objc_msgSend(v9, &quot;length&quot;);
  objc_release(v13);
  if ( !v14 )
  {
LABEL_19:
    v28 = &amp;amp;stru_1020C2DD0;
    objc_retain(&amp;amp;stru_1020C2DD0, v11);
    goto LABEL_20;
  }
  objc_msgSend(v7, &quot;allKeys&quot;);
  v15 = (void *)objc_retainAutoreleasedReturnValue();
  objc_msgSend(v15, &quot;sortedArrayUsingSelector:&quot;, &quot;compare:&quot;);
  v16 = objc_retainAutoreleasedReturnValue();
  objc_release(v15);
  v17 = objc_msgSend(&amp;amp;OBJC_CLASS___NSMutableString, &quot;alloc&quot;);
  v32 = (struct objc_object *)objc_msgSend(v17, &quot;init&quot;);
  if ( !objc_msgSend(v12, &quot;length&quot;)
    || (objc_msgSend(v12, &quot;lowercaseString&quot;),
        v18 = objc_retainAutoreleasedReturnValue(),
        v19 = (unsigned __int64)objc_msgSend(CFSTR(&quot;md5&quot;), &quot;isEqualToString:&quot;, v18),
        objc_release(v18),
        v19) )
  {
    objc_msgSend(v32, &quot;appendString:&quot;, v9);
  }
  v30 = v12;
  v31 = v9;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v33 = (void *)objc_retain(v16, v20);
  v21 = objc_msgSend(v33, &quot;countByEnumeratingWithState:objects:count:&quot;, &amp;amp;v36, &amp;amp;v40, 16LL);
  if ( v21 )
  {
    v22 = *(_QWORD *)v37;
    do
    {
      v23 = 0LL;
      do
      {
        if ( *(_QWORD *)v37 != v22 )
          objc_enumerationMutation(v33);
        v24 = *(void **)(*((_QWORD *)&amp;amp;v36 + 1) + 8 * v23);
        objc_msgSend(v35, &quot;objectForKey:&quot;, *(_QWORD *)(*((_QWORD *)&amp;amp;v36 + 1) + 8 * v23));
        v25 = objc_retainAutoreleasedReturnValue();
        objc_msgSend(v34, &quot;urlDecodedString:&quot;, v25);
        v26 = (void *)objc_retainAutoreleasedReturnValue();
        objc_release(v25);
        if ( objc_msgSend(v24, &quot;length&quot;) &amp;amp;&amp;amp; objc_msgSend(v26, &quot;length&quot;) )
        {
          objc_msgSend(v32, &quot;appendString:&quot;, v24);
          objc_msgSend(v32, &quot;appendString:&quot;, v26);
        }
        objc_release(v26);
        ++v23;
      }
      while ( v23 &amp;lt; (unsigned __int64)v21 );
      v21 = objc_msgSend(v33, &quot;countByEnumeratingWithState:objects:count:&quot;, &amp;amp;v36, &amp;amp;v40, 16LL);
    }
    while ( v21 );
  }
  objc_release(v33);
  v9 = v31;
  objc_msgSend(v32, &quot;appendString:&quot;, v31);
  ((void (__cdecl *)(GSNetworkUtils_meta *, SEL, id))objc_msgSend)(
    (GSNetworkUtils_meta *)&amp;amp;OBJC_CLASS___GSNetworkUtils,
    &quot;md5:&quot;,
    v32);
  v27 = (void *)objc_retainAutoreleasedReturnValue();
  objc_msgSend(v27, &quot;uppercaseString&quot;);
  v28 = (const __CFString *)objc_retainAutoreleasedReturnValue();
  objc_release(v27);
  objc_release(v32);
  objc_release(v33);
  v12 = v30;
LABEL_20:
  objc_release(v12);
  objc_release(v9);
  result = (id)objc_release(v35);
  if ( __stack_chk_guard == v41 )
    result = (id)objc_autoreleaseReturnValue(v28);
  return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;暂不确定这个函数的参数是怎么用的,从上面objec-c代码中可以看出这个函数总共有3个参数,最后一个参数是字符串”md5”,前两个参数还不确定分别是什么,于是通过frida hook这个函数的调用,注入代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (ObjC.available)
{
    try
    {
        var className = &quot;GSNetworkUtils&quot;;
        var funcName = &quot;+ signRequestUrlWithParameters:secret:signMethod:&quot;;
        var hook = eval('ObjC.classes.' + className + '[&quot;' + funcName + '&quot;]');
        console.log(&quot;[*] Class Name: &quot; + className);
        console.log(&quot;[*] Method Name: &quot; + funcName);
        Interceptor.attach(hook.implementation, {
          onEnter: function(args) {
            console.log(&quot;param:&quot;+args[2]+&quot; type:&quot;+typeof args[2]);
			console.log(&quot;param:&quot;+ObjC.classes.NSString.stringWithString_(args[3])+&quot; type:&quot;+typeof args[3]);
			console.log(&quot;param:&quot;+ObjC.classes.NSString.stringWithString_(args[4])+&quot; type:&quot;+typeof args[4]);
          },
          onLeave: function(retval) {
            console.log(&quot;Return value-&amp;gt; (type:&quot;+typeof retval+&quot;,value:&quot;+retval+&quot;)&quot;);
          }
        });
    }
    catch(err)
    {
        console.log(&quot;[!] Exception2: &quot; + err.message);
    }
}
else
{
    console.log(&quot;Objective-C Runtime is not available!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;结果如下:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[*] Class Name: GSNetworkUtils
[*] Method Name: + signRequestUrlWithParameters:secret:signMethod:
param:0x1c462af00 type:object
param:96UI5F7H9W9N46FFA7196D109C2768UI type:object
param:md5 type:object
Return value-&amp;gt; (type:object,value:0x1c0845970)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过frida hook这个函数的调用和上面的object-c代码分析得出这个函数的第1个参数应该是与请求包参数相关的变量,猜测是字典形式,第2个参数应该是加密算法里的一个固定密钥值,尝试以字典形式打印第1个参数,注入代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (ObjC.available)
{
    try
    {
        var className = &quot;GSNetworkUtils&quot;;
        var funcName = &quot;+ signRequestUrlWithParameters:secret:signMethod:&quot;;
        var hook = eval('ObjC.classes.' + className + '[&quot;' + funcName + '&quot;]');
        console.log(&quot;[*] Class Name: &quot; + className);
        console.log(&quot;[*] Method Name: &quot; + funcName);
        Interceptor.attach(hook.implementation, {
          onEnter: function(args) {
            //console.log(&quot;param:&quot;+args[2]+&quot; type:&quot;+typeof args[2]);
			var arg2 = new ObjC.Object(args[2]);
			console.log(arg2.allKeys());
			console.log(arg2.allValues());
			console.log(&quot;param:&quot;+ObjC.classes.NSString.stringWithString_(args[3])+&quot; type:&quot;+typeof args[3]);
			console.log(&quot;param:&quot;+ObjC.classes.NSString.stringWithString_(args[4])+&quot; type:&quot;+typeof args[4]);
          },
          onLeave: function(retval) {
            console.log(&quot;Return value-&amp;gt; (type:&quot;+typeof retval+&quot;,value:&quot;+retval+&quot;)&quot;);
          }
        });
    }
    catch(err)
    {
        console.log(&quot;[!] Exception2: &quot; + err.message);
    }
}
else
{
    console.log(&quot;Objective-C Runtime is not available!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;结果如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(
    &quot;conn_style&quot;,
    imsi,
    &quot;device_model&quot;
)
(
    &quot;1.460.01..&quot;,
    46001,
    &quot;iPhone7,2&quot;
)
param:96UI5F7H9W9N46FFA7196D109C2768UI type:object
param:md5 type:object
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;说明第1个参数&lt;code class=&quot;highlighter-rouge&quot;&gt;args[2]&lt;/code&gt;的确是字典的形式,且字典的内容就是http请求包里的参数值(frida js里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;args[0]&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;args[1]&lt;/code&gt;分别对应object-c代码里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;GSNetworkUtils_meta *self, SEL a2&lt;/code&gt;,它们不是这个函数的调用参数,相当于self指针),也即这个函数的三个参数分别是:请求包参数构成的字典,签名算法密钥,字符串”md5”.&lt;/p&gt;

&lt;h3 id=&quot;0x2-开启rpc签名服务&quot;&gt;0x2 开启rpc签名服务&lt;/h3&gt;

&lt;p&gt;经过上面对这个函数的分析,可通过frida js构造rpc函数提供签名算法服务给python调用,代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import frida
import sys
import urllib.parse
import re
import pdb

session = frida.get_usb_device().attach(&quot;应用名&quot;)
script_string = &quot;&quot;&quot;
if (ObjC.available)
{
    rpc.exports = {
        signrequesturlwithparameters: function (param_string,secret,signMethod) {			
/*
		尝试python中的dict类型传入js代码的rpc函数中(string-&amp;gt;dict),没成功
		var param_dict_nsstring=ObjC.classes.NSString.stringWithString_(param_dict)
		var jsonData=param_dict_nsstring.dataUsingEncoding_(4)
		var err=ptr(ObjC.classes.NSError.alloc())
		//下面这个函数最终没调用成功
		var dic=ObjC.classes.NSJSONSerialization.JSONObjectWithData_options_error_(jsonData,0,err)
		console.log(dic)
		console.log(err.localizedDescription())
*/
		
		//console.log(param_string)
		var param_dict = ObjC.classes.NSMutableDictionary.alloc().init(); 
		var param_list=param_string.split(&quot;&amp;amp;&quot;)
		for (var i = 0; i &amp;lt; param_list.length; i++) { 
			var param=param_list[i].split(&quot;=&quot;)[0]
			var param_value=param_list[i].substr(param.length+1,param_list[i].length)
			if (param!=&quot;openapi_sign&quot;) {
				param_dict.setObject_forKey_(param_value,param);
				} 				
		}
		var result=ObjC.classes.GSNetworkUtils.signRequestUrlWithParameters_secret_signMethod_(param_dict,secret,signMethod);
		return String(ObjC.classes.NSString.stringWithString_(result));
        }
    };

	
}
else
{
    console.log(&quot;Objective-C Runtime is not available!&quot;);
}
&quot;&quot;&quot;


script = session.create_script(script_string)


def on_message(message, data):
    if message['type'] == 'error':
        print(&quot;[!] &quot; + message['stack'])
    elif message['type'] == 'send':
        print(&quot;[!] &quot; + message['payload'])
    else:
        print(message)



script.on('message', on_message)
script.load()
signrequesturlwithparameters= getattr(script.exports, 'signrequesturlwithparameters')
secret=&quot;96UI5F7H9W9N46FFA7196D109C2768UI&quot;; 
signMethod=&quot;md5&quot;;


def start_transfer_server():
    from http.server import BaseHTTPRequestHandler, HTTPServer

    class S(BaseHTTPRequestHandler):
        def _set_headers(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()

        def do_GET(self):
            try:
                param_string=re.search(r&quot;param_string=([\s\S]*)&quot;,self.path).group(1)
                param_string=urllib.parse.unquote(param_string)
                return_value=signrequesturlwithparameters(param_string,secret,signMethod)
                self._set_headers()
                self.wfile.write(bytes(return_value, &quot;utf-8&quot;))
            except:
                pass

    def run(server_class=HTTPServer, handler_class=S, port=8888):
        server_address = ('', port)
        httpd = server_class(server_address, handler_class)
        print('Starting httpd...')
        httpd.serve_forever()

    run()


start_transfer_server()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;session = frida.get_usb_device().attach(&quot;应用名&quot;)&lt;/code&gt;这里的应用名需要在连接手机的电脑上运行&lt;code class=&quot;highlighter-rouge&quot;&gt;frida-ps -U&lt;/code&gt;得到,在windows上运行时如果手机运行的进程名中有中文字符则会有个编码的bug,如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[C:\~]$ frida-ps -U
 PID  Name
----  -----------------------------------------------
 446  InCallService
Exception in thread Thread-1:
Traceback (most recent call last):
  File &quot;c:\python37\lib\threading.py&quot;, line 917, in _bootstrap_inner
    self.run()
  File &quot;c:\python37\lib\threading.py&quot;, line 865, in run
    self._target(*self._args, **self._kwargs)
  File &quot;c:\python37\lib\site-packages\frida_tools\application.py&quot;, line 428, in _run
    work()
  File &quot;c:\python37\lib\site-packages\frida_tools\application.py&quot;, line 277, in _try_start
    self._start()
  File &quot;c:\python37\lib\site-packages\frida_tools\ps.py&quot;, line 69, in _start
    self._print(line_format % (process.pid, process.name))
  File &quot;c:\python37\lib\site-packages\frida_tools\application.py&quot;, line 343, in _print
    print(*encoded_args, **kwargs)
  File &quot;c:\python37\lib\site-packages\colorama\ansitowin32.py&quot;, line 41, in write
    self.__convertor.write(text)
  File &quot;c:\python37\lib\site-packages\colorama\ansitowin32.py&quot;, line 162, in write
    self.write_and_convert(text)
  File &quot;c:\python37\lib\site-packages\colorama\ansitowin32.py&quot;, line 190, in write_and_convert
    self.write_plain_text(text, cursor, len(text))
  File &quot;c:\python37\lib\site-packages\colorama\ansitowin32.py&quot;, line 195, in write_plain_text
    self.wrapped.write(text[start:end])
UnicodeEncodeError: 'gbk' codec can't encode character '\xd0' in position 6: illegal multibyte sequence
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;根据报错信息可以看出是由于ps.py的&lt;code class=&quot;highlighter-rouge&quot;&gt;self._print&lt;/code&gt;出了问题:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  File &quot;c:\python37\lib\site-packages\frida_tools\ps.py&quot;, line 69, in _start
    self._print(line_format % (process.pid, process.name))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将这行代码修改下可正常运行&lt;code class=&quot;highlighter-rouge&quot;&gt;frida-ps -U&lt;/code&gt;来得到进程名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#self._print(line_format % (process.pid, process.name))
print(line_format % (process.pid, process.name))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x3-后记&quot;&gt;0x3 后记&lt;/h3&gt;

&lt;p&gt;通过上面的分析,容易联想到ios app里的签名函数大多用的是同一个类的同一个函数(因为开发都习惯直接用市面上已有的代码),变量在于不同app在使用这个签名函数时会有不同的第2个参数和第3个参数,也即密钥值和加密算法(对应上面的96UI5F7H9W9N46FFA7196D109C2768UI和”md5”),分析其他ios app时估计可同样直接分析出密钥值(可通过hook内存)和第3个参数值(本例是”md5”,ida静态分析可得到),然后直接构造rpc函数就可以用了.此外,也可通过把这个签名函数封装成其他语言(如python,php)来得到更稳定的rpc服务,也即不用hook app即可提供rpc签名服务.&lt;/p&gt;

&lt;h3 id=&quot;0x4-参考&quot;&gt;0x4 参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/frida/frida-core/issues/7&quot;&gt;frida js打印字典内容&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/57458375/how-to-pass-a-dict-parameter-from-python-to-frida-rpc-javascript-function&quot;&gt;在rpc调用时怎样将python函数的字典传递到frida js的函数中&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 13 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2019/08/13/frida%E5%BC%80%E5%90%AFios-app%E7%AD%BE%E5%90%8D%E6%9C%8D%E5%8A%A1/</link>
        <guid isPermaLink="true">http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2019/08/13/frida%E5%BC%80%E5%90%AFios-app%E7%AD%BE%E5%90%8D%E6%9C%8D%E5%8A%A1/</guid>
        
        <category>frida</category>
        
        <category>ios</category>
        
        <category>rpc</category>
        
        <category>sign</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>盘口</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/盘口.png&quot; alt=&quot;视觉卡片&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;参考&quot;&gt;参考&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.5xcg.com/&quot;&gt;宋磊盘口&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject_search?search_text=%E4%B8%BB%E5%8A%9B%E8%A1%8C%E4%B8%BA%E7%9B%98%E5%8F%A3%E8%A7%A3%E5%AF%86&amp;amp;cat=1001&quot;&gt;翁富主力行为盘口解密1-6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 09 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/08/09/%E7%9B%98%E5%8F%A3/</link>
        <guid isPermaLink="true">http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/08/09/%E7%9B%98%E5%8F%A3/</guid>
        
        <category>盘口</category>
        
        
        <category>炒股</category>
        
      </item>
    
      <item>
        <title>资金流书笔记</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/狂龙十八段.png&quot; alt=&quot;视觉卡片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/3xp10it/books/blob/master/%E8%B5%84%E9%87%91%E6%B5%81%E4%B9%A6.pdf&quot;&gt;资金流书&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 14 Jul 2019 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/07/14/%E8%B5%84%E9%87%91%E6%B5%81%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/07/14/%E8%B5%84%E9%87%91%E6%B5%81%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
        
        <category>狂龙十八段</category>
        
        <category>盘口</category>
        
        <category>龙虎榜</category>
        
        
        <category>炒股</category>
        
      </item>
    
      <item>
        <title>民间股神1,2,3,4,6,7笔记</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/民间股神.png&quot; alt=&quot;视觉卡片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/3xp10it/books/blob/master/%E6%B0%91%E9%97%B4%E8%82%A1%E7%A5%9E1-15%E4%BD%8D%E8%82%A1%E6%9E%97%E9%AB%98%E7%89%A9%E8%B5%A2%E9%92%B1%E7%A7%98%E6%8B%9B%E5%A4%A7%E7%89%B9%E5%86%99.pdf&quot;&gt;民间股神1&lt;/a&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/3xp10it/books/blob/master/%E6%B0%91%E9%97%B4%E8%82%A1%E7%A5%9E2-%E5%8D%81%E5%A4%A7%E8%82%A1%E6%9E%97%E9%AB%98%E6%89%8B%E8%B5%A2%E9%92%B1%E7%A7%98%E6%8B%9B%E5%A4%A7%E7%89%B9%E5%86%99.pdf&quot;&gt;民间股神2&lt;/a&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/3xp10it/books/blob/master/%E6%B0%91%E9%97%B4%E8%82%A1%E7%A5%9E3-%E5%85%AB%E5%A4%A7%E8%82%A1%E6%9E%97%E9%AB%98%E6%89%8B%E8%B5%A2%E9%92%B1%E7%A7%98%E6%8B%9B%E5%A4%A7%E7%89%B9%E5%86%99.pdf&quot;&gt;民间股神3&lt;/a&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/3xp10it/books/blob/master/%E6%B0%91%E9%97%B4%E8%82%A1%E7%A5%9E4-%E4%B9%9D%E5%A4%A7%E8%82%A1%E6%9E%97%E9%AB%98%E6%89%8B%E8%B5%A2%E9%92%B1%E7%A7%98%E6%8B%9B%E5%A4%A7%E7%89%B9%E5%86%99.pdf&quot;&gt;民间股神4&lt;/a&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/3xp10it/books/blob/master/%E6%B0%91%E9%97%B4%E8%82%A1%E7%A5%9E6-%E8%82%A1%E5%B8%82%E5%A5%87%E4%BA%BA%E9%89%B4%E8%82%A1%E5%AF%86%E7%A0%81.pdf&quot;&gt;民间股神6&lt;/a&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/3xp10it/books/blob/master/%E6%B0%91%E9%97%B4%E8%82%A1%E7%A5%9E7-%E8%8D%89%E6%A0%B9%E8%8B%B1%E6%9D%B0%E6%83%8A%E4%B8%96%E5%A5%87%E8%BF%B9.pdf&quot;&gt;民间股神7&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 29 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/06/29/%E6%B0%91%E9%97%B4%E8%82%A1%E7%A5%9E1,2,3,4,6,7%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/06/29/%E6%B0%91%E9%97%B4%E8%82%A1%E7%A5%9E1,2,3,4,6,7%E7%AC%94%E8%AE%B0/</guid>
        
        <category>民间股神</category>
        
        
        <category>炒股</category>
        
      </item>
    
      <item>
        <title>一本书搞懂龙头股战法笔记</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/一本书搞懂龙头股战法.png&quot; alt=&quot;视觉卡片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/3xp10it/books/blob/master/%E4%B8%80%E6%9C%AC%E4%B9%A6%E6%90%9E%E6%87%82%E9%BE%99%E5%A4%B4%E8%82%A1%E6%88%98%E6%B3%95.pdf&quot;&gt;read more…&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 07 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/06/07/%E4%B8%80%E6%9C%AC%E4%B9%A6%E6%90%9E%E6%87%82%E9%BE%99%E5%A4%B4%E8%82%A1%E6%88%98%E6%B3%95%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/06/07/%E4%B8%80%E6%9C%AC%E4%B9%A6%E6%90%9E%E6%87%82%E9%BE%99%E5%A4%B4%E8%82%A1%E6%88%98%E6%B3%95%E7%AC%94%E8%AE%B0/</guid>
        
        <category>龙头股</category>
        
        
        <category>炒股</category>
        
      </item>
    
      <item>
        <title>股市极客思考录:十年磨一剑之龙头股战法揭秘笔记</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/十年磨一剑之龙头股战法揭秘.png&quot; alt=&quot;视觉卡片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/3xp10it/books/blob/master/%E8%82%A1%E5%B8%82%E6%9E%81%E5%AE%A2%E6%80%9D%E8%80%83%E5%BD%95%E4%B9%8B%E5%8D%81%E5%B9%B4%E7%A3%A8%E4%B8%80%E5%89%91%E4%B9%8B%E9%BE%99%E5%A4%B4%E8%82%A1%E6%88%98%E6%B3%95%E6%8F%AD%E7%A7%98%E5%8D%87%E7%BA%A7%E7%89%88.pdf&quot;&gt;read more…&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 04 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/06/04/%E8%82%A1%E5%B8%82%E6%9E%81%E5%AE%A2%E6%80%9D%E8%80%83%E5%BD%95-%E5%8D%81%E5%B9%B4%E7%A3%A8%E4%B8%80%E5%89%91%E4%B9%8B%E9%BE%99%E5%A4%B4%E8%82%A1%E6%88%98%E6%B3%95%E6%8F%AD%E7%A7%98%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://3xp10it.cc/%E7%82%92%E8%82%A1/2019/06/04/%E8%82%A1%E5%B8%82%E6%9E%81%E5%AE%A2%E6%80%9D%E8%80%83%E5%BD%95-%E5%8D%81%E5%B9%B4%E7%A3%A8%E4%B8%80%E5%89%91%E4%B9%8B%E9%BE%99%E5%A4%B4%E8%82%A1%E6%88%98%E6%B3%95%E6%8F%AD%E7%A7%98%E7%AC%94%E8%AE%B0/</guid>
        
        <category>龙头股</category>
        
        <category>题材</category>
        
        
        <category>炒股</category>
        
      </item>
    
  </channel>
</rss>
