<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>quanyechavshuo</title>
    <description>A blog about programming and network security</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 30 Sep 2017 08:08:48 +0800</pubDate>
    <lastBuildDate>Sat, 30 Sep 2017 08:08:48 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>深入理解计算机系统第9章笔记</title>
        <description>&lt;h3 id=&quot;虚拟存储器&quot;&gt;虚拟存储器&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&quot;https://www.zhihu.com/question/21088377&quot;&gt;虚拟存储器的理解&lt;/a&gt;,windows下的c盘中的pagefile.sys是虚拟内存文件.&lt;/p&gt;

&lt;p&gt;2.虚拟存储器是硬件异常,硬件地址翻译,主存,磁盘文件和内核软件的完美交互,它为每个进程提供了一个大的,一致的私有的地址
空间.虚拟存储器提供了3个重要能力:&lt;br /&gt;
a)它将主存看成是一个存储在磁盘上的地址空间的高速缓存,在主存中只保存活动区域,并根据需要在磁盘和主存之间来回传送数
据,通过这种方式,它高效地使用了主存&lt;br /&gt;
b)它为每个进程提供了一致的地址空间,从而简化了存储器管理&lt;br /&gt;
c)它保护了每个进程的地址空间不被其他进程破坏&lt;/p&gt;

&lt;p&gt;3.地址翻译:将一个虚拟地址转换为物理地址.就像异常处理一样,地址翻译需要cpu硬件和操作系统之间的紧密合作.cpu芯片上叫
做存储器管理单元(MMU)的专用硬件,利用存放在主存中的查询表来动态翻译虚拟地址.如下图.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp9-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.主存中的每个字节都有一个选自虚拟地址空间的虚拟地址和一个选自物理地址空间的物理地址&lt;/p&gt;

&lt;p&gt;5.磁盘上数组的内容被缓存在主存中.和存储器层次结构中其他缓存一样,磁盘(较低层)上的数据被分割成块,这些块作为磁盘和主
存(较高层)之间的传输单元.为了有助于清晰地去理解存储层次结构中不同的缓存概念,我们将使用术语SRAM缓存来表示位于CPU和
主存之间的L1,L2和L3调整缓存,并且用术语DRAM缓存来表示虚拟存储器系统的缓存,它在主存中缓存虚拟页&lt;/p&gt;

&lt;p&gt;6.虚拟存储器系统通过将虚拟存储器分割为称为虚拟页的大小固定的块来处理这个问题,如下图中的虚拟存储器有8个虚拟页.类似
地,物理存储器被分割为物理页,物理页和虚拟页大小相同,物理页也称为页帧.任意时刻,虚拟页面的集合都分为有一个不相交的子
集:&lt;br /&gt;
未分配的:虚拟存储器系统还未分配的页,未分配的块没有任何数据和它们相关联,因此也就不占用任何磁盘空间&lt;br /&gt;
缓存的:当前缓存在物理存储器中的已分配页&lt;br /&gt;
未缓存的:没有缓存在物理存储器中的已分配页(已分配代表占用磁盘空间)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp9-2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/09/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC9%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/09/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC9%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>csapp</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>四种环视匹配</title>
        <description>&lt;h3 id=&quot;0x00-refer&quot;&gt;0x00 refer&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jb51.net/article/52491.htm&quot;&gt;匹配不出现字符串&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x01-detail&quot;&gt;0x01 detail&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;肯定顺序环视(?=...)     positive lookahead  (中文也有翻译成:后向界定)
否定顺序环视(?!...)     negtive lookahead   (中文也有翻译成:后向非界定)
肯定逆序环视(?&amp;lt;=...)    positive lookbehind (中文也有翻译成:前向界定)
否定逆序环视(?&amp;lt;!...)    negtive lookbehind  (中文也有翻译成:前向非界定)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;从上看出:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;是      =
不是    !
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在用正则表达式匹配时将待匹配的字符串变量看作是有隐藏位置的字符串,也即将abcd看作|a|b|c|d|,其中|表示一个隐藏位置.
如果正则表达式中没有上面4种用法则不考虑隐藏的位置,如果有4种任意一种则要考虑隐藏位置,以上4种在匹配时匹配的结果为
这些隐藏的位置(只匹配位置,不匹配字符).&lt;/p&gt;

&lt;h3 id=&quot;0x02-example&quot;&gt;0x02 example&lt;/h3&gt;

&lt;h4 id=&quot;a前面没有form后面有action&quot;&gt;a.前面没有form后面有action&lt;/h4&gt;

&lt;p&gt;使用(?:\n)不捕获匹配\n
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/reg1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;替换(?:\n),使用(?&amp;lt;=\n)前向界定和(?=\n)后向界定匹配\n&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/reg2.png&quot; /&gt;
上图共使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;=)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;(?!=)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;(?=)&lt;/code&gt;,没有用到&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;!)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;为了用到&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;!)&lt;/code&gt;,具体如下图
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/reg3.png&quot; /&gt;
上图共使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;=)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;!)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;(?!)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;(?=)&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;b前面有form后面没有action&quot;&gt;b.前面有form后面没有action&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/reg4.png&quot; /&gt;
上图共使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;=)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;(?!)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;(?=)&lt;/code&gt;,没有用到&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;!)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;为了用到&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;!)&lt;/code&gt;,具体如下图
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/reg5.png&quot; /&gt;
上图共使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;=)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;!)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;(?!)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;(?=)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x03-attention&quot;&gt;0x03 attention&lt;/h3&gt;

&lt;p&gt;1.为了匹配到一个字符串变量中没有form,可以有4种方法:
a)&lt;code class=&quot;highlighter-rouge&quot;&gt;.(?&amp;lt;!form)&lt;/code&gt;对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;(.(?&amp;lt;!form))*&lt;/code&gt;&lt;br /&gt;
b)&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;!form).&lt;/code&gt;对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;((?&amp;lt;!form).)*&lt;/code&gt;&lt;br /&gt;
c)&lt;code class=&quot;highlighter-rouge&quot;&gt;.(?!form)&lt;/code&gt;对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;(.(?!form))*&lt;/code&gt;&lt;br /&gt;
d)&lt;code class=&quot;highlighter-rouge&quot;&gt;(?!form).&lt;/code&gt;对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;((?!form).)*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其中.在()前[&lt;code class=&quot;highlighter-rouge&quot;&gt;.()&lt;/code&gt;]或.在()后[&lt;code class=&quot;highlighter-rouge&quot;&gt;().&lt;/code&gt;]最终的效果一样,但是对于正则引擎来说,匹配的顺序不同,&lt;code class=&quot;highlighter-rouge&quot;&gt;.()&lt;/code&gt;是先匹配字符再匹配隐藏
的位置,&lt;code class=&quot;highlighter-rouge&quot;&gt;().&lt;/code&gt;是先匹配隐藏的位置再匹配字符&lt;/p&gt;

&lt;p&gt;2.四种环视匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;(...)&lt;/code&gt;匹配的结果是一个隐藏的位置,是一个位置,不是多个位置,也不是字符&lt;/p&gt;

&lt;p&gt;3.&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;ifconfig | ack '(?&amp;lt;=inet )(.*)(?= netmask)' -o&quot;&lt;/code&gt;可得到ip地址&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;echo lllnihaolllnihaoxxxnihao666 | ack -o '(?&amp;lt;=x)(?=n)nihao.*'&lt;/code&gt;其中的&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;=x)(?=n)&lt;/code&gt;两个紧挨的环视匹配得到的是一个
隐藏的位置,因为环视匹配不会匹配到字符(不捕获),于是第1个环视匹配得到1个位置后由于无法前进字符串,所以第2个环视匹配
得到的依然是相同的位置处,同理,多个紧挨的环视匹配得到的是相同的位置,说明多个环视匹配紧挨时,匹配结果与各个环视匹配
表达式的先后顺序无关&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/regexp/2017/09/28/%E5%9B%9B%E7%A7%8D%E7%8E%AF%E8%A7%86%E5%8C%B9%E9%85%8D/</link>
        <guid isPermaLink="true">http://localhost:4000/regexp/2017/09/28/%E5%9B%9B%E7%A7%8D%E7%8E%AF%E8%A7%86%E5%8C%B9%E9%85%8D/</guid>
        
        <category>环视匹配</category>
        
        <category>正则表达式</category>
        
        
        <category>regexp</category>
        
      </item>
    
      <item>
        <title>深入理解计算机系统第8章笔记</title>
        <description>&lt;h3 id=&quot;异常控制流&quot;&gt;异常控制流&lt;/h3&gt;

&lt;p&gt;1.ECF:异常控制流(Exceptional Control Flow)&lt;/p&gt;

&lt;p&gt;2.应用程序通过使用一个叫做陷阱(trap)或者系统调用(system call)的ECF形式,向操作系统请求服务&lt;/p&gt;

&lt;p&gt;3.非本地跳转是一种应用层ECF,在C中是通过setjmp和longjmp函数提供的&lt;/p&gt;

&lt;p&gt;4.异常位于硬件和操作系统交界的部分,进程和信号位于应用和操作系统的交界之处&lt;/p&gt;

&lt;p&gt;5.异常是异常控制流的一种形式,它一部分是由硬件实现的,一部分是由操作系统实现的&lt;/p&gt;

&lt;p&gt;6.异常处理程序运行在内核模式下,这意味着它们对所有的系统资源都有完全的访问权限&lt;/p&gt;

&lt;p&gt;7.异常可以分为4类:中断,陷阱,故障,终止.如下图8-4.&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp8-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a)中断:中断是异步发生的,是来自处理器外部的I/O设备的信号的结果.I/O设备通过向外理器芯片上的一个引脚发信号,并将异常
号放到系统总线上,以触发中断.在当前指令完成执行之后,处理器注意到中断引脚的电压变高了,就从系统总线读取异常号,然后调
用适当的中断处理程序&lt;br /&gt;
b)陷阱:陷阱是有意的异常,是执行一条指令的结果,陷阱最重要的用途是在用户程序和内核之间提供一个像过程一样的接口,叫系
统调用.用户程序向内核请求服务(也即应用程序执行一次系统调用syscall),执行syscall指令会导致一个到异常处理程序的陷阱,
这个处理程序对参数解码,并调用适当的内核程序.在IA32系统上,系统调用是通过一条称为int n的陷阱指令来提供的.C程序用
syscall函数可以直接调用任何系统调用,然而,实际中几乎没必要这么做,对于大多数系统调用,标准C库提供了一组方便的包装函
数.这些包装函数将参数打包到一起,以适当的系统调用号陷入内核,然后将系统调用的返回状态传递回应用程序.所有的Linux系统
调用的参数老师通过寄存器而不是栈传递的.按照惯例,寄存器%eax包含系统调用号,寄存器%ebx,%ecx,%edx,%esi,%edi和%ebp包含
最多六个任意的参数,栈指针%esp不能使用,因为当进入内核模式时,内核会覆盖它.常见系统级调用如下: &lt;br /&gt;
exit,fork,read,write,open,close,waitpid
c)故障:故障由错误情况引起,它可能能够被故障处理程序修正.如果处理程序能够修正这个错误情况,它就将控制返回到引起故障
的指令,从而重新执行它,否则,处理程序返回到内核中的abort例程并终止引起故障的应用程序&lt;br /&gt;
d)终止:终止是不可恢复的致命错误造成的结果,通常是一些硬件错误,终止处理程序从不将控制返回给应用程序&lt;/p&gt;

&lt;p&gt;8.进程是计算机科学最深刻最成功的概念之一.系统中的每个程序都是运行在某个进程的上下文中的.上下文是由程序正确运行所
需的状态组成的.每次用户通过向外壳输入一个可执行目标文件的名字,并运行一个程序时,外壳就会创建一个新的进程,然后在这
个新进程的上下文中运行这个可执行目标文件.应用程序也能够创建新进程,且在这个新进程的上下文中运行它们自己的代码或其
他应用程序.进程提供给应用程序的2个抽象:&lt;br /&gt;
a)一个独立的逻辑控制流,它提供一个假象,好像我们的程序独占地使用处理器&lt;br /&gt;
b)一个么有的地址空间,它提供一个假象,好像我们的程序独占地使用存储器系统&lt;/p&gt;

&lt;p&gt;9.并行与并发的区别&lt;br /&gt;
你吃饭吃到一半,电话来了,你一直到吃完了以后才去接,这就说明你不支持并发也不支持并行.你吃饭吃到一半,电话来了,
你停了下来接了电话,接完后继续吃饭,这说明你支持并发.你吃饭吃到一半,电话来了,你一边打电话一边吃饭,这说明你支
持并行.并发的关键是你有处理多个任务的能力,不一定要同时.并行的关键是你有同时处理多个任务的能力.&lt;/p&gt;

&lt;p&gt;10.处理器通常是用某个控制寄存器中的一个模式位来提供控制权限的,该寄存器描述了进程当前享有的权限,当设置了模式位时,
进程就运行在内核模式中,一个运行在内核模式的进程可以执行指令集中的任何指令,并且可以访问系统中任何存储器位置.没有设
置模式位时,进程就运行在用户模式中,必须通过系统调用接口间接访问内核代码和数据.进程从用户模式变为内核模式的唯一方法
是通过诸如中断,故障或者陷入系统调用这样的异常.&lt;/p&gt;

&lt;p&gt;11.unix系统级函数遇到错误时,它们典型地会返回-1,并设置全局整数变量errno来表示什么出错了.&lt;/p&gt;

&lt;p&gt;12.从程序员的角度,可以认为进程总是处于下面3种状态之一:&lt;br /&gt;
a)运行.要么在cpu上执行,要么在等待被执行且最终会被内核调度&lt;br /&gt;
b)停止.进程的执行被挂起(suspend),且不会被调度.当收到SIGSTOP,SIGTSTP,SIDTTIN或者SIGTTOU信号时,进程就停止,并且保持
停止直到它收到一个SIGCONT信号,在这个时刻,进程再次开始运行.(相当于linux命令中的ctrl+z,ctrl+z的是将任务中断,但是此
任务并没有结束,他仍然在进程中他只是维持挂起的状态.)&lt;br /&gt;
c)终止.进程永远停止了.进程会因为3种原因终止:1)收到一个信号,该信号的默认行为是终止进程,2)从主程序返回,3)调用exit函
数&lt;/p&gt;

&lt;p&gt;13.父进程通过调用fork函数创建一个新的运行子进程(pid_t fork(void)).新创建的子进程几乎但不完全与父进程相同.子进程得
到与父进程用户级虚拟地址空间相同的(但是独立的)一份拷贝,包括文本,数据和bss段,堆以及用户栈.子进程还获得与父进程任何
打开文件描述符相同的拷贝,这就意味着当父进程调用fork时,子进程可以读写父进程中打开的任何文件.父进程和新创建的子进程
之间最大的区别在于它们有不同的pid.frok函数只被调用1次却会返回2次,一次是在调用进程(父进程)中,一次是在新创建的子进
程中.在父进程中,fork返回子进程的pid,在子进程中,fork返回0.fork被调用后,父进程和子进程是并发运行的独立进程,父进程和
子进程对各自相同的变量所做的改变都是独立的,不会反映在另一个进程的存储器中.(联想github上的fork项目后发生的事).&lt;/p&gt;

&lt;p&gt;14.当一个进程由于某种原因终止时,内核并不是立即把它从系统中清除,相反,进程被保持在一种已终止的状态中,直到被它的父进
程回收.&lt;/p&gt;

&lt;p&gt;15.程序与进程的关系.程序是一堆代码和数据;程序可以作为目标模块存在于磁盘上,或者作为段存在于地址空间中.进程是执行中
程序的一个具体的实例;程序总是运行在某个进程的上下文中.fork函数在新的子进程中运行相同的程序,新的子进程是父进程的一
个复制品.execve函数在当前进程的上下文中加载并运行一个新的程序,它会覆盖当前进程的地址空间,但并没有创建一个新进程.
新的程序仍然有相同的pid,并且继承了调用execve函数时已打开的所有文件描述符.python中os.system(cmd)相当于在当前的
python脚本中阻塞运行一个cmd,这里的python脚本和cmd的关系相当于linux中bash和手动输入的命令的关系,就算bash被kill -9
bashPid了,手动输入的命令还在执行,同样,就算python脚本被kill -9 pythonFilePid了,python脚本中运行的cmd还在运行,相当
于异步阻塞.python中可用&lt;a href=&quot;http://blog.csdn.net/seetheworld518/article/details/49639247&quot;&gt;os.fork()&lt;/a&gt;实现linux的C语言中的fork()&lt;/p&gt;

&lt;p&gt;16.unix信号是一种相对更高层的软件形式的异常,它允许进程中断其他进程,一个信号就是一条小消息,它通知进程系统中发生了
一个某种类型的事件.&lt;/p&gt;

&lt;p&gt;17.每个进程都只属于一个进程组,进程组是由一个正整数进程组ID来标识的,getpgrp函数返回当前进程的进程组ID,默认地,一个
子进程和它的父进程同属于一个进程组,一个进程可以通过使用setpgid函数来改变自己或其他进程的进程组.&lt;/p&gt;

&lt;p&gt;18./bin/kill -9 -15213表示由kill程序向15213进程组中的每个进程发送信号9(SIGKILL),kill程序可以向另外的进程发送任意
的信号,一个为负的PID会导致信号被发送到进程组PID中的每个进程.除了kill程序可以发送信号外,也可从键盘发送信号,或者调
用alarm函数来发送信号.&lt;/p&gt;

&lt;p&gt;19.应用程序可以使用sigprocmask函数显示地(阻塞)和(取消阻塞)信号&lt;/p&gt;

&lt;p&gt;20.异常控制流(ECF)发生在计算机系统的各个层次,是计算机系统中提供并发的基本机制.&lt;/p&gt;

&lt;p&gt;21.在操作系统层,内核用ECF提供进程的基本概念,进程提供给应用两个重要的抽象:&lt;br /&gt;
a)逻辑控制流:它提供给每个程序一个假象,好像它是丰独占地使用处理器&lt;br /&gt;
b)私有地址空间:它提供给每个程序一个假象,好像它是在独占地使用主存&lt;/p&gt;

</description>
        <pubDate>Tue, 19 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/09/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC8%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/09/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC8%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>csapp</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>cookie和session</title>
        <description>&lt;p&gt;0x00 set-cookie&lt;/p&gt;

&lt;p&gt;第一次访问页面后,Server可将Cookie信息加入HTTP Header返回给浏览器(set-cookie),浏览器会自动将这些信息保存在本地;
当再次访问相同域名时,浏览器将对应Cookie信息随请求一起发送,Server端可读取这些信息进行处理.&lt;/p&gt;

&lt;p&gt;0x01 session_start()&lt;/p&gt;

&lt;p&gt;session_start()做了哪些初始化工作
1.读取名为PHPSESSID(如果没有改变默认值)的cookie值,假使为abc123
2.若读取到PHPSESSID这个COOKIE,创建$_SESSION变量,并从相应的目录中(可以再php.ini中设置)读取SESS_abc123(默认
是这种命名方式)文件,将字符装在入$_SESSION变量中; 若没有读取到PHPSESSID这个COOKIE,也会创建$_SESSION变量,同时创
建一个sess_abc321(名称为随机值)的session文件,同时将abc321作为PHPSESSID的cookie值返回给浏览器端.&lt;/p&gt;

&lt;p&gt;0x02 sessionID&lt;/p&gt;

&lt;p&gt;在用户登录前后,客户端的cookie不会变,只是如果登录成功,这个cookie对应的服务器中的session变成可以访问后台内容的权限,
所以如果sessionID值放在数据库中,可遍历这些sesionID,将客户端中cookie中的对应的sessioID值替换成数据库中的sessionID,
如果有一个sessionID是管理员身份的session,那么可用这个cookie进后台&lt;/p&gt;

&lt;p&gt;登录后的用户人为logout后,客户端cookie依然不变,除非时间过期了,这样浏览器就不会再用这个cookie了(dvwa中如此,其他未测
)&lt;/p&gt;

&lt;p&gt;0x03 python处理cookie&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/21736970/using-requests-module-how-to-handle-set-cookie-in-request-response&quot;&gt;python中自动处理cookie的方法&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;with requests.Session() as s:
    r = s.get(URL1)
    r = s.post(URL2, data=&quot;username and password data payload&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 19 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/09/19/cookie%E5%92%8Csession/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/09/19/cookie%E5%92%8Csession/</guid>
        
        <category>cookie</category>
        
        <category>session</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>dvwa的csrf_token机制</title>
        <description>&lt;p&gt;dvwa的csrf_token在设置level为impossible(除low外未验证)时起作用,有了csrf_token后可防csrf漏洞的利用,同时也给自动化漏洞
检测带来了麻烦,客户端扫描漏洞时需要每次重新设置新的csrf_token来发送get/post请求,如果没有带上新的token参数值服务器
会校验不通过&lt;/p&gt;

&lt;p&gt;dvwa设置level为impossible后服务端验证(由form action中的地址对应的页面进行验证)客户端传来的csrf_token的过程如下:(以xss[reflected]和login页面为例,dvwa中的login.php和xss_r中的form action中的url都是当前页面)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    加载impossible.php
    impossible.php执行内容流程:
        1.验证csrf_token
        2.刷新服务器端存储的csrf_token

    取出新的csrf_token到html的body
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中刷新服务器存储的csrf_token的代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function generateSessionToken() {  # Generate a brand new (CSRF) token                                                                                    
     if( isset( $_SESSION[ 'session_token'  ]  )  ) {                                                                                                         
         destroySessionToken();                                                                                                                            
     }                                                                                                                                                     
     $_SESSION[ 'session_token'  ] = md5( uniqid()  );                                                                                                       
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在上面的验证csrf_token中,xss[reflected]是先判断是否传入name参数,也即如果
在url中出现name参数,无论是否为空都将进行csrf_token验证(服务器中用的isset($_POST[‘name’])来判断)
eg.&lt;br /&gt;
访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://192.168.83.11/dvwa/vulnerabilities/xss_r/?name=1&lt;/code&gt;时验证csrf_token&lt;br /&gt;
访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://192.168.83.11/dvwa/vulnerabilities/xss_r/?name=&lt;/code&gt;时验证csrf_token&lt;br /&gt;
访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://192.168.83.11/dvwa/vulnerabilities/xss_r/&lt;/code&gt;时不验证csrf_token&lt;/p&gt;

&lt;p&gt;从上面服务器校验客户端传入的csrf_token参数的过程可以看出:&lt;/p&gt;

&lt;p&gt;a.服务器判断客户端是同一个&lt;code class=&quot;highlighter-rouge&quot;&gt;人&lt;/code&gt;的方法是通过cookie中的sessionid来判断的,判断客户端是同一个&lt;code class=&quot;highlighter-rouge&quot;&gt;人&lt;/code&gt;正常合法地通过浏览器
访问的通过cookie中的sessionid+传入的csrf_token=服务器保存的csrf_token来判断的&lt;/p&gt;

&lt;p&gt;b.这种带csrf_token验证的情况会对暴力破解产生阻碍,导致暴力破解相当于只能单线程进行(需要每次等待返回的新的
csrf_token),且暴力破解时需要每次在请求时更新请求参数中的csrf_token的值为从服务器返回的新的csrf_token值&lt;/p&gt;

&lt;p&gt;c.在自动化漏洞检测时需要先判断要检测的页面是否有csrf_token(有些页面是没有的),如果有则要在请求前更新csrf_token参数
的值(sql注入和xss检测中可能会有)&lt;/p&gt;

&lt;p&gt;d.这里的csrf_token的验证和&lt;a href=&quot;http://3xp10it.cc/web/2016/11/10/%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB%E9%AA%8C%E8%AF%81%E7%A0%81%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/#0x02-about&quot;&gt;这里&lt;/a&gt;说的验证码验证机制几乎相同,只不过链接里的form action页面与登录页面不同,也即只
要登录页面中的form action值不是登录页面则很可能存在验证码绕过的问题(只要人工输入一次验证码即可)&lt;/p&gt;

</description>
        <pubDate>Thu, 14 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/09/14/dvwa%E7%9A%84csrf_token%E6%9C%BA%E5%88%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/09/14/dvwa%E7%9A%84csrf_token%E6%9C%BA%E5%88%B6/</guid>
        
        <category>csrf</category>
        
        <category>token</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>深入理解计算机系统第7章笔记</title>
        <description>&lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;

&lt;p&gt;1.为了构造可执行文件,链接器必须完成两个主要任务&lt;/p&gt;

&lt;p&gt;a)符号解析:符号解析的目的是将每个符号引用刚好和一个符号定义联系起来&lt;/p&gt;

&lt;p&gt;b)重定位:链接器通过把每个符号定义与一个存储器位置联系起来,然后修改所有对这些符号的引用,使得它们指向这个存储器位置
,从而重定位这些节&lt;/p&gt;

&lt;p&gt;2.如下为一个典型的ELF可重定位目标文件格式(与elf[可执行目标文件]的格式类似)
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp7-1.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text:已编译程序的机器码
.rodata:只读数据,如printf语句中的格式串和开关语句的跳转表
.data:已初始化的全局变量,局部变量保存在栈中
.bss:未初始化的全局变量,在目标文件中这个节不占据实际的空间,它仅仅是一个点位符(better save space)
.symtab:一个符号表,它存放程序中定义和引用的函数和全局变量的信息,.symtab符号表不包含局部变量的条目
.rel.text:一个.text节中位置的列表,当链接器把这个目标文件和其他文件结合时,需要修改这些位置
.rel.data:被模块引用或定义的任何全局变量的重定位信息
.debug:一个调试符号表,其条目是程序中定义的局部变量和类型定义,程序中定义和引用的全局变量,以及原始的C源文件,只有-g
选项调用编译驱动程序(gcc)才会得到这张表
.line:源代码和.text节中机器指令之间的映射
.strtab:一个字符串表,其内容包括.symtab和.debug节中的符号表,以及节头部中的节名字,也即反汇编中&quot;查找字符串&quot;的结果
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.符号:符号是函数名和变量名,本地链接器符号不包含对应于本地非静态程序变量的任何符号(局部变量)&lt;/p&gt;

&lt;p&gt;4.定义为带有C static属性的本地过程变量是不在栈中管理的,相反,编译器在.data和.bss中为每个定义分配空间,并在符号表中
创建一个有唯一名字的本地链接器符号&lt;/p&gt;

&lt;p&gt;5.任何声明带有static属性的全局变量或者函数都是模块私有有,类似地,任何声明不带static属性的全局变量和函数都是公共的,
可以被其他模块访问,使用static属性可在模块内部隐藏变量和函数声明,尽可能用static属性来保护你的变量和函数是很好的编
程习惯.python中在名称前加下划线表示私有,&lt;a href=&quot;http://python.jobbole.com/81129/&quot;&gt;更多详情&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.重定位:在装入程序前,系统会计算未使用的内存,然后将程序装入,并记下开始地址,在执行有相对地址的指令时,会将所有的地
址加上刚才记下的开始地址,就叫重定位.重定位就是把程序的逻辑地址空间变换成内存中的实际物理地址空间的过程,也就是说在
装入时对目标程序中指令和数据的修改过程,它是多道程序在内存中同时运行的基础.链接过程中会把多个文件的相同类型数据段
代码放在一起,所以需要将里面的符号变量重新安置在一个确定的内存地址中,这就是重定位.&lt;/p&gt;

&lt;p&gt;7.对可重定位目标文件的理解,&lt;a href=&quot;http://blog.csdn.net/ky_heart/article/details/51865526&quot;&gt;更多详情&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8.elf可执行文件格式图如下,.text,.rodata和.data节和可重定位目标文件中的节是相似的,除了这些节已经被重定位到它们最终
的运行时存储器地址以外.elf可执行文件被设计得很容易加载到存储器,可执行文件的连续的片(chunk)被映射到连续的存储器段,
段头部表描述了这种关系,如下图7-12展示了一个可执行文件的段头部表(由objdump显示),其中第一部分是代码段,包括(elf头部,
段头部表,.init,.text,.rodata节),第二部分是数据段,包括(.data,.bss节)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp7-2.png&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp7-3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;9.任何unix程序都可以通过调用execve函数来调用加载器,加载器将可执行目标文件中的代码和数据从磁盘拷贝到存储器中,然后
通过跳转到程序的第一条指令或入口点来运行该程序,加载器运行时,它创建如下图7-13所示的存储器映像,其中内核虚拟存储器为
高地址&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp7-4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;a href=&quot;http://blog.chinaunix.net/uid-24532607-id-3082314.html&quot;&gt;静态链接库和动态链接库的区别&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;11.C语言为什么要有main函数?&lt;a href=&quot;https://www.zhihu.com/question/28360770?sort=created&quot;&gt;a&lt;/a&gt;,&lt;a href=&quot;http://blog.csdn.net/xtydtc/article/details/53572455&quot;&gt;b&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;12.GOT:全局偏移量表(global offset table),在加载时,动态链接器会重定位(修改)GOT中的每个条目,使得它包含正确的绝对地址.
每个引用全局数据的目标模块都有自己的GOT&lt;/p&gt;

&lt;p&gt;13.PLT:过程链接表(Procedure Linkage Table),如果一个目标模块调用定义在共享库中的任何函数,那么它就有自己的GOT和PLT,
GOT是.data节的一部分,PLT是.text节的一部分&lt;/p&gt;

&lt;p&gt;14.&lt;a href=&quot;https://www.zhihu.com/question/21249496/answer/71226275&quot;&gt;理解GOT和PLt的关系和原理&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;15.链接可以在编译时由静态编译器来完成,也可以在加载时和运行时由动态链接器来完成.链接器的两个主要任务是符号解析和重
定位,符号解析将目标文件中的每个全局符号都绑定到一个唯一的定义,而重定位确定每个符号的最终存储器地址,并修改对那些目
标的引用.&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/09/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC7%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/09/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC7%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>csapp</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>深入理解计算机系统第6章笔记</title>
        <description>&lt;h3 id=&quot;存储器层次结构&quot;&gt;存储器层次结构&lt;/h3&gt;

&lt;p&gt;1.高速缓存介于cpu和主存(内存)之间,它们对于应用程序性能的影响最大&lt;/p&gt;

&lt;p&gt;2.在简单模型中,存储器系统是一个线性的字节数组,而cpu能够在一个常数时间内访问每个存储器位置,虽然迄今为止这都是一个
有效的模型,但是它没有反映现代系统实际工作的方式&lt;/p&gt;

&lt;p&gt;3.cpu是中央处理器(central processing unit),主要由运算器,控制器,寄存器三部分组成&lt;/p&gt;

&lt;p&gt;4.sram(static random-access memory):静态随机访问存储器主要用于作高速缓存存储器;dram(dynamic random-access
memory):动态随机访问存储器主要用于作主存(内存);rom(read-only memory):只读存储器;sram和dram断电后内容消失&lt;/p&gt;

&lt;p&gt;5.总线分为:系统总线,存储器总线,I/O总线.虽然I/O总线比系统总线和存储器总线慢,但是它可以容纳种类繁多的第三方I/O设备&lt;/p&gt;

&lt;p&gt;6.dma(direct memory access):直接存储器访问.在磁盘控制器收到来自cpu的读命令后,它将逻辑块号翻译成一个扇区地址,读该
扇区的内容,然后将这些内容直接传送到主存,不需要cpu的干涉.设备可自己执行读或写总线事务,这个过程称为dma(发生在将硬盘
中的数据读到内存中,这个命令是cpu发出的)&lt;/p&gt;

&lt;p&gt;7.局部性原理:一个编写良好的程序倾向于引用邻近于其他最近引用过的数据项,或者最近引用过的数据项本身,这是一个持久的概
念,对硬件和软件系统的设计和性能都有着极大的影响.局部性有两种不同的形式:时间局部性和空间局部性.在一个具有良好时间
局部性的程序中,被引用过一次的存储器位置很可能在不远的将来再被多次引用;在一个具有良好空间局部性的程序中,如果一个存
储器位置被引用了一次,那么程序很可能在不远的将来引用附近的一个存储器位置&lt;/p&gt;

&lt;p&gt;8.局部性小结&lt;/p&gt;

&lt;p&gt;a)重复引用同一个变量的程序有良好的时间局部性&lt;br /&gt;
b)对于具有步长为k的引用模式的程序,步长越小,空间局部性越好&lt;br /&gt;
c)对于取指令来说,循环有好的时间和空间局部性,循环体越小,循环迭代次数越多,局部性越好&lt;br /&gt;
d)二维C数组在存储器中是按照行顺序来存放的,对a[i][j]表示每个元素中:&lt;code class=&quot;highlighter-rouge&quot;&gt;for(i=0;j&amp;lt;n;i++)-&amp;gt;for(j=0;j&amp;lt;n;j++)&lt;/code&gt;的空间局部性
比&lt;code class=&quot;highlighter-rouge&quot;&gt;for(j=0;j&amp;lt;n;j++)-&amp;gt;for(i=0;i&amp;lt;n;i++)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;9.缓存命中:当程序需要第k+1层的某个数据对象d时,它首先在当前存储在第k层的一个块中查找d,如果d刚好缓存在第k层中,那么
这就是缓存命中&lt;/p&gt;

&lt;p&gt;10.存储器层次结构的本质是,每一层存储设备都是较低一层的缓存.基于缓存的存储器层次结构行之有效,是因为较慢的存储设备
比较快的存储设备更便宜,还因为程序往往展示局部性:&lt;br /&gt;
a)利用时间局部性:由于时间局部性,同一数据对象可能会被多次使用.一旦一个数据对象在第一次不命中时被拷贝到缓存中,我们
就会期望后面对该目标有一系列的访问命中&lt;br /&gt;
b)利用空间局部性:块通常包含有多个数据对象,由于空间局部性,我们会期望后面对该块中其他对象的访问能够补偿不命中的拷贝
该块的花费&lt;/p&gt;

&lt;p&gt;11.高速缓存读写过程&lt;/p&gt;

&lt;p&gt;a)读:首先,在高速缓存中查找所需字w的拷贝.如果命中,立即返回字w给cpu,如果不命中,从存储器层次结构中较低层中取出包含字
w的块,将这个块存储到某个高速缓存行中(可能会驱逐一个有效的行),然后返回字w&lt;/p&gt;

&lt;p&gt;b)写:写的情况复杂一些,假设要写一个已经缓存了的字w,有2种方法:一种是直写,就是立即将w的高速缓存块写回到紧接着的低一
层中,虽然简单,但是直写的缺点是每次写都会引起总线流量.另一种方法称为写回,尽可能地推迟存储器更新,只有当替换算法要驱
逐更新过的块时,才把它写到紧接着的低一层中.&lt;/p&gt;

&lt;p&gt;12.确保代码高速缓存友好的基本方法&lt;/p&gt;

&lt;p&gt;a)让最常见的情况运行得快,也即要把注意力集中在核心函数中的循环上而忽略其他部分&lt;/p&gt;

&lt;p&gt;b)在每个循环内部缓存不命中数量最小,也即保证有好的时间局部性(对局部变量的反复引用)和空间局部性(步长为1的引用模式)&lt;/p&gt;

&lt;p&gt;13.关于存储器山&lt;/p&gt;

&lt;p&gt;a)一个程序从存储系统中读数据的速率称为读吞吐量(或读带宽)&lt;br /&gt;
b)读带宽的时间和空间局部性的二维函数称为存储器山&lt;br /&gt;
c)即使是当程序的时间局部性很差时,空间局部性仍然能补救,并且是非常重要的
d)存储器系统的性能不是一个数字就能描述的,相反,它是一座时间和空间局部性的山,这座山的上升调试差别可以超过一个数量级&lt;br /&gt;
e)要使程序运行在存储器的山峰,就是要利用时间局部性,使得频繁使用的字从L1(最快的高速缓存)中取出,还要利用空间局部性,
使得尽可能多的字从一个L1高速缓存行中访问到&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/09/05/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC6%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/09/05/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC6%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>csapp</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>深入理解计算机系统第5章笔记</title>
        <description>&lt;h3 id=&quot;优化程序性能&quot;&gt;优化程序性能&lt;/h3&gt;

&lt;p&gt;1.编写高效程序特点:&lt;/p&gt;

&lt;p&gt;a)必须选择一组合适的算法和数据结构&lt;br /&gt;
要特别警觉,避免使用那些会渐进地产生糟糕性能的算法或编码技术&lt;/p&gt;

&lt;p&gt;b)必须编写出编译器能够有效优化以转换成高效可执行代码的源代码&lt;br /&gt;
如,用好的风格重写条件操作,使得编译采用条件数据传送&lt;/p&gt;

&lt;p&gt;c)利用多核和多处理器并行计算&lt;br /&gt;
通过使用例如多个累积变量和重新结合等技术,找到方法提高指令级并行&lt;/p&gt;

&lt;p&gt;d)消除循环的低效率&lt;br /&gt;
展开循环,降低开销,并且使得进一步的优化成为可能&lt;/p&gt;

&lt;p&gt;e)减少过程调用&lt;br /&gt;
消除连续的函数调用,在可能时,将计算移到循环外,考虑有选择地妥协程序的模块性以获得更大的效率&lt;/p&gt;

&lt;p&gt;f)消除不必要的存储器引用&lt;br /&gt;
引入临时变量来保存中间结果,只有在最后的值计算出来时,才将结果存放到数组或全局变量中&lt;/p&gt;

&lt;p&gt;2.现代微处理器取得的了不起的功绩之一是:它们采用复杂而奇异的微处理器结构,其中,多条指令可以并行地执行,同时又呈现一
种简单地顺序执行的表象&lt;/p&gt;

&lt;p&gt;3.现代微处理器可以在每个时钟周期执行多个操作,而且是乱序的,意思就是指令执行的顺序不一定要与它们在机器程序中的顺序
一致,与第4章研究过的流水线相比,乱序处理器需要更大更复杂的硬件,但是它们能更好地达到更高的指令级并行度&lt;/p&gt;

&lt;p&gt;4.通常指令控制单元(ICU)会在当前正在执行的指令很早之前取指,这样它才有足够的时间对指令译码,并把操作发送到执行单元
(EU).不过,当程序遇到分支(jnz/retn等)时,程序有两个可能的前进方向,现代处理器采用了一种称为分支预测的技术,处理器会猜
测是否会选择分支并取指和译码,如果后来发现选错了,会将状态重新设置到分支点的状态,并取指和译码&lt;/p&gt;

&lt;p&gt;5.循环展开是一种程序变换,通过增加每次迭代计算的元素的数量,减少循环的迭代次数.编译器可以很容易地执行循环展开,只要
优化级别设置得足够高,许多编译器都能例行公事地做到这一点.用命令行选项”-funroll-loops”调用GCC,会执行循环展开.&lt;/p&gt;

&lt;p&gt;循环展开能够从两个方面改程序的性能,下图中psum2函数是一个循环展开的示例.&lt;/p&gt;

&lt;p&gt;a)减少了不利操作的数量,如:循环索引计算和条件分支&lt;br /&gt;
b)提供了一些方法,可以进一步变化代码,减少整个计算中关键路径上的操作数量&lt;br /&gt;
c)编译器可以很容易地执行循环展开,只要优化级别设置得足够高,许多编译器都能例行公事地做到这一点&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp5-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.每个运算都是由两个周期计数值来刻画的:一个是延迟,它表示完成运算所需要的总时间;另一个是发射时间,它表示两个连续的
同类型运算之间需要的最小时钟周期数.&lt;/p&gt;

&lt;p&gt;7.提高并行性&lt;/p&gt;

&lt;p&gt;a)多个累积变量&lt;br /&gt;
对于一个可结合和可交换的合并运算来说,比如说整数加法或乘法,我们可以通过将一组合并运算分割成两个或更多的部分,并在
最后合并结果来提高性能(利用功能单元的流水线能力来提高性能)&lt;/p&gt;

&lt;p&gt;b)重新结合变换&lt;br /&gt;
重新结合变换能够减少计算中关键路径上操作的数量,通过更好地利用功能单元的流水线能力得到更好的性能&lt;/p&gt;

&lt;p&gt;8.unix系统提供了一个剖析程序GPROF,它会计算每个函数花费的时间和函数被调用的次数&lt;/p&gt;

&lt;p&gt;9.为什么函数调用和递归效率低?&lt;/p&gt;

&lt;p&gt;系统每次函数调用都要分配存储空间,并将调用点压栈记录,在函数调用结束后还要释放空间,恢复栈空间,所以函数调用浪费时间
和空间,而递归正是函数自己调用自己,于是效率低&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/08/31/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC5%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/08/31/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC5%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>csapp</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>深入理解计算机系统第4章笔记</title>
        <description>&lt;h3 id=&quot;处理器体系结构&quot;&gt;处理器体系结构&lt;/h3&gt;

&lt;p&gt;1.ISA:指令集体系结构,是指一个处理器支持的指令和指令的字节级编码&lt;/p&gt;

&lt;p&gt;2.ISA在编译器编写者和处理器设计人员之间提供了一个概念抽象层,编译器编写者只需要知道允许哪些指令,以及它们是如何编码
的;而处理器设计者必须建造出执行这些指令的处理器&lt;/p&gt;

&lt;p&gt;3.ISA模型看上去应该是顺序指令执行,也就是先取出一条指令,等到它执行完毕,再开始下一条.然而,与一个时刻只执行一条指令
相比,通过同时处理金条指令的不同部分,处理器可以获得较高的性能(流水线),为了保证处理器能达到同顺序执行相同的结果,人
们采用了一些特殊的机制&lt;/p&gt;

&lt;p&gt;4.生产处理器的公司很少,但是研究处理器的设计人员的队伍已经非常巨大了,而且还在增大.一个主要的处理器设计的各个方面大
约涉及1000多人&lt;/p&gt;

&lt;p&gt;5.HCL:硬件控制语言,是一种描述硬件系统控制部分的简单语言&lt;/p&gt;

&lt;p&gt;6.基于顺序操作的功能正确但是有点不实用的Y86处理器是作者用的例子,基于这个顺序设计为基础,进行一系列的改造,创建一个
流水线化的处理器,这个流水线化的处理器将每条指令的执行分解成五步,处理器可以同时执行五条指令的不同阶段,为了使这个处
理器保留Y86 ISA的顺序的性质,要求处理很多冒险或冲突情况,冒险就是一条指令的位置或操作数信赖于其他仍在流水线中的指令&lt;/p&gt;

&lt;p&gt;7.指令集的一个重要性质就是字节编码必须有唯一的解释,任意一个字节序列要么是一个唯一的指令序列的编码,要么就不是一个
合法的字节序列&lt;/p&gt;

&lt;p&gt;8.通过将逻辑门组合成大的网,可以构造出能计算更加复杂函数的组合电路.算术/逻辑单元(ALU)是一种很重要的组合电路&lt;/p&gt;

&lt;p&gt;9.cpu的时钟频率也即工作频率,一般来说,一个时钟周期内完成的指令数是固定的,所以时钟频率越高,cpu的速度也就越快了,为什
么要有时钟可参考”通俗易懂的例子,好吧,分析一下抬轿子,八抬大轿,轿夫要一起用力,用力的方向和时间需一致,移轿中每
人的行进方向和速率也要一致,轿夫头负责喊号子,他的行动和速度是其它七个人的参照基点,这个轿夫头在某种意义上就是时
钟,没有这个轿夫头,八个人各行其事,轿子是无法到达目的地的,甚至都不能被抬离地面.” 4G的处理器表示这个处理器的时钟运行
频率是4GHz&lt;/p&gt;

&lt;p&gt;10.时钟寄存器存储单个位或字.时钟信号控制寄存器加载输入值.时钟信号上升时,输出=输入,时钟信号未上升时,输出=当前状态&lt;/p&gt;

&lt;p&gt;11.SEQ(“sequential”顺序的)处理器:每个时钟周期上,SEQ执行处理一条完整指令所有步骤.SEQ唯一的问题就是它太慢了.时钟必
须非常慢,以使信号能在一个周期内传播所有的阶段.SEQ的实现包括组合逻辑和两种存储器设备:时钟寄存器(程序计数器和条件码
寄存器),随机访问存储器(寄存器文件,指令存储器和数据存储器).组合逻辑不需要任何时序或控制——只要输入变化了,值就通
过逻辑门网络传播.SEQ这种方法不能充分利用硬件单元,因为每个单元只在整个时钟周期的一部分时间内才被使用,使用流水线可
获得更好的性能,流水线化的一个重要特性就是增加了系统的吞量,也就是单位时间内服务的顾客总数.&lt;/p&gt;

&lt;p&gt;12.指令的字节级编码如下图4-3,每条指令需要1-6个字节不等,每条指令的第一个字节表明指令的类型,这个字节分为两个部分:高
4位和低4位,高4位是代码(code)部分,低4位是功能(function)部分.如下图4-2中,代码值为0-0xB,功能值只有在一组相关指令共用
一个代码时才有用.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp4-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp4-2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;13.实现所有Y86指令所需要的计算可以组织成六个阶段:取指,译码,执行,访存,写回,更新pc.
取指:从程序计数器(PC)中读取指令指示符字节的两个四位部分,称为icode(指令代码)和ifun(指令功能)
译码:从寄存器文件读入最多两个操作数,得到值valA和/或valB.
执行:算术/逻辑单元(ALU)要么执行指令指明的操作(根据ifun的值),计算存储器引用的有效地址,要么增加或减少栈指针.得到的
值称为valE
访存:将数据写入存储器或从存储器读出数据,读出的值为valM
写回:最多可以写两个结果到寄存器文件
更新PC:将PC设置成下一条指令的地址&lt;/p&gt;

&lt;p&gt;如下图4-18是对OP1(整数和逻辑运算),rrmov1(寄存器-寄存器传送)和irmov1(立即数-寄存器传送)类型的指令所需的处理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp4-3.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/08/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC4%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/08/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC4%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>csapp</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>sqlmap以加载请求文件方式检测https服务器时存在的bug</title>
        <description>&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;p&gt;sqlmap在扫描https类型的注入点的时候,当通过使用-r参数加载请求文件来检测有没有sql注入漏洞时,不能较好处理是否用ssl
通信,导致无法通过使用-r参数通过加载请求文件的方式自动检测是否是https协议,并因此无法检测出存在的注入点(需要人工添
加&lt;code class=&quot;highlighter-rouge&quot;&gt;--force-ssl&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&quot;detail&quot;&gt;Detail&lt;/h3&gt;

&lt;p&gt;1.当requestFile(-r加载的请求文件)中有Referer参数且Referer的值中的hostname部分及port部分与requestFile中的Host参数的值
中的hostname与port部分相同,且Referer的值是https开头,认为这个requestFile的测试应该走ssl(也即走https通信)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eg:[requestFile]

POST /xxx/xxx/xxx/x.jsp?x=a HTTP/1.1
Host: www.google.com:6666
...
Referer: https://www.google.com:6666/xxxooo/xxoo/xxx.jsp
...

xx=xxx&amp;amp;ooo=ooo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.当requestFile(-r加载的请求文件)中的port值不为80且requestFile中有Referer参数且Referer的值是&lt;code class=&quot;highlighter-rouge&quot;&gt;https://.*cdn.*&lt;/code&gt;的格式,这种情况也认为要走https通信&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eg:[requestFile]

POST /xxx/xxx/xxx/x.jsp?x=a HTTP/1.1
Host: www.google.com:6666
...
Referer: https://www.google-cdn.com/lllllllllllxxoo/xxx.jsp
...

xx=xxx&amp;amp;ooo=ooo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面这种情况认为测试要走https通信,对应修改sqlmap中的lib/core/option.py中相关代码(&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/core/option.py&lt;/code&gt;),已提交pull request到sqlmap,对应下面的与conf.forceSSL相关的部分代码&lt;br /&gt;
&lt;a href=&quot;https://github.com/sqlmapproject/sqlmap/pull/2663&quot;&gt;follow&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/08/23/sqlmap%E4%BB%A5%E5%8A%A0%E8%BD%BD%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E6%A3%80%E6%B5%8Bhttps%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E5%AD%98%E5%9C%A8%E7%9A%84bug/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/08/23/sqlmap%E4%BB%A5%E5%8A%A0%E8%BD%BD%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E6%A3%80%E6%B5%8Bhttps%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E5%AD%98%E5%9C%A8%E7%9A%84bug/</guid>
        
        <category>sqlmap</category>
        
        <category>https</category>
        
        
        <category>web</category>
        
      </item>
    
  </channel>
</rss>
