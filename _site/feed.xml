<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>quanyechavshuo</title>
    <description>A blog about programming and network security</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 27 Dec 2017 14:21:01 +0800</pubDate>
    <lastBuildDate>Wed, 27 Dec 2017 14:21:01 +0800</lastBuildDate>
    <generator>Jekyll v3.4.2</generator>
    
      <item>
        <title>ida插件使用备忘录</title>
        <description>&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;p&gt;记录ida插件使用&lt;/p&gt;

&lt;h3 id=&quot;items&quot;&gt;Items&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/deresz/funcap&quot;&gt;funcap&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;funcap是一个分析函数参数和函数返回值的插件&lt;/li&gt;
      &lt;li&gt;支持的cpu架构:x86,amd64,arm(32)&lt;/li&gt;
      &lt;li&gt;不支持64位的arm(现在的ios设备几乎都是arm64,ios设备cpu类型在&lt;a href=&quot;http://blakespot.com/ios_device_specifications_grid.html&quot;&gt;这里&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 27 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/27/ida%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98%E5%BD%95/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/27/ida%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98%E5%BD%95/</guid>
        
        <category>ida</category>
        
        <category>plugin</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>lldb命令</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lldb.llvm.org/lldb-gdb.html&quot;&gt;lldb与gdb对照&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/29687504/lldb-breakpoint-on-all-methods-in-class-objective-c&quot;&gt;lldb在object-c类对象所有函数上设置断点&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;breakpoint set -r '\[ClassName .*\]$'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;lldb在object-c类对象具体函数上设置断点(未验证)
&lt;code class=&quot;highlighter-rouge&quot;&gt;breakpoint set [ClassName functionName]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/alanzeino/82713016fd6229ea43a8&quot;&gt;lldb常用命令&lt;/a&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;breakpoint set --name &amp;lt;method-name&amp;gt;
  &quot;sets a breakpoint on a given function name, globally. e.g., 
  breakpoint set --name viewDidLoad 
  or 
  breakpoint set --name &quot;-[UIView setFrame:]&quot;
breakpoint set --selector &amp;lt;selector-name&amp;gt;
  &quot;sets a breakpoint on a selector, globally. e.g., 
  breakpoint set --selector dealloc
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 25 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/25/lldb%E5%91%BD%E4%BB%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/25/lldb%E5%91%BD%E4%BB%A4/</guid>
        
        <category>lldb</category>
        
        <category>ios</category>
        
        <category>debug</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>ida通过usb调试ios下的app</title>
        <description>&lt;h3 id=&quot;0x0-必读&quot;&gt;0x0 必读&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://zhoulingyu.com/2016/07/11/iOS攻防——(一)ssh登陆与交叉编译/&quot;&gt;macOS上编译ios程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/proteas/article/details/78083512&quot;&gt;使用IDA调试iOS程序的步骤&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/u011661836/article/details/61921308&quot;&gt;ios usb调试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;0x1-about&quot;&gt;0x1 About&lt;/h3&gt;

&lt;h4 id=&quot;实验环境&quot;&gt;实验环境&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;iphone6s&lt;/li&gt;
  &lt;li&gt;ios9.0&lt;/li&gt;
  &lt;li&gt;macOS sierra&lt;/li&gt;
  &lt;li&gt;ida7.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;why&quot;&gt;why&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;对于ida来说,lldb不怎么样(lldb用户体验很一般)&lt;/li&gt;
  &lt;li&gt;wifi调试很慢,ida通过wifi调试不现实&lt;/li&gt;
  &lt;li&gt;ios9以上的&lt;a href=&quot;http://www.newosxbook.com/src.jl?tree=listings&amp;amp;file=12-1-vmmap.c&quot;&gt;这个vmmap&lt;/a&gt;不工作&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;准备&quot;&gt;准备&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/comex/myvmmap/blob/master/myvmmap.c&quot;&gt;可用的vmmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;用上面这个链接中的源文件通过&lt;code class=&quot;highlighter-rouge&quot;&gt;xcrun -sdk iphoneos clang -arch armv7 -o [目标文件名] [源文件名]&lt;/code&gt;生成iphone下可执行文件vmmap,编译后文件可在&lt;a href=&quot;https://github.com/3xp10it/mytools/vmmap&quot;&gt;这里&lt;/a&gt;下载&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;usbmuxd&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install usbmuxd&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;目的&quot;&gt;目的&lt;/h4&gt;

&lt;p&gt;使用ida调试一个ios下的app,找到关键上传步数的函数&lt;/p&gt;

&lt;h3 id=&quot;0x2-detail&quot;&gt;0x2 Detail&lt;/h3&gt;

&lt;p&gt;ida调试ios app有两种方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方法一:ida设置使用remote gdb debug server
    &lt;ul&gt;
      &lt;li&gt;可通过wifi或usb调试,使用usb更快&lt;/li&gt;
      &lt;li&gt;通过附加(attach)到已经运行的ios app来调试&lt;/li&gt;
      &lt;li&gt;调试前需人工rebase program&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;方法二:ida设置使用remote ios debug server
    &lt;ul&gt;
      &lt;li&gt;通过usb调试&lt;/li&gt;
      &lt;li&gt;通过加载(app未运行时)未运行的ios app来调试&lt;/li&gt;
      &lt;li&gt;调试前需人工rebase program&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;方法一&quot;&gt;方法一&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;手机上运行目标app:PALxxx
ssh root@iphone
Cluth -i
Cluth -d target_app_index
scp xxx.ipa user@macOS
ps aux | grep PAL*
vmmap target_app_pid
    2771: /private/var/mobile/Containers/Bundle/Application/08C3D11A-82ED-42AA-A975-089E825B7E29/PALxxx.app/PALxxx
    DYLD all image info: 0000000120034000+130 format=1
    read_from_task(0x16fd3bc78, 0x401): kr=1
    00000001000c4000-00000001000c8000 [    16K ] r-x/r-x SM=COW
        (offset 3190000) /private/var/mobile/Containers/Bundle/Application/08C3D11A-82ED-42AA-A975-089E825B7E29/PALxxx.app/PALxxx

    由此得出PALxxx此次加载基址为0x1000c4000

macOS
ida加载ipa中的可执行文件PALxxx
    ida需要分析一段时间,大概10分钟(不分析完时很多函数无法找到),如果想尝试加速分析过程,可参考:https://reverseengineering.stackexchange.com/questions/12485/ida-slow-on-70mb-executable,也即将所有窗口关闭,只保留output窗口
在ida|edit|segments|program rebase中重新设置加载基址为0x1000c8000
    rebase需要一段时间,大概10分钟,如果考虑等的时间太长可尝试去除app的aslr属性,然后重新安装到手机上再调试,去除aslr属性未尝试
iphone连接电脑上的usb
    如果因为连接了usb导致下面无法用gdb server调试(有时连接上usb后ida只会有使用remote ios debuger的选项)则需要先拔掉usb,等选择完设置gdb server调试后再连接上usb
iproxy 2222 2008

ssh root@iphone
debugserver *:2008 -a PALxxx

ida设置远程gdb server(对应ios中的debugserver)调试,参数如下图
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/remote_gdb1.png&quot; alt=&quot;远程gdb server设置&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/remote_gdb2.png&quot; alt=&quot;远程gdb server设置&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;开始在ida中调试
在setIntegratedSteps函数上下断点
运行
命中断点后设置trace functions
在手机上点击上传步数
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;方法二&quot;&gt;方法二&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iphone连上macOS的usb
ida加载PALxxx
在ida中选择remote ios debugger,并设置好symbols和iphone中的app可执行文件的路径
    symbols可在~/ Library / Developer / Xcode / iOS DeviceSupport / &amp;lt;iOS version&amp;gt; / Symbols或通过ios_deploy获得
    app可执行文件路径可在iphone中通过find / -name &quot;PALxxx&quot;获得
开始在ida中调试
ssh root@iphone_ip
ps aux | grep PAL*
vmmap target_app_pid
找到加载基址后在ida|edit|segments|program rebase中重新设置加载基址
在setIntegratedSteps函数上下断点
运行
命中断点后设置trace functions
在手机上点击上传步数
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面2种方法trace到关键函数如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;000611FC	__text:-[PARSPedometerInfo setIntegratedSteps:]+C	RET	-[PARSPedometerInfo setIntegratedSteps:] returned to -[PARSPedometerInfo setIntegratedSteps:]-[PARSHealthKitHandler parseStepCountStatistics:]+33C
000611FC	__text:-[PARSHealthKitHandler parseStepCountStatistics:]+340	BL              _objc_release	-[PARSHealthKitHandler parseStepCountStatistics:] call -[PARSHealthKitHandler parseStepCountStatistics:]_objc_release
000611FC	__text:-[PARSHealthKitHandler parseStepCountStatistics:]+348	BL              _objc_release	-[PARSHealthKitHandler parseStepCountStatistics:] call -[PARSHealthKitHandler parseStepCountStatistics:]_objc_release
000611FC	__text:-[PARSHealthKitHandler parseStepCountStatistics:]+358	BL              _objc_msgSend	-[PARSHealthKitHandler parseStepCountStatistics:] call -[PARSHealthKitHandler parseStepCountStatistics:]_objc_msgSend
000611FC	__text:-[PARSHealthKitHandler parseStepCountStatistics:]+360	BL              _objc_retainAutoreleasedReturnValue	-[PARSHealthKitHandler parseStepCountStatistics:] call -[PARSHealthKitHandler parseStepCountStatistics:]_objc_retainAutoreleasedReturnValue
000611FC	__text:-[PARSHealthKitHandler parseStepCountStatistics:]+378	BL              _objc_msgSend	-[PARSHealthKitHandler parseStepCountStatistics:] call -[PARSHealthKitHandler parseStepCountStatistics:]_objc_msgSend
000611FC	__text:-[PARSHealthKitHandler parseStepCountStatistics:]+380	BL              _objc_release	-[PARSHealthKitHandler parseStepCountStatistics:] call -[PARSHealthKitHandler parseStepCountStatistics:]_objc_release
000611FC	__text:-[PARSHealthKitHandler parseStepCountStatistics:]+388	BL              _objc_release	-[PARSHealthKitHandler parseStepCountStatistics:] call -[PARSHealthKitHandler parseStepCountStatistics:]_objc_release
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;尝试用&lt;a href=&quot;https://github.com/deresz/funcap&quot;&gt;funcap&lt;/a&gt;插件获得&lt;code class=&quot;highlighter-rouge&quot;&gt;parseStepCountStatistics&lt;/code&gt;函数的参数及返回值,发现funcap不支持arm的64位的cpu,ios设备cpu类型在&lt;a href=&quot;http://blakespot.com/ios_device_specifications_grid.html&quot;&gt;这里&lt;/a&gt;于是用theos来记录,发现theos没有成功记录到parseStepCountStatistics函数的运行函数及返回值,说明关键函数不是这个函数,也即ida没有成功记录到关键的上传步数的函数,目前不理解为什么ida的trace功能为什么没有记录到这个关键函数.现在只好通过flex_injected来通过UI来分析出关键函数&lt;/p&gt;

&lt;p&gt;flex_injected查看关键上传按钮对应的UI类,如下图依次找到对应按钮的类(PARSHealthPedometer10thHomeViewController)与点击按钮对应的函数(walkUploadBtnClick)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/ida_usb_flex1.jpg&quot; alt=&quot;上传按钮&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/ida_usb_flex2.jpg&quot; alt=&quot;按钮对应类&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/ida_usb_flex3.jpg&quot; alt=&quot;按钮对应函数&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从ida中查看walkUploadBtnClick函数的具体实现,内容如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void __cdecl -[PARSHealthPedmoterHomeViewController walkUploadBtnClick:](PARSHealthPedmoterHomeViewController *self, SEL a2, id a3)
{
  PARSHealthPedmoterHomeViewController *v3; // x28
  PARSActivityDetailModel *v4; // x0
  void *v5; // x0
  void *v6; // x19
  void *v7; // x0
  __int64 v8; // x20
  void *v9; // x0
  __int64 v10; // x21
  void *v11; // x0
  __int64 v12; // x25
  struct objc_object *v13; // x0
  void *v14; // x0
  void *v15; // x19
  void *v16; // x0
  void *v17; // x0
  void *v18; // x26
  void *v19; // x0
  __int64 v20; // x21
  struct objc_object *v21; // x0
  void *v22; // x26
  PARSActivityDetailModel *v23; // x0
  void *v24; // x0
  void *v25; // x27
  void *v26; // x0
  __int64 v27; // x0
  __int64 v28; // x23
  void *v29; // x0
  __int64 v30; // x0
  __int64 v31; // x19
  void *v32; // x0
  void *v33; // x22
  struct objc_object *v34; // x0
  void *v35; // x0
  void *v36; // x19
  void *v37; // x0
  void *v38; // x23
  void *v39; // x0
  void *v40; // x24
  void *v41; // x0
  void *v42; // x25
  struct objc_object *v43; // x0
  void *v44; // x19
  int v45; // w28
  int v46; // w27
  unsigned int v47; // w0
  PARSHealthPedmoterHomeViewController *v48; // [xsp+18h] [xbp-58h]

  v3 = self;
  +[PARSDataAnalyticTrackTouch cacheCurrentPoint](&amp;amp;OBJC_CLASS___PARSDataAnalyticTrackTouch, &quot;cacheCurrentPoint&quot;, a3);
  v4 = -[PARSHealthPedmoterHomeViewController activity](v3, &quot;activity&quot;);
  v5 = (void *)objc_retainAutoreleasedReturnValue(v4);
  v6 = v5;
  v7 = objc_msgSend(v5, &quot;activityId&quot;);
  v8 = objc_retainAutoreleasedReturnValue(v7);
  objc_release(v6);
  v9 = objc_msgSend(&amp;amp;OBJC_CLASS___NSString, &quot;stringWithFormat:&quot;, CFSTR(&quot;49902-%@&quot;), v8);
  v10 = objc_retainAutoreleasedReturnValue(v9);
  v11 = objc_msgSend(&amp;amp;OBJC_CLASS___NSString, &quot;stringWithFormat:&quot;, CFSTR(&quot;4990201-%@&quot;), v8);
  v12 = objc_retainAutoreleasedReturnValue(v11);
  +[PADataAnalytic trackEvent:label:](&amp;amp;OBJC_CLASS___PADataAnalytic, &quot;trackEvent:label:&quot;, v10, v12);
  objc_release(v12);
  objc_release(v10);
  v13 = +[PARSUserManager sharedManager](&amp;amp;OBJC_CLASS___PARSUserManager, &quot;sharedManager&quot;);
  v14 = (void *)objc_retainAutoreleasedReturnValue(v13);
  v15 = v14;
  v16 = objc_msgSend(v14, &quot;currUserInfo&quot;);
  v17 = (void *)objc_retainAutoreleasedReturnValue(v16);
  v18 = v17;
  v19 = objc_msgSend(v17, &quot;userId&quot;);
  v20 = objc_retainAutoreleasedReturnValue(v19);
  objc_release(v18);
  objc_release(v15);
  v21 = +[PARSUserDefaults sharedDefaultsOfUser:](&amp;amp;OBJC_CLASS___PARSUserDefaults, &quot;sharedDefaultsOfUser:&quot;, v20);
  v22 = (void *)objc_retainAutoreleasedReturnValue(v21);
  v48 = v3;
  v23 = -[PARSHealthPedmoterHomeViewController activity](v3, &quot;activity&quot;);
  v24 = (void *)objc_retainAutoreleasedReturnValue(v23);
  v25 = v24;
  v26 = objc_msgSend(v24, &quot;activityId&quot;);
  v27 = objc_retainAutoreleasedReturnValue(v26);
  v28 = v27;
  v29 = objc_msgSend(&amp;amp;OBJC_CLASS___NSString, &quot;stringWithFormat:&quot;, CFSTR(&quot;%@%@%@&quot;), CFSTR(&quot;selectValue&quot;), v20, v27);
  v30 = objc_retainAutoreleasedReturnValue(v29);
  v31 = v30;
  v32 = objc_msgSend(v22, &quot;objectForKey:&quot;, v30);
  v33 = (void *)objc_retainAutoreleasedReturnValue(v32);
  objc_release(v31);
  objc_release(v28);
  objc_release(v25);
  objc_release(v22);
  v34 = +[PARSHealthCircleWalkingManager sharedManager](&amp;amp;OBJC_CLASS___PARSHealthCircleWalkingManager, &quot;sharedManager&quot;);
  v35 = (void *)objc_retainAutoreleasedReturnValue(v34);
  v36 = v35;
  v37 = objc_msgSend(v35, &quot;resultDict&quot;);
  v38 = (void *)objc_retainAutoreleasedReturnValue(v37);
  objc_release(v36);
  v39 = objc_msgSend(v38, &quot;objectForKeyedSubscript:&quot;, CFSTR(&quot;raiseFlag&quot;));
  v40 = (void *)objc_retainAutoreleasedReturnValue(v39);
  v41 = objc_msgSend(v38, &quot;objectForKeyedSubscript:&quot;, CFSTR(&quot;baseDonateStep&quot;));
  v42 = (void *)objc_retainAutoreleasedReturnValue(v41);
  v43 = +[PARSConfDefaults shareDefaults](&amp;amp;OBJC_CLASS___PARSConfDefaults, &quot;shareDefaults&quot;);
  v44 = (void *)objc_retainAutoreleasedReturnValue(v43);
  v45 = (unsigned __int64)objc_msgSend(v44, &quot;showDonateBook&quot;);
  objc_release(v44);
  v46 = (unsigned __int64)objc_msgSend(v40, &quot;isEqualToString:&quot;, CFSTR(&quot;Y&quot;));
  if ( !(unsigned int)objc_msgSend(v38, &quot;isNotEmpty&quot;)
    || (v46 | (objc_msgSend(v42, &quot;length&quot;) == 0LL)) &amp;amp; 1
    || (v45 ^ 1) &amp;amp; 1
    || objc_msgSend(v33, &quot;length&quot;) )
  {
    v47 = (unsigned __int64)objc_msgSend(v33, &quot;isEqualToString:&quot;, CFSTR(&quot;1&quot;));
    -[PARSHealthPedmoterHomeViewController requestUploadWithSure:](v48, &quot;requestUploadWithSure:&quot;, v46 | v47);
  }
  else
  {
    -[PARSHealthPedmoterHomeViewController showFirstDonatabookAlert](v48, &quot;showFirstDonatabookAlert&quot;);
  }
  objc_release(v42);
  objc_release(v40);
  objc_release(v38);
  objc_release(v33);
  objc_release(v20);
  objc_release(v8);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;发现关键函数是&lt;code class=&quot;highlighter-rouge&quot;&gt;-[PARSHealthPedmoterHomeViewController requestUploadWithSure:](v48, &quot;requestUploadWithSure:&quot;, v46 | v47);&lt;/code&gt;这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;requestUploadWithSure&lt;/code&gt;函数,在ida中查看如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void __cdecl -[PARSHealthPedometer10thHomeViewController requestUploadWithSure:](PARSHealthPedometer10thHomeViewController *self, SEL a2, bool a3)
{
  bool v3; // w19
  PARSHealthPedometer10thHomeViewController *v4; // x20
  PARSHWPedometerUploadView *v5; // x0
  void *v6; // x0
  void *v7; // x21
  void *v8; // x0
  void *v9; // x24
  char v10; // w25
  PARSActivityDetailModel *v11; // x0
  void *v12; // x0
  void *v13; // x24
  void *v14; // x0
  __int64 v15; // ST08_8
  struct objc_object *v16; // x0
  void *v17; // x0
  void *v18; // x24
  void *v19; // x0
  void *v20; // x0
  void *v21; // x27
  void *v22; // x0
  __int64 v23; // x0
  __int64 v24; // x21
  struct objc_object *v25; // x0
  void *v26; // x28
  PARSActivityDetailModel *v27; // x0
  void *v28; // x0
  void *v29; // x25
  void *v30; // x0
  __int64 v31; // x26
  PARSHWPedometerUploadView *v32; // x0
  void *v33; // x0
  void *v34; // x23
  void *v35; // x0
  void *v36; // x24
  struct objc_object *v37; // x0
  __int64 v38; // x1
  void *v39; // x24
  __int64 v40; // x1
  __int64 v41; // x1
  __int64 v42; // x20
  void **v43; // [xsp+10h] [xbp-D0h]
  __int64 v44; // [xsp+18h] [xbp-C8h]
  __int64 (__fastcall *v45)(); // [xsp+20h] [xbp-C0h]
  void *v46; // [xsp+28h] [xbp-B8h]
  __int64 v47; // [xsp+30h] [xbp-B0h]
  __int64 v48; // [xsp+38h] [xbp-A8h]
  __int64 v49; // [xsp+40h] [xbp-A0h]
  bool v50; // [xsp+48h] [xbp-98h]
  void **v51; // [xsp+50h] [xbp-90h]
  __int64 v52; // [xsp+58h] [xbp-88h]
  __int64 (__fastcall *v53)(); // [xsp+60h] [xbp-80h]
  void *v54; // [xsp+68h] [xbp-78h]
  __int64 v55; // [xsp+70h] [xbp-70h]
  char v56; // [xsp+78h] [xbp-68h]

  v3 = a3;
  v4 = self;
  v5 = -[PARSHealthPedometer10thHomeViewController uploadView](self, &quot;uploadView&quot;);
  v6 = (void *)objc_retainAutoreleasedReturnValue(v5);
  v7 = v6;
  v8 = objc_msgSend(v6, &quot;walkUploadBtn&quot;);
  v9 = (void *)objc_retainAutoreleasedReturnValue(v8);
  v10 = (unsigned __int64)objc_msgSend(v9, &quot;isCircleLoadingAnimating&quot;);
  objc_release(v9);
  objc_release(v7);
  if ( !(v10 &amp;amp; 1) )
  {
    v11 = -[PARSHealthPedometer10thHomeViewController activity](v4, &quot;activity&quot;);
    v12 = (void *)objc_retainAutoreleasedReturnValue(v11);
    v13 = v12;
    v14 = objc_msgSend(v12, &quot;activityId&quot;);
    v15 = objc_retainAutoreleasedReturnValue(v14);
    objc_release(v13);
    v16 = +[PARSUserManager sharedManager](&amp;amp;OBJC_CLASS___PARSUserManager, &quot;sharedManager&quot;);
    v17 = (void *)objc_retainAutoreleasedReturnValue(v16);
    v18 = v17;
    v19 = objc_msgSend(v17, &quot;currUserInfo&quot;);
    v20 = (void *)objc_retainAutoreleasedReturnValue(v19);
    v21 = v20;
    v22 = objc_msgSend(v20, &quot;userId&quot;);
    v23 = objc_retainAutoreleasedReturnValue(v22);
    v24 = v23;
    v25 = +[PARSUserDefaults sharedDefaultsOfUser:](&amp;amp;OBJC_CLASS___PARSUserDefaults, &quot;sharedDefaultsOfUser:&quot;, v23);
    v26 = (void *)objc_retainAutoreleasedReturnValue(v25);
    v27 = -[PARSHealthPedometer10thHomeViewController activity](v4, &quot;activity&quot;);
    v28 = (void *)objc_retainAutoreleasedReturnValue(v27);
    v29 = v28;
    v30 = objc_msgSend(v28, &quot;activityId&quot;);
    v31 = objc_retainAutoreleasedReturnValue(v30);
    objc_msgSend(v26, &quot;setObject:forKey:&quot;, v31, CFSTR(&quot;localActivityId&quot;));
    objc_release(v31);
    objc_release(v29);
    objc_release(v26);
    objc_release(v24);
    objc_release(v21);
    objc_release(v18);
    objc_initWeak(&amp;amp;v56, v4);
    v32 = -[PARSHealthPedometer10thHomeViewController uploadView](v4, &quot;uploadView&quot;);
    v33 = (void *)objc_retainAutoreleasedReturnValue(v32);
    v34 = v33;
    v35 = objc_msgSend(v33, &quot;walkUploadBtn&quot;);
    v36 = (void *)objc_retainAutoreleasedReturnValue(v35);
    v51 = _NSConcreteStackBlock;
    v52 = 3254779904LL;
    v53 = sub_100BC9B58;
    v54 = &amp;amp;unk_10311DDE8;
    objc_copyWeak(&amp;amp;v55, &amp;amp;v56);
    objc_msgSend(v36, &quot;startCircleLoadingAnimateWithClockwise:completion:&quot;, 0LL, &amp;amp;v51);
    objc_release(v36);
    objc_release(v34);
    v37 = +[PARSPedometerService sharedService](&amp;amp;OBJC_CLASS___PARSPedometerService, &quot;sharedService&quot;);
    v39 = (void *)objc_retain(v37, v38);
    v43 = _NSConcreteStackBlock;
    v44 = 3254779904LL;
    v45 = sub_100BC9EDC;
    v46 = &amp;amp;unk_10311DF08;
    v47 = objc_retain(v4, v40);
    objc_copyWeak(&amp;amp;v49, &amp;amp;v56);
    v42 = objc_retain(v15, v41);
    v48 = v42;
    v50 = v3;
    objc_msgSend(v39, &quot;healthWalkUploadTodayPedometer:&quot;, &amp;amp;v43);
    objc_release(v39);
    objc_release(v48);
    objc_destroyWeak(&amp;amp;v49);
    objc_release(v47);
    objc_destroyWeak(&amp;amp;v55);
    objc_destroyWeak(&amp;amp;v56);
    objc_release(v42);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;从这里看出这个函数的参数是传入0或1,也可发现这个函数的进一步调用的函数是&lt;code class=&quot;highlighter-rouge&quot;&gt;healthWalkUploadTodayPedometer&lt;/code&gt;,但由于&lt;code class=&quot;highlighter-rouge&quot;&gt;healthWalkUploadTodayPedometer&lt;/code&gt;函数的参数是一个内存地址,需要动态设置,而requestUploadWithSure函数的参数传入”1”即可,用requestUploadWithSure函数更方法用cycript测试,于是直接在cycript中测试requestUploadWithSure(1),验证是否是关键函数,操作如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@iphone_ip
cycript -p PALxxx
choose(PARSEPedometerInfo)
    cy# choose(PARSPedometerInfo)
    [#&quot;PARSPedometerInfo&amp;lt;0x12f22cd60&amp;gt;: \n integration=1541 \n iPhone=1541 \n watch=0 \n heartRat=0\n at:2017-12-26 16:00:00 +0000&quot;,#&quot;PARSPedometerInfo&amp;lt;0x12f406c90&amp;gt;: \n integration=1541 \n iPhone=1541 \n watch=0 \n heartRat=0\n at:2017-12-26 16:00:00 +0000&quot;]
    也即找到两个PARSPedometerInfo类的对象,随便用其中一个即可
[#0x12f22cd60 setIntegratedSteps:66666]
    这里设置上传步数为66666,但是还没有上传
tmp=[PARSHealthPedometer10thHomeViewController alloc]
    生成关键上传函数requestUploadWithSure所在类的一个对象
[tmp requestUploadWithSure:1]
    执行上传步数函数,参数为1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行完上面的函数后在app中成功弹窗,提示上传成功,说明这个函数是关键上传函数&lt;/p&gt;

</description>
        <pubDate>Mon, 25 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/25/ida%E9%80%9A%E8%BF%87usb%E8%B0%83%E8%AF%95ios%E4%B8%8B%E7%9A%84app/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/25/ida%E9%80%9A%E8%BF%87usb%E8%B0%83%E8%AF%95ios%E4%B8%8B%E7%9A%84app/</guid>
        
        <category>ida</category>
        
        <category>ipa</category>
        
        <category>usbmuxd</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>快速理解yield</title>
        <description>&lt;h3 id=&quot;0x0-必读link&quot;&gt;0x0 必读link&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.deeplearn.me/231.html&quot;&gt;Python-yield理解篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://foofish.net/understanding-yield.html&quot;&gt;如何理解Python关键字yield&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;0x1-理解&quot;&gt;0x1 理解&lt;/h3&gt;

&lt;p&gt;理解下面2个脚本的运行结果&lt;/p&gt;

&lt;p&gt;脚本1:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def a():
    print(111)

def b():
    flag='od'
    print(&quot;test&quot;)
    yield 1
    flag='ida'
    print(&quot;nihao&quot;)
    yield 2
    print(&quot;wohao&quot;)
    print(flag)

f1=a()
f2=b()

print(&quot;before for loop&quot;)

for i in f2:
    print(i,type(i))
    print(666)

print(&quot;after for loop&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行结果如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;111
before for loop
test
1 &amp;lt;class 'int'&amp;gt;
666
nihao
2 &amp;lt;class 'int'&amp;gt;
666
wohao
ida
after for loop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;脚本2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def h():
    print('Wen Chuan')
    m = yield 5  # Fighting!
    print(999999999999)
    d = yield 12
    print('We are together!')

c = h()
tmp=next(c)  #相当于c.send(None)
print(11111111111)
print(tmp)
print(222)
tmp=c.send('Fighting!')  #(yield 5)表达式被赋予了'Fighting!'
print(3333)
print(tmp)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行结果如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Wen Chuan
11111111111
5
222
999999999999
3333
12
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 21 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/python/2017/12/21/%E7%90%86%E8%A7%A3yield/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2017/12/21/%E7%90%86%E8%A7%A3yield/</guid>
        
        <category>yield</category>
        
        <category>python</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>实用shell命令</title>
        <description>&lt;h3 id=&quot;0x0-预备知识&quot;&gt;0x0 预备知识&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;之所以能用到xargs这个命令,是由于很多命令不支持&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;管道来传递参数&lt;/li&gt;
  &lt;li&gt;ack中:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt;代表在当前目录的子目录中递归查找&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt;代表列出符合匹配内容的文件名&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt;代表在正则查找时忽略大小写&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;for用法:
&lt;code class=&quot;highlighter-rouge&quot;&gt;for each in $(command1);do command2;done&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;find中:
    &lt;ul&gt;
      &lt;li&gt;正则查找文件名时查找的文件名是包含完整路径的,也即正则表达式要匹配完整路径&lt;/li&gt;
      &lt;li&gt;macOS下的正则查找文件名和普通linux下的正则查找文件名用法不同
        &lt;ul&gt;
          &lt;li&gt;macOS中正则查找文件名用法为&lt;code class=&quot;highlighter-rouge&quot;&gt;find -E . -regex &quot;正则&quot;&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;普通linux中正则查找文件名用法为&lt;code class=&quot;highlighter-rouge&quot;&gt;find . -regextype posix-extended -regex &quot;正则&quot;&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;find查找时不想显示Permission denied的信息可这样&lt;code class=&quot;highlighter-rouge&quot;&gt;find ... 2&amp;gt;&amp;amp;1 | grep -v &quot;Permission denied&quot;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;find正则查找文件名时忽略大小写用法为:将&lt;code class=&quot;highlighter-rouge&quot;&gt;-regex&lt;/code&gt;替换成&lt;code class=&quot;highlighter-rouge&quot;&gt;-iregex&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;中:
    &lt;ul&gt;
      &lt;li&gt;0,1,2分别代表标准输入,标准输出,标准错误&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;amp;1&lt;/code&gt;的写法是为了区别&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;1&lt;/code&gt;这个重定向到文件名为1的文件,&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;amp;1&lt;/code&gt;表示重定向到标准输出&lt;/li&gt;
      &lt;li&gt;find命令查找文件名时会在终端中显示标准输出和标准错误的信息,也即&lt;code class=&quot;highlighter-rouge&quot;&gt;find ... == find ... 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;find命令遇到没有权限的文件会显示权限不足,显示权限不足的信息是标准错误&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2&amp;gt;/dev/null&lt;/code&gt;的功能是将标准错误重定向到/dev/null&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grep -v&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;表示查找不匹配的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;0x1-items&quot;&gt;0x1 Items&lt;/h3&gt;

&lt;p&gt;1.查找当前目录下包括子目录内所有的包含’def’字符串的python文件,并删除这些文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -name &quot;*.py&quot; | xargx ack -ri 'def' | xargs rm
或者
for file in $(find . -name &quot;*.py&quot;);do ack -il 'def' $file &amp;amp;&amp;amp; rm $file;done
或者
for file in $(find . -name &quot;*.py&quot; | xargs ack -li 'def');do rm $file;done
或者
for file in $(find . -name &quot;*.py&quot;);do ack -il 'def' $file;doen | xargs rm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.查找当前目录下包括子目录内所有的临时文件(.swp,.swm,.swn,.swo等,但不包括.swf),并删除这些文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;macOS下:

find -E . -regex &quot;.+\.sw[^f]$&quot; 2&amp;gt;/dev/null | xargs rm
或
find -E . -regex &quot;.+\.sw[^f]$&quot; | grep -v &quot;Permission denied&quot; | xargs rm
或
find -E . -regex &quot;.+\.sw[^f]$&quot; 2&amp;gt;&amp;amp;1 | grep -v &quot;Permission denied&quot; | xargs rm


普通linux下:
find . -regextype posix-extended -regex &quot;.+\.sw[^f]$&quot; | grep -v &quot;Permission denied&quot; | xargs rm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.to be continue…&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/linux/2017/12/21/%E5%AE%9E%E7%94%A8shell%E5%91%BD%E4%BB%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/linux/2017/12/21/%E5%AE%9E%E7%94%A8shell%E5%91%BD%E4%BB%A4/</guid>
        
        <category>shell</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>ios的css调试</title>
        <description>&lt;h3 id=&quot;0x0-about&quot;&gt;0x0 About&lt;/h3&gt;

&lt;p&gt;css调试中,ios设备比较特殊(具备高清显示屏),物理像素和css像素值不相同,调试css时方法特殊&lt;/p&gt;

&lt;h3 id=&quot;0x1-必读link&quot;&gt;0x1 必读link&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/35221839&quot;&gt;现在手机分辨率这么大,如何写响应式布局&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stephen.io/mediaqueries/&quot;&gt;CSS Media Queries for 
iPads &amp;amp; iPhones&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/needim/d15fdc2ac133d8078f7c&quot;&gt;Device Specific CSS Media Queries Collection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;0x2-solution&quot;&gt;0x2 Solution&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* porttrait是标准显示 */
/* landscape是放大显示 */
/* 这里用的是iPhone 6 portrait,iphone6标准显示*/
@media only screen and (min-device-width: 375px)
  and (max-device-width: 667px)
  and (orientation: portrait)
  and (-webkit-min-device-pixel-ratio: 2)
{...}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;方法一&quot;&gt;方法一&lt;/h4&gt;

&lt;p&gt;使用ios上的safari真机调试css,具体步骤如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;macOS|safari|偏好设置|高级选项|打开在菜单栏中显示开发功能&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ios上打开设置|safari|高级|web检查器&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;手机usb连接上mac,点mac上的safari的菜单栏上的开发,里面有手机子选项,打开它&lt;/li&gt;
  &lt;li&gt;然后在mac上的safari中修改css文件并查看手机上safari的显示效果&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;方法二&quot;&gt;方法二&lt;/h4&gt;

&lt;p&gt;chrome手机模式中选择iphone,并在chrome中直接调试css&lt;/p&gt;

&lt;p&gt;&lt;em&gt;css需要用对应ios设备的标准显示对应的media query,也即用portrait对应的media query&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x3-其它&quot;&gt;0x3 其它&lt;/h3&gt;

&lt;p&gt;jekyll的css调试可参考如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/css.png&quot; alt=&quot;调试图&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 20 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/12/20/ios%E7%9A%84css%E8%B0%83%E8%AF%95/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/12/20/ios%E7%9A%84css%E8%B0%83%E8%AF%95/</guid>
        
        <category>css</category>
        
        <category>ios</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>vim写markdown</title>
        <description>&lt;h3 id=&quot;必读link&quot;&gt;必读link&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lequochung.me/2016/11/11/better-markdown-writing-experience-on-vim.html&quot;&gt;Better Writing Markdown Experience on Vim&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Move_cursor_by_display_lines_when_wrapping&quot;&gt;Move cursor by display lines when wrapping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.swamphogg.com/2015/vim-setup/&quot;&gt;Vim Setup for Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why&quot;&gt;Why&lt;/h3&gt;

&lt;p&gt;几乎所有markdown编辑器在编辑markdown的一个段落时都是不换行的,也即一段不换行,一段就是一行,不过在这些编辑器中眼睛看到的是”换行的”,实际上是没有换行的,可通过使用记事本等文本工具打开来验证这一点.为什么这些markdown编辑器不将一个段落的内容进行换行呢?&lt;em&gt;在markdown中,可通过连续的两个空格加上换行符实现段内换行&lt;/em&gt;,笔者认为只有不进行换行才能达到自适应不同屏幕的好的显示效果,如果在段落中按照每行一个合理的固定长度(如79个字符长度)进行自动换行,那么在不同大小的屏幕上显示这个markdown的段落时会有一些多余的空格符,因为markdown在渲染成html后将一个单独的换行符(\n)变成一个空格符,这样写出的markdown不是最好的markdown,这种情况的详情在&lt;a href=&quot;https://github.com/iamcco/markdown-preview.vim/issues/54&quot;&gt;这里&lt;/a&gt;,渲染后的效果如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/markdown.png&quot; alt=&quot;换行变成空格&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以在用vim写markdown时要向markdown编辑器学习,一段不换行.可通过vim的set wrap实现,不过这样设置后vim编辑的时候用默认的设置会有”不适”,如j/k的使用,0/$的使用等.&lt;/p&gt;

&lt;h3 id=&quot;how&quot;&gt;How&lt;/h3&gt;

&lt;p&gt;为解决vim开启wrap写markdown时的一些”不适”,可在vimrc中设置如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;markdown setting
au BufNewFile,BufReadPost *.{md,mdown,mkd,mkdn,markdown,mdwn} set filetype=markdown
au BufNewFile,BufReadPost,BufWrite *.{md,mdown,mkd,mkdn,markdown,mdwn} syntax match Comment /\%^---\_.\{-}---$/
au FileType markdown setlocal linebreak    &quot; Avoid wrap breaking words
au FileType markdown setlocal nolist       &quot; Make sure linebreak work as expected
au FileType markdown setlocal textwidth=0 &quot; Remove text width limit

&quot; for wrap is on
noremap  &amp;lt;buffer&amp;gt; &amp;lt;silent&amp;gt; k gk
&quot; for wrap is on
noremap  &amp;lt;buffer&amp;gt; &amp;lt;silent&amp;gt; j gj
&quot; for wrap is on
noremap  &amp;lt;buffer&amp;gt; &amp;lt;silent&amp;gt; 0 g0
&quot; for wrap is on
noremap  &amp;lt;buffer&amp;gt; &amp;lt;silent&amp;gt; $ g$

inoremap &amp;lt;c-h&amp;gt; &amp;lt;left&amp;gt;
&quot; for wrap is on
inoremap &amp;lt;c-j&amp;gt; &amp;lt;esc&amp;gt;gjli
&quot; for wrap is on
inoremap &amp;lt;c-k&amp;gt; &amp;lt;esc&amp;gt;gkli
inoremap &amp;lt;c-l&amp;gt; &amp;lt;right&amp;gt;
cnoremap &amp;lt;c-h&amp;gt; &amp;lt;left&amp;gt;
cnoremap &amp;lt;c-j&amp;gt; &amp;lt;down&amp;gt;
cnoremap &amp;lt;c-k&amp;gt; &amp;lt;up&amp;gt;
cnoremap &amp;lt;c-l&amp;gt; &amp;lt;right&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面是不用插件的方法,也可使用&lt;a href=&quot;https://github.com/reedes/vim-pencil&quot;&gt;vim-pencil&lt;/a&gt;插件实现这个功能,此外vim-pencil插件还有其他的功能,使用vim-pencil插件后适应markdown的wrap开启状态的编写设置如下,其中vim-pencil已具备jk0$自动换成&lt;code class=&quot;highlighter-rouge&quot;&gt;gj/gk/g0/g$&lt;/code&gt;的功能,此外上面的设置中其他功能尚未测试,于是同样保留在vimrc中&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Plugin 'reedes/vim-pencil'  &quot;安装这个插件,放在较靠前位置
...
...
let g:pencil#wrapModeDefault = 'soft'   &quot; default is 'hard'

&quot;markdown setting
au BufNewFile,BufReadPost *.{md,mdown,mkd,mkdn,markdown,mdwn} set filetype=markdown
au BufNewFile,BufReadPost,BufWrite *.{md,mdown,mkd,mkdn,markdown,mdwn} syntax match Comment /\%^---\_.\{-}---$/
au FileType markdown setlocal linebreak    &quot; Avoid wrap breaking words
au FileType markdown setlocal nolist       &quot; Make sure linebreak work as expected
au FileType markdown setlocal textwidth=0 &quot; Remove text width limit

augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text         call pencil#init({'wrap': 'hard'})
augroup END

inoremap &amp;lt;c-h&amp;gt; &amp;lt;left&amp;gt;
&quot; for wrap is on
inoremap &amp;lt;c-j&amp;gt; &amp;lt;esc&amp;gt;gjli
&quot; for wrap is on
inoremap &amp;lt;c-k&amp;gt; &amp;lt;esc&amp;gt;gkli
inoremap &amp;lt;c-l&amp;gt; &amp;lt;right&amp;gt;
cnoremap &amp;lt;c-h&amp;gt; &amp;lt;left&amp;gt;
cnoremap &amp;lt;c-j&amp;gt; &amp;lt;down&amp;gt;
cnoremap &amp;lt;c-k&amp;gt; &amp;lt;up&amp;gt;
cnoremap &amp;lt;c-l&amp;gt; &amp;lt;right&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 19 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/vim/2017/12/19/vim%E5%86%99markdown/</link>
        <guid isPermaLink="true">http://localhost:4000/vim/2017/12/19/vim%E5%86%99markdown/</guid>
        
        <category>markdown</category>
        
        <category>vim</category>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>ios应用逆向工程1-4章笔记</title>
        <description>&lt;h3 id=&quot;概念篇工具篇&quot;&gt;概念篇+工具篇&lt;/h3&gt;

&lt;p&gt;1.bundle的概念来源于NeXTSTEP,它不是一个文件,而是一个按某种标准结构来组织的目录,其中包含了二进制文件及运行所需的资源.正向开发中常见的App和framework都是以bundle的形式存在的;framework也是bundle,但framework的bundle中存放的是一个dylib,而不是可执行文件.相对来说,framework的地位比App更高,因为一个App的绝大多数功能都是通过调用framework提供的接口来实现的.将某个bundle确立为逆向目标后,绝大多数逆向线索都可以在bundle内找到,这大大降低了逆向工程的复杂度&lt;/p&gt;

&lt;p&gt;2.Xcode自带的plutil工具可查看plist文件,命令为&lt;code class=&quot;highlighter-rouge&quot;&gt;plutil -p xxx.plist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3.ios的app目录中的lproj目录下存放的是各种本地化的字符串(.strings),是ios逆向工程的重要线索,也可以用plutil查看&lt;/p&gt;

&lt;p&gt;4.storeapp的数据目录在&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/mobile/Containers/Data&lt;/code&gt;下,以mobile权限运行的系统app的数据目录在&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/mobile/&lt;/code&gt;下,而以root权限运行的系统app的数据目录在&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/root/&lt;/code&gt;下&lt;/p&gt;

&lt;p&gt;5.cydia app的安装包格式一般是deb,storeapp的安装包格式一般是ipa,其中deb的属主属组是root:admin,能够以root权限运行,而ipa是苹果为ios推出的专属app安装包格式,属主用户和属组都是mobile,只能以mobile权限运行&lt;/p&gt;

&lt;p&gt;6.通俗地说,ios中的沙盒就是一种访问限制机制,我们可以把它看作是权限的一种表现形式,授权文件也是沙盒的一部分.总的来说,沙盒会将app的文件访问范围限制在这个app内部,一个app一般不知道其他app的存在,更别说访问它们了,沙盒还会限制app的功能,例如对icloud接口的调用就必须经过沙盒的允许.越狱本身已经破除了ios的绝大多数安全限制,并对沙盒进行了一定程度的扩充,因此我们往往很容易忽略sandbox的存在,从而碰到一些看似很奇怪的问题.比如某个tweak不能写文件,调用了某个函数却没有出现应有的效果,在确保自己的代码没有问题的前提下,就要回过头来检查这些问题是不是因为权限不够,或者沙盒限制造成的&lt;/p&gt;

&lt;p&gt;7.cydia里的各种tweak无一不是以dylib的形式工作的&lt;/p&gt;

&lt;p&gt;8.ios实际上存在真正的后台多任务,如接听电话时ios会第一时间将接听电话界面呈现在我们面前.不过,对于storeapp来说,当用户按下home键时,进程就进入后台了,大多数功能都会被暂停&lt;/p&gt;

&lt;p&gt;9.在theos新建的工程目录文件夹中,可以创建一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;的文件夹,然后把工程打包成deb并安装到ios中,此时&lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;中的所有文件会被解包到ios文件系统的相同位置(这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;相当于ios中的根目录&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;),这极大扩充了deb包的什么用范围&lt;/p&gt;

&lt;p&gt;10.命令行安装theos生成的deb到手机的方法:在makefile的最上一行加上本机ip地址&lt;code class=&quot;highlighter-rouge&quot;&gt;THEOS_DEVICE_IP=...&lt;/code&gt;,然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;make package install&lt;/code&gt;命令完成编译打包安装一条龙服务&lt;/p&gt;

&lt;p&gt;11.免ssh输密码&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;删除本机~/.ssh/known_hosts中目标ip对应条目&lt;/li&gt;
  &lt;li&gt;在本机生成ida_rsa.pub文件:&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa&lt;/code&gt;,生成的文件为&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在目标机器终端中&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在本机中执行&lt;code class=&quot;highlighter-rouge&quot;&gt;scp ~/.ssh/id_rsa.pub user@目标ip:~/.ssh/authorized_keys&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;如果希望多台机器ssh到同一目标机器免密码可将多台机器&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa&lt;/code&gt;生成的id_rsa.pub内容追加到目标机器的authorized_keys文件中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;12.reveal的使用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;cydia中搜索安装reveal loader&lt;/li&gt;
  &lt;li&gt;在手机的设置中打开要分析的app的enabled applications开关&lt;/li&gt;
  &lt;li&gt;在macOS中中打开reveal,确保macOS和ios在同一网段内,重启ios中的目标app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;13.ida中main windows有两种显示模式,分别是graph view和text view,它们之间可以通过空格键切换.grahp view把被分析的程序逻辑用方块的形式表现出来,当执行遇到分支时,满足判断条件分支的线是绿色的,否则是红色的;当执行没有分支时,线是蓝色的&lt;/p&gt;

&lt;p&gt;14.ida中”jump to xref to operand”(快捷键x),点击后出现的窗口罗列了这个文件中显式引用这个符号的所有信息.”xref from”则显示这个符号引用的所有符号&lt;/p&gt;

&lt;p&gt;15.越狱ios必须安装”apple file conduit2”,简称afc2,这样才可以浏览ios全系统文件&lt;/p&gt;

&lt;p&gt;16.dyld_decache&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;从ios3.1开始,包括frameworks在内的许多库文件被存进了一个大cache里,这个cache文件位于”/System/Library/Caches/com.apple.dyld/dyld_shared_cache_armx”(名为dyld_shared_cache_arm7,dyld_shared_cache_armv7s或dyld_shared_cache_arm64),可以使用KennyTM开发的dyld_decache将其中的二进制文件提取出来.这样做的好处是确保分析的文件来自本机&lt;/li&gt;
  &lt;li&gt;使用dyld_decache之前,要将”System/Library/Caches/com.apple.dyld/dyld_shared_cache_armx”从ios拷贝到macOS,然后再用&lt;a href=&quot;https://github.com/kennytm/Miscellaneous/releases&quot;&gt;这个工具&lt;/a&gt;提取二进制文件.arm64如果出错可google:&lt;code class=&quot;highlighter-rouge&quot;&gt;site:iosre.com dsc_extractor&lt;/code&gt;来解决&lt;/li&gt;
  &lt;li&gt;可用ios_deploy来从dyld_shared_cache提取ida的符号文件,ida很依赖这些符号文件(有了它们才能快速和准确的反编译),命令如下
    &lt;ul&gt;
      &lt;li&gt;ios_deploy symbols&lt;/li&gt;
      &lt;li&gt;详细命令在&lt;a href=&quot;https://www.hex-rays.com/products/ida/support/tutorials/ios_debugger_tutorial.pdf&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;中文文档在&lt;a href=&quot;https://bbs.pediy.com/thread-223172-1.htm&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;17.CydiaSubstrate是绝大部分tweak正常工作的基础,它由MobileHooker,MobileLoader和Safe mode组成&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MobileHooker的作用是替换系统函数,也就是所谓的hook,它主要包含以下两个函数
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void MSHookMessageEx(Class class,SEL selector,IMP replacement,IMP *result);&lt;/code&gt;
        &lt;blockquote&gt;
          &lt;p&gt;其中MSHookMessageEx作用于Objective-C函数,通过调用method_setImplementation函数将[class selector]的实现改为replacement,达到hook的目的.Logos语法主要是对此函数作了一层封装,让编写针对Object-C函数的hook代码变得更简单直观了,但其底层实现仍完全基于MSHookMessageEx&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void MSHookFunction(void* function,void* replacement,void** p_original);&lt;/code&gt;
        &lt;blockquote&gt;
          &lt;p&gt;MSHookFunction作用于C和C++函数,通过编写汇编指令,在进程执行到function时转而执行replacement,同时保存function的指令及其返回地址,使得用户可以选择性地执行function,并保证进程能够在执行完replacement后继续正常运行.MSHookFunction的有一个参数的什么用分别是:替换的原函数,替换函数,以及被MobileHooker保存的原函数.单独的一个MSHookFunction函数是没有意义的,需要有一套固定的体系来承载它,这个体系写法如下.由于Theos仅提供了MSHookMessageEx的封装,掌握这套体系的用法就显得尤为重要了&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;substrate.h&amp;gt;

returnType (*old_symbol)(args);

returnType new_symbol(args)
{
//Whatever
}

void InitializeMSHookFunction(void) // This function is ofter called in %ctor i.e.constructor
{
    MSImageRef image=MSGetImageByName(&quot;/path/to/binary/who/contains/the/implementation/of/symbol&quot;);
    //MSFindSymbol的作用是查找待钩住(hook)的symbol
    void *symbol=MSFindSymbol(image,&quot;symbol&quot;);
    if (symbol)MSHookFunction((void *)symbol,(void *)&amp;amp;new_symbol,(void **)&amp;amp;old_symbol);
    else NSLog(@&quot;Symbol not found!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;MobileLoader
    &lt;blockquote&gt;
      &lt;p&gt;MobileLoader的作用是加载第三方dylib.在ios启动时,会由launchd将MobileLoader载入内存,然后MobileLoader会根据dylib的同名plist文件指定的作用范围,有选择地在不同进程里通过dlopen函数打开目录/Library/MobileSubstrate/SynamicLibraries/下的所有dylib.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Safe mode
    &lt;blockquote&gt;
      &lt;p&gt;因为tweak的本质是dylib,寄生在别的进程里,一旦出错,可能会导致整个进程崩溃,而一旦崩溃的是SpringBoard等系统进程,则会造成iOS瘫痪,所以CydiaSubstrate引入了Safe mode,它会的捕获SIGTRAP,SIGABRT,SIGILL,SIGBUS,SIGSEGV,SIGSYS这6种信号,然后进入安全模式.在安全模式里,所有基于CydiaSubstrate的第三方dylib均会禁用,便于查错与修复&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;19.Cycript是由saurik推出的一款脚本语言,可以看作是Objective-JavaScript.cycript通过cydia在iphone中安装.笔者认为,cycript最为贴心和实用的功能是它可以帮助我们轻松测试函数效果,效果十分显著,比通过theos生成deb来log记录方便很多.一般来说,选择注入哪个进程,要依测试的具体函数而定,这个函数所属的类存在于哪些进程,则注入这些进程,从而保证这个类是存在的.因为需要用cycript测试的一般都是私有函数,所以一个总的准则是从哪个进程逆向出的函数,就注入这个进程来测试;从哪个库逆向出的函数,就注入链接这个库的进程来测试.与Objective-c相比,cycript不需要声明对象类型,也不需要结尾的分号,常见用法如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#注入SpringBoard进程
cycript -p SpringBoard

#在内存中找一个PARSPedometerInfo类的实例对象
choose(PARSPedometerInfo)

#调用0x166b4fb0处的对象的show函数
[#0x166b4fb0 show]

#对show函数传入参数为3344
[#0x166b4fb0 show:3344]

#新建一个PARSPedometerInfo类的对象实例,并调用它的setIntergratedSteps函数,传入参数99998
myobj=[PARSPedometerInfo alloc]
[myobj setIntegratedSteps:99998]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 18 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/18/ios%E5%BA%94%E7%94%A8%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B1-4%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/18/ios%E5%BA%94%E7%94%A8%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B1-4%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>ios</category>
        
        <category>reverse</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>记一次爬虫绕过</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;p&gt;在一次数据采集(爬虫)中,目标服务器比较特殊,似乎是数据库服务器设置了一定时间内有查询次数上限,导致多次尝试没有成功爬
取大量数据.目标网站防爬虫特点:&lt;/p&gt;

&lt;p&gt;1.关键的元素页数(下面的pageNo)用的是js动态生成再显示到网页上的&lt;/p&gt;

&lt;p&gt;2.没带cookie请求时,请求不同页数(下面的pageNo)的html内容时,返回的html相同&lt;/p&gt;

&lt;p&gt;3.一个cookie似乎查询5000项数据次以后就不能再请求了,要过10min或更多的时间才可以访问&lt;/p&gt;

&lt;p&gt;4.换ip不换cookie的情况下查询次数也是5000项左右&lt;/p&gt;

&lt;h3 id=&quot;0x01-solution&quot;&gt;0x01 Solution&lt;/h3&gt;

&lt;p&gt;1.用phantomjs(通过js脚本)发送请求,使目标的js可在phantomjs中运行成功&lt;/p&gt;

&lt;p&gt;2.用ip代理池(IPProxyPool)&lt;/p&gt;

&lt;p&gt;3.每次请求带cookie且每个不同的请求用不同的cookie&lt;/p&gt;

&lt;p&gt;4.多线程查询,下面代码中涉及多线程写同一个文件时要事先加锁&lt;/p&gt;

&lt;h3 id=&quot;0x02-code&quot;&gt;0x02 Code&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import requests
import re
import random
import os
from exp10it import get_string_from_command

IPProxyPoolUrl = &quot;http://192.168.8.240:8000/?types=0&amp;amp;count=100&quot;


def get_random_proxy():
    IPPOOL = eval(requests.get(IPProxyPoolUrl).text)
    random_choose = random.choice(IPPOOL)
    proxy_addr = &quot;http://&quot; + \
        str(random_choose[0]) + &quot;:&quot; + str(random_choose[1])
    return proxy_addr


qihao_list = [
    '201502',
    '201503',
    '201504',
    '201505',
    '201506',
    '201507',
    '201508',
    '201509',
    '201510',
    '201511',
    '201512',
    '201601',
    '201602',
    '201603',
    '201604',
    '201605',
    '201606',
    '201607',
    '201608',
    '201609',
    '201610',
    '201611',
    '201612',
    '201701',
    '201702',
    '201703',
    '201704',
    '201705',
    '201706',
    '201707',
    '201708',
    '201709',
    '201710',
    '201711'
]

url = &quot;http://xxx.xxx.xxx&quot;
headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:51.0) Gecko/20100101 Firefox/51.0',
           'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',
           'Cookie': 'JSESSIONID=EA6DCEF9BA7D4ED7EA25B0377C20C092-n2.Tomcat1',
           'Connection': 'close',
           'Upgrade-Insecure-Requests': '1',
           'Content-Type': 'application/x-www-form-urlencoded',
           'Content-Length': '38'
           }
import threading
mutex = threading.Lock()
for qihao in qihao_list:
    i = 0
    post_js_content = '''
&quot;use strict&quot;;
var page = require('webpage').create(),
    server = 'http://xxx.xxx.xxx',
    data = 'pageNo=1&amp;amp;issueNumber=%s&amp;amp;applyCode=';

page.settings.resourceTimeout = 9999999999999;
page.settings.userAgent = &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.%s Safari/537.36&quot;;

page.open(server, 'post', data, function (status) {
    if (status !== 'success') {
        console.log('Unable to post!');
    } else {
        console.log(page.content);
    }
    phantom.exit();
});
    ''' % (qihao, ++i)
    while True:
        os.system(&quot;rm post.js&quot;)
        with open(&quot;post.js&quot;, &quot;a+&quot;) as f:
            f.write(post_js_content)
        proxy_addr = get_random_proxy()
        print(proxy_addr)
        html = get_string_from_command(
            &quot;phantomjs post.js --proxy=%s&quot; % proxy_addr)
        has_page_no = re.search(r&quot;/(\d+)页&quot;, html)
        if has_page_no:
            break
        else:
            print(&quot;没有获取到页数,尝试再次获取...&quot;)
            continue

    pageNo = has_page_no.group(1)
    print(&quot;期号:%s,页数:%s&quot; % (qihao, pageNo))
    page_list = []
    for page in range(1, int(pageNo) + 1):
        page_list.append(str(page))

    def get_page_content(page):
        data = &quot;pageNo=%s&amp;amp;issueNumber=%s&amp;amp;applyCode=&quot; % (page, qihao)
        print(&quot;正在请求第%s期,第%s页...&quot; % (qihao, page))
        rsp = requests.get(url, timeout=60)
        cookie = rsp.headers['Set-Cookie']
        # print(cookie)
        headers['Cookie'] = cookie
        proxy_addr = get_random_proxy()
        proxies = {}
        proxies_1 = proxy_addr.split(&quot;:&quot;)[0]
        proxies[proxies_1] = proxy_addr
        # print(proxies)
        html = requests.post(url, data.encode(&quot;utf-8&quot;),
                             headers=headers, proxies=proxies, timeout=60).text
        a = re.findall(
            r'''class=&quot;content_data&quot;[\s\S]*?&amp;lt;td\s*&amp;gt;(\d+)&amp;lt;/td&amp;gt;[\s\S]*?&amp;lt;td\s*&amp;gt;(.+)&amp;lt;/td&amp;gt;''', html)
        mutex.acquire()
        for each in a:
            with open(&quot;x.txt&quot;, &quot;a+&quot;) as f:
                string_to_write = qihao + &quot;    &quot; + \
                    each[0] + &quot;    &quot; + each[1] + &quot;\n&quot;
                print(string_to_write)
                f.write(string_to_write)
        mutex.release()

    from concurrent import futures
    with futures.ThreadPoolExecutor(max_workers=20) as executor:
        executor.map(get_page_content, page_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;code can be download &lt;a href=&quot;https://raw.githubusercontent.com/3xp10it/mytools/master/xban.py&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 15 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/python/2017/12/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB%E7%BB%95%E8%BF%87/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2017/12/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB%E7%BB%95%E8%BF%87/</guid>
        
        <category>spider</category>
        
        <category>phantomjs</category>
        
        <category>IPProxyPool</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>pycharm调试包含scrapy框架的项目</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pdb调试python文件方法:
import pdb
pdb.set_trace()

pdb调试好处很多,但是不支持多线程调试和远程调试
于是通过pycharm调试scrapy中的爬虫脚本
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;refer:&lt;/p&gt;

&lt;p&gt;http://www.jianshu.com/p/eda047ac5c89&lt;/p&gt;

&lt;h3 id=&quot;0x01-项目结构&quot;&gt;0x01 项目结构&lt;/h3&gt;

&lt;p&gt;在pycharm中新建项目时默认会为新建的项目新建一个python虚拟环境&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/root/PycharmProjects为pycharm默认存放项目的目录
scanner为新建的项目的项目名
venv是pycharm新建的python虚拟环境目录

/root/PycharmProjects
└── scanner
    └── venv
        ├── bin
        ├── include
        ├── lib
        ├── pip-selfcheck.json
        └── selenium

项目包含两个文件夹,分别为/root/3xp10it和/root/mypypi

其中/root/3xp10it目录如下,其中/root/3xp10it/3xp10it.py为项目启动文件,项目通过python3 3xp10it.py运行

/root/3xp10it
├── 3xp10it.py
├── debug.py
├── develop.md
├── ghostdriver.log
├── ipproxypool_scrapysplash_server.py
├── pannel
│   ├── manage.py
│   ├── models.py
│   ├── pages
│   └── pannel
├── readme.md
├── targets.py
├── uninstall.py
└── web.py


/root/mypypi中的爬虫模块相关目录如下,其中/root/mypypi/crawler/crawler/spiders/exp10it_spider.py为scrapy爬虫脚本,单独启动爬虫的命令为cd /root/mypypi/crawler &amp;amp;&amp;amp; python3 -m scrapy crawl exp10it

├── crawler                 
│   ├── crawler                  
│   │   ├── ghostdriver.log
│   │   ├── __init__.py   
│   │   ├── items.py    
│   │   ├── middlewares.py    
│   │   ├── pipelines.py                 
│   │   ├── settings.py    
│   │   └── spiders       
│   │       ├── exp10it_spider.py
│   │       ├── __init__.py
│   ├── ghostdriver.log        
│   ├── scrapy.cfg                     
│   └── start.py                 
├── xxx
├── dicts           

其中exp10it_spider.py内容大致如下:

class Exp10itSpider(scrapy.Spider):
    name = &quot;exp10it&quot;
    collected_urls = []
    domain = &quot;&quot;
    start_url = &quot;&quot;

    def add_url_templet_to_collected_urls(self, url):
        url=re.sub(r&quot;(#[^\?]*)$&quot;,&quot;&quot;,url)
        parsed = urlparse(url)
        if len(parsed)&amp;lt;4:


三个文件夹的关系:
/root/3xp10it/3xp10it.py中的funcA调用了/root/mypypi/exp10it.py中的funcB
/root/mypypi/exp10it.py中的funcB调用了/root/PycharmProject/scanner/venv/lib/site-packages/scrapy模块进行爬虫
,funcB相关代码如下(funB为下面的scrapy_splash_crawl_url):

def scrapy_splash_crawl_url(url):
    # replace crawl_url method
    url=re.sub(r&quot;\s+$&quot;,&quot;&quot;,url)
    spider_file=ModulePath+&quot;/crawler/crawler/spiders/exp10it_spider.py&quot;
    parsed=urlparse(url)
    if re.search(r&quot;/\S+\.\S{1,4}$&quot;,parsed.path):
        path=re.sub(r&quot;(?&amp;lt;=/)[^/\s\.]+\.\S{1,4}&quot;,&quot;&quot;,parsed.path)
    else:
        if parsed.path==&quot;&quot; or parsed.path[-1]!=&quot;/&quot;:
            path=parsed.path+&quot;/&quot;
        else:
            path=parsed.path
    modify_url=parsed.scheme+&quot;://&quot;+parsed.netloc+path
    cmd='''sed -i 's#target_url_to_crawl=&quot;.*&quot;#target_url_to_crawl=&quot;%s&quot;#g' %s''' % (modify_url,spider_file)
    os.system(cmd)
    from scrapy import cmdline
    cmdline.execute('scrapy crawl exp10it'.split())

上面funB中调用scrapy关键代码为:
    cmdline.execute('scrapy crawl exp10it'.split())

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x02-解决办法&quot;&gt;0x02 解决办法&lt;/h3&gt;

&lt;p&gt;方法1:&lt;/p&gt;

&lt;p&gt;设置/root/3xp10it/3xp10it.py(项目运行文件)的工作目录为与爬虫目录中的scrapy.cfg文件同目录的/root/mypypi/crawler,如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/pycharm_scrapy.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;方法2(推荐):&lt;/p&gt;

&lt;p&gt;将方法1中的在pycharm中为/root/3xp10it/3xp10it.py设置的工作目录为/root/mypypi/crawler通过代码实现,在
&lt;code class=&quot;highlighter-rouge&quot;&gt;cmdline.execute('scrapy crawl exp10it'.split())&lt;/code&gt;前通过代码切换工作目录:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;os.chdir(&quot;/root/mypypi/crawler&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 14 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/python/2017/12/14/pycharm%E8%B0%83%E8%AF%95%E5%8C%85%E5%90%ABscrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E9%A1%B9%E7%9B%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2017/12/14/pycharm%E8%B0%83%E8%AF%95%E5%8C%85%E5%90%ABscrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E9%A1%B9%E7%9B%AE/</guid>
        
        <category>pycharm</category>
        
        <category>scrapy</category>
        
        
        <category>python</category>
        
      </item>
    
  </channel>
</rss>
