<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>quanyechavshuo</title>
    <description>A blog about programming and network security</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 05 Dec 2017 18:16:32 +0800</pubDate>
    <lastBuildDate>Tue, 05 Dec 2017 18:16:32 +0800</lastBuildDate>
    <generator>Jekyll v3.4.2</generator>
    
      <item>
        <title>理解重定位</title>
        <description>&lt;h3 id=&quot;0x00-必读link&quot;&gt;0x00 必读link&lt;/h3&gt;

&lt;p&gt;1.«程序员的自我修养» 4.2和7.3.2章节&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://www.zhihu.com/question/21249496&quot;&gt;Linux动态链接为什么要用PLT和GOT表&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://eli.thegreenplace.net/2011/08/25/load-time-relocation-of-shared-libraries/&quot;&gt;共享库加载时重定位&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24231428&quot;&gt;pie/pic/aslr的理解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/&quot;&gt;共享库中的PIC&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x01-预备知识&quot;&gt;0x01 预备知识&lt;/h3&gt;

&lt;p&gt;1.硬件对变量和函数的寻址方式不同,寻找变量要求绝对地址,寻找函数要求相对地址.&lt;/p&gt;

&lt;p&gt;call指令的偏移量计算方法:偏移量=跳转到的地址-call指令后一条指令的起始地址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00413766    e8 7a da ff ff      call 00411e5
0041376b    ...                 ...

e8代表call,7a da ff ff代表偏移量0xffffda7a,对应负数-0x2586,0x0041376b+(-0x2586)=0x00411e5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.程序由编译(成汇编代码),链接(组合.o文件)得到可执行文件,重定位有链接时重定位+装载时重定位(上面必读link中叫load time
relocate),装载时重定位完成后得到的地址是虚拟存储器的虚拟地址,实际与内存交互时,需要由内核再完成虚拟存储器的虚拟
地址到真实物理内存地址的转换.&lt;/p&gt;

&lt;p&gt;4.编译阶段,.o文件的全局变量位置不确定,因为这时无法确定还有其它哪些.o文件,以及链接器将来会按什么顺序”排列”这些.o文
件,所以编译阶段没有重定位,链接阶段,如果elf没有调用so中的符号,则可以在链接时重定位所有符号的地址(因为这时所有的.o
文件的数据段代码段都组合完成了,所有符号的偏移都是确定的),如果elf调用了so中的符号,则由于so文件的符号位置不确定,因为
这时不知道.so文件将来被加载到进程空间的什么位置,所以与so中符号有关的地址需要装载时重定位.&lt;/p&gt;

&lt;p&gt;5.在没有开启pie的情况下:elf如果没有调用so中的符号则不用装载时重定位.so(elf)通过plt+got来实现pic(pie),有plt和got的
so(elf)并不一定开启了pic(pie).&lt;/p&gt;

&lt;p&gt;6.一般情况下,exe的期望加载基址为0x400000(4M),dll为0x1000000(16M),elf为0x8000000(128M),so为0x40000000(1G),期望加载
基址由编译器指定,在可执行文件中有一个位置存放这个值&lt;/p&gt;

&lt;p&gt;7.查看elf有没有开pie可简单通过readelf -l elffile看出,对应如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Elf 文件类型为 DYN (共享目标文件)       ===&amp;gt;对应开启了pie
Elf 文件类型为 EXEC (可执行文件)        ===&amp;gt;对应未开启pie
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;8.plt和got示例(linux下这样叫,macOS下有其他名字)&lt;/p&gt;

&lt;p&gt;如下图中printf函数是外部so文件中的函数,于是需要有plt和got,从左边的printf,puts,atoi等函数看出,一般只有外部so文件中
的函数调用才会用到plt,在下图ida中,发现plt段在.init段之后,.text段之前&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/reloc1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;printf函数的plt表中内容如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.plt:080483C0
.plt:080483C0 ; =============== S U B R O U T I N E =======================================
.plt:080483C0
.plt:080483C0 ; Attributes: thunk
.plt:080483C0
.plt:080483C0 ; int printf(const char *format, ...)
.plt:080483C0 _printf         proc near               ; CODE XREF: main+2C↓p
.plt:080483C0
.plt:080483C0 format          = dword ptr  4
.plt:080483C0
.plt:080483C0                 jmp     ds:off_804A000
.plt:080483C0 _printf         endp
.plt:080483C0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;printf函数对应的got表中内容如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/reloc2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图中的got表被ida解析了,ida指出0x804A000处的内容是printf函数的偏移,实际在16进制模式下的内容如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/reloc3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也即在0x804A000这个地址中的值为0x804A030,也即got表中对应内容如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x804A000:0x804A030
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个0x804A030在运行后会被因为重定位被修改成其他值,因为实际运行时printf函数的地址应该会变成不再是0x404A030了&lt;/p&gt;

&lt;h3 id=&quot;0x02-链接时重定位&quot;&gt;0x02 链接时重定位&lt;/h3&gt;

&lt;p&gt;如果没涉及so函数调用,则只通过链接时重定位即可完成重定位,不需要装载时重定位,下面进入操作&lt;/p&gt;

&lt;p&gt;```
vi a.c&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* a.c */
extern int shared;

int main()
{
    int a = 100;
    swap(&amp;amp;a,&amp;amp;shared);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;vi b.c&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* b.c */
int shared = 1;

void swap(int* a,int* b)
{
    *a ^= *b ^= *a ^= *b;
}

在kali3x64中,将上面两个文件编译成32位的.o文件(之所以编译成32位是因为64位的反汇编代码与32位的反汇编代码不同),
x64的kali要想编译出32位的程序需要先安装依赖
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;apt-get install gcc-multilib
apt-get install g++-multilib&lt;/p&gt;

&lt;p&gt;gcc -c a.c b.c -m32 -no-pie
    编译得到a.o和b.o目标文件&lt;/p&gt;

&lt;p&gt;ld a.o b.o -e main -o ab -m elf_i386 
    链接a.o和b.o,设置输出文件为ab,设置main函数为入口&lt;/p&gt;

&lt;p&gt;objdump -h a.o
    a.o：     文件格式 elf32-i386&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  1 .text         0000004a  00000000  00000000  0000003c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  2 .data         00000000  00000000  00000000  00000086  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000000  00000000  00000000  00000086  2**0
                  ALLOC
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;objdump -h b.o
    b.o：     文件格式 elf32-i386&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, GROUP, LINK_ONCE_DISCARD
  1 .text         00000043  00000000  00000000  0000003c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  2 .data         00000004  00000000  00000000  00000080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000000  00000000  00000000  00000084  2**0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;objdump -h ab
    ab：     文件格式 elf32-i386&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;节：
Idx Name          Size      VMA       LMA       File off  Algn
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.dyn      00000040  00000310  00000310  00000310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rel.plt      00000008  00000350  00000350  00000350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         00000023  00000358  00000358  00000358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00000020  00000380  00000380  00000380  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt.got      00000010  000003a0  000003a0  000003a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00000232  000003b0  000003b0  000003b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         00000014  000005e4  000005e4  000005e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE ### 0x03 装载时重定位
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 05 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/05/%E7%90%86%E8%A7%A3%E9%87%8D%E5%AE%9A%E4%BD%8D/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/05/%E7%90%86%E8%A7%A3%E9%87%8D%E5%AE%9A%E4%BD%8D/</guid>
        
        <category>重定位</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>设置上传目录不解析</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;p&gt;设置上传目录不解析要怎样实现,之前一直以为是chmod -x uploads实现的,但是并不是这样&lt;/p&gt;

&lt;h3 id=&quot;0x01-linux的文件属性&quot;&gt;0x01 linux的文件属性&lt;/h3&gt;

&lt;p&gt;linux的文件夹和文件的属性特点&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/resolve.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果一个文件有r属性,文件所在的文件夹也有r属性,但是文件所在文件夹没有x属性,那么这个文件是不能cat的,会提示权限不够,
这种情况下,如果再给文件赋予x属性,这个文件也是不能执行的,会提示权限不够,笔者认为是因为该文件所在的文件夹没有x属性
导致这个文件不可读,不可读的情况下,就算赋予x属性也是无法执行的&lt;/p&gt;

&lt;h3 id=&quot;0x02-设置上传目录不解析&quot;&gt;0x02 设置上传目录不解析&lt;/h3&gt;

&lt;p&gt;从上面看出,可通过chmod -x uploads让uploads目录下的webshell.php不解析,webshell.php不解析的原因是webshell.php对
apache用户www-data不可读(即使webshell.php的属性是644),webshell.php对apache用户www-data不可读的原因是uploads目录没
有x属性.但是这种通过chmod -x uploads的方法没有意义,因为这样虽然防住了webshell.php不解析,却也会导致正常的图片和其
他文件无法查看和使用&lt;/p&gt;

&lt;p&gt;真正的用法是通过httpd.conf(现在叫apache2.conf)或者.htaccess来实现,具体实现方法可参考&lt;a href=&quot;http://www.freebuf.com/articles/2465.html&quot;&gt;这里&lt;/a&gt;,.htaccess的更多用法
可参考&lt;a href=&quot;http://www.curafund.com/upload/download_file/1463483103.pdf&quot;&gt;这里&lt;/a&gt;,httpd.conf(apache2.conf)和.htaccess的关系可参考&lt;a href=&quot;http://m.itboth.com/d/RBvuy2/apache-.htaccess-cgi-include&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/12/01/%E8%AE%BE%E7%BD%AE%E4%B8%8A%E4%BC%A0%E7%9B%AE%E5%BD%95%E4%B8%8D%E8%A7%A3%E6%9E%90/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/12/01/%E8%AE%BE%E7%BD%AE%E4%B8%8A%E4%BC%A0%E7%9B%AE%E5%BD%95%E4%B8%8D%E8%A7%A3%E6%9E%90/</guid>
        
        <category>upload</category>
        
        <category>webshell</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>老码识途第2章笔记</title>
        <description>&lt;h3 id=&quot;庖丁解码底层的力量与乐趣&quot;&gt;庖丁解码:底层的力量与乐趣&lt;/h3&gt;

&lt;p&gt;1.全局变量或字符串常量等数据存放在程序的数据段&lt;/p&gt;

&lt;p&gt;2.ida+image base+重定位+got+plt&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/01/%E8%80%81%E7%A0%81%E8%AF%86%E9%80%94%E7%AC%AC2%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/12/01/%E8%80%81%E7%A0%81%E8%AF%86%E9%80%94%E7%AC%AC2%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>老码识途</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>老码识途第1章笔记</title>
        <description>&lt;h3 id=&quot;欲向码途问大道锵锵bit是吾刀&quot;&gt;欲向码途问大道,锵锵bit是吾刀&lt;/h3&gt;

&lt;p&gt;1.c语言中嵌入的汇编能够识别高级语言中的符号,如变量address&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int i,gi;
void * address{
    _asm {
    mov address,offset _lb1
    jmp address
    }
    i=2;
_lb1:
    gi=12;
    
}


                            jmp address
004113C8 ff 25 cc 74 41 00  jmp dword ptr ds:[004174cch]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.指针的类型信息(dword ptr,word ptr,byte ptr…)决定了赋值/读取时写/读多少字节.读/写多少字节的信息不是存放在指针
变量中,而是放到了与该地址相关的赋值指令中,如&lt;code class=&quot;highlighter-rouge&quot;&gt;mov dword ptr [eax],0ch&lt;/code&gt;中的dword指明了这个信息.不同类型指针,访问字
节数不同,&lt;code class=&quot;highlighter-rouge&quot;&gt;int *&lt;/code&gt;访问4字节,&lt;code class=&quot;highlighter-rouge&quot;&gt;short *&lt;/code&gt;访问2字节,这样就方便我们操控一个地址,否则如果只有地址信息,每次访问它还要附加说
明访问的字节数.这时,我们也能理解指针加/减1不是加/减1字节,而是加/减长度为该指针指向类型的长度的字节数,我们也能理解
,&lt;code class=&quot;highlighter-rouge&quot;&gt;void *&lt;/code&gt;类型的指针为什么无法进行加减运算,因为它只是汇编语言中的地址,没有类型信息,加减的时候不知道加减多少字节&lt;/p&gt;

&lt;p&gt;3.强制类型转换中有2点:&lt;/p&gt;

&lt;p&gt;a)不能将一个&lt;code class=&quot;highlighter-rouge&quot;&gt;short *&lt;/code&gt;指针变量赋值给&lt;code class=&quot;highlighter-rouge&quot;&gt;int *&lt;/code&gt;变量,因为生成赋值语句的指令时,必然生成move dword指令,即写4字节,而&lt;code class=&quot;highlighter-rouge&quot;&gt;short
*&lt;/code&gt;的变量只有2字节`&lt;/p&gt;

&lt;p&gt;b)指针强制类型转换的影响不是在转换的时候发生,在转换时除了赋值地址没有多余动作,起效的时是在用转换后的身份去访问内
存的时候,编译器会按转换后的指针类型产生相应代码,如下打印的结果是0xcccc000c而不是0c.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int *pi;
short si=12;
pi=(int *)&amp;amp;si;
printf(&quot;%x&quot;,*pi);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4.计算负数值方法:取反加1&lt;/p&gt;

&lt;p&gt;5.call指令的偏移量计算方法:偏移量=跳转到的地址-call指令后一条指令的起始地址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00413766    e8 7a da ff ff      call 00411e5
0041376b    ...                 ...

e8代表call,7a da ff ff代表偏移量0xffffda7a,对应负数-0x2586,0x0041376b+(-0x2586)=0x00411e5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;6.call指令相当于以下2条指令,在调用call之前要先push函数参数(x86),如push 1,push2,call 0x0402848,所以可以理解:在当前
函数帧栈中,第1个参数的位置在ebp+8处,因为ebp+4处的内容是call之前push的返回地址.在使用了ebp寻址的函数中,ebp+偏移量
是参数的地址,ebp-偏移量是局部变量的地址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;push 返回地址
jmp 函数入口
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7._cdecl是调用方清理栈,_pascal,_fastcall和_stdcall是被调用方清理栈.c语言缺省调用惯例是_cdecl,_stdcall通常用于
win32 API.&lt;a href=&quot;https://www.cnblogs.com/john-h/p/6276828.html&quot;&gt;更多&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8.函数指针赋值的原则是:只能将与指针原型匹配的函数的入口地址赋值给它,因为不同的函数的调用约定不一定相同,如上面的7
中所示&lt;/p&gt;

&lt;p&gt;9.数组的第1个元素的索引从0开始的原因&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;索引从1开始:

第1个元素的地址=首地址a
第2个元素的地址=首地址a+1x元素大小
第3个元素的地址=首地址a+2x元素大小
第i个元素的地址=首地址a+(i-1)x元素大小

索引从0开始:

第0个元素的地址=首地址a
第1个元素的地址=首地址a+1x元素大小
第2个元素的地址=首地址a+2x元素大小
第i个元素的地址=首地址a+(i)x元素大小
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;10.从上面9中也理解了c语言为什么会发生数组越界错误,因为它只是拿到首部地址然后加偏移量,如果索引值超出范围,那么求得
的元素地址也就超过了范围&lt;/p&gt;

&lt;p&gt;11.一般情况下,网络字节顺序是大端,主机字节顺序是小端&lt;/p&gt;

&lt;p&gt;12.内存中字节对齐的规律&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;首先选定一个盒子,然后依序将字段往盒子中放,当盒子放不下后,又用下一个盒子存放,直至所有字段都存放完毕.

相关限制条件:
a)盒子长度=min{max{sizeof(成员变量)},对齐长度}
b)字段放入盒子的可放置位置如下:
    离盒子头部偏移字节数=nxsizeof(成员变量)     (n=0,1,2,...)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;13.为了让结构体更整齐以便于在不同字节序程序间传递,我们就尽量调整结构体的字段顺序,在没办法的情况下,可考虑主动添加
一些字段,防止计算机为了对齐而填充&lt;/p&gt;

&lt;p&gt;14.一般情况下,switch比if-else快&lt;/p&gt;

&lt;p&gt;15.ga,ge,gb…中ab无符号,gl有符号&lt;/p&gt;

&lt;p&gt;16.在cpu保护模式下,每个执行进程(程序的一个实例)都拥有自己独立的线性地址空间,这种机制叫虚存系统&lt;/p&gt;

&lt;p&gt;17.完成加载程序并将eip寄存器的值指向main()入口的程序称为加载器&lt;/p&gt;

&lt;p&gt;18.重定位与模块绑定&lt;a href=&quot;http://blog.csdn.net/ithzhang/article/details/7058576&quot;&gt;理解&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;relocAddr=actualBase+a
* relocAddr=*relocAddr+actualBase-expectedAddr
eg.在exe中,一般expectedAddr为0x400000(4M),dll为0x1000000(16M),在一个有重定位段的pe中,有多个a,如a=0x100,a=0x502,
表示在pe的偏移0x100,0x502处的4字节值需要修改为原来的值+(实际加载基址与期望加载基址的差)

一般elf的expectedAddr为0x8000000(128M),linux共享库的expectedAddr为0x40000000(1G)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的expectedAddr可通过ida加载一个elf,查看ida中的进度条最开始位置的地址,这个地址即是elf期望的加载基址,如下图期望
加载基址为0x8048000&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/lmst1-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;或者通过linux下的工具readelf -l elffile查看,如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/lmst1-2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;20.vtune是一个收费$899的性能分析工具(可下载破解版),python下免费的其他工具可参考&lt;a href=&quot;https://www.cnblogs.com/nisen/p/6076082.html&quot;&gt;这里1&lt;/a&gt;,&lt;a href=&quot;https://github.com/rkern/line_profiler&quot;&gt;这里2&lt;/a&gt;,&lt;a href=&quot;https://github.com/pythonprofilers/memory_profiler&quot;&gt;这里3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;21.学习汇编的方法:用汇编实现开发环境所带的运行时库中的函数,如c语言中的strlen,strcpy等.然后,分析系统库实现的这些函
数.因为它们调用频繁,所以要求有很高的效率,基本都用汇编撰写.好好阅读能学到很多高级技巧,(能从高手的经典中汲取到很多营
养),再做性能实验,测试自己版本与系统版本的差异,并分析修改(这一过程可用vtune在优化方面深入实战),最后分析不同库实现
的异同和好坏,如vc,c++ builder,delphi,gcc&lt;/p&gt;

&lt;p&gt;22.一个技巧:判断一个数能否被4整除可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;test xxx,3    je ...&lt;/code&gt;实现&lt;/p&gt;

&lt;p&gt;23.对于&lt;code class=&quot;highlighter-rouge&quot;&gt;_declspec(naked) int strlen2(char *str)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;_declspec(naked)&lt;/code&gt;属于vc的特殊关键字,表示该函数的左右括号不会生
成任何代码,此时strlen2()的代码就是汇编本身&lt;/p&gt;

</description>
        <pubDate>Thu, 30 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/11/30/%E8%80%81%E7%A0%81%E8%AF%86%E9%80%94%E7%AC%AC1%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/11/30/%E8%80%81%E7%A0%81%E8%AF%86%E9%80%94%E7%AC%AC1%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>老码识途</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>kali linux安装源的问题</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;p&gt;新下载的kali linux 3在安装pd的paralles tools时需要安装&lt;code class=&quot;highlighter-rouge&quot;&gt;linux-headers-$(uname -r)&lt;/code&gt;,于是apt-get update,出现了经典的
基于debain的系统的安装源的问题,如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/kali3.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x01-必读link&quot;&gt;0x01 必读link&lt;/h3&gt;

&lt;p&gt;debain安装源地址语法&lt;a href=&quot;http://www.cnblogs.com/beanmoon/p/3387652.html&quot;&gt;理解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get update&lt;/code&gt; Hash 校验和不符等错误的原因&lt;br /&gt;
&lt;a href=&quot;http://www.kali.org.cn/thread-23272-1-1.html&quot;&gt;1&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://forum.ubuntu.org.cn/viewtopic.php?t=473765&quot;&gt;2&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x02-解决方法&quot;&gt;0x02 解决方法&lt;/h3&gt;

&lt;p&gt;1.理解debain安装源地址格式语法后,设置正确的源&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kali官方debain源:
http://http.kali.org/

需要在sources.list文件中如下设置:
deb http://http.kali.org/ kali-rolling main contrib non-free
其中main contrib non-free的顺序可变
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.手机开个热点或换个wifi或开vpn之后重新&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get update&lt;/code&gt;即可&lt;/p&gt;

&lt;p&gt;3.解决安装源的问题后如果再安装paralles tools还有问题可按照&lt;a href=&quot;http://kb.parallels.com/en/123968&quot;&gt;这里&lt;/a&gt;解决&lt;/p&gt;

&lt;p&gt;4.如果上面3中的链接没有成功安装,则升级paralleles desktop,实际安装中,由paralleles12升级为paralleles13.2.0后再按照上面3中的链接可成功安装&lt;/p&gt;

</description>
        <pubDate>Mon, 27 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/linux/2017/11/27/kali-linux%E5%AE%89%E8%A3%85%E6%BA%90%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/linux/2017/11/27/kali-linux%E5%AE%89%E8%A3%85%E6%BA%90%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        
        <category>kali</category>
        
        <category>debain</category>
        
        <category>sources.list</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>流畅的python第2章笔记</title>
        <description>&lt;h3 id=&quot;序列构成的数组&quot;&gt;序列构成的数组&lt;/h3&gt;

&lt;p&gt;1.列表推导是一种构建列表的方法,它异常强大,掌握列表推导还可以为我们打开生成器表达式的大门,后者具有生成各种类型的元
素并用它们来填充序列的功能&lt;/p&gt;

&lt;p&gt;2.通常的原则是,只用列表推导来创建新的列表,并且尽量保持简短.如果列表推导的代码超过了两行,你可能就要考虑是不是利用
for循环重写了&lt;/p&gt;

&lt;p&gt;3.列表推导示例:&lt;code class=&quot;highlighter-rouge&quot;&gt;tshirts=[(color,size) for color in colors for size in sizes]&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/python/2017/11/21/%E6%B5%81%E7%95%85%E7%9A%84python%E7%AC%AC2%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2017/11/21/%E6%B5%81%E7%95%85%E7%9A%84python%E7%AC%AC2%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>python</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>流畅的python第1章笔记</title>
        <description>&lt;h3 id=&quot;python数据模型&quot;&gt;Python数据模型&lt;/h3&gt;

&lt;p&gt;1.doctest模块是测试代码中在注释内的以&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;开头的所在行的python语句正确性的模块&lt;/p&gt;

&lt;p&gt;2.特殊方法的存在是为了被python解释器调用的,你自己不需要调用它.例如,没有&lt;code class=&quot;highlighter-rouge&quot;&gt;my_obj.__len__()&lt;/code&gt;这种写法,而应该用
&lt;code class=&quot;highlighter-rouge&quot;&gt;len(my_obj)&lt;/code&gt;,在执行&lt;code class=&quot;highlighter-rouge&quot;&gt;len(my_obj)&lt;/code&gt;时,如果&lt;code class=&quot;highlighter-rouge&quot;&gt;my_obj&lt;/code&gt;是一个自定义类的对象,那么python会自己调用其中由你实现的
&lt;code class=&quot;highlighter-rouge&quot;&gt;__len__&lt;/code&gt;方法&lt;/p&gt;

&lt;p&gt;3.如果是python内置类型,如list,str,bytearray(字节序列),那么CPython会抄近路,&lt;code class=&quot;highlighter-rouge&quot;&gt;__len__&lt;/code&gt;实际上会直接返回PyVarObject里
的&lt;code class=&quot;highlighter-rouge&quot;&gt;ob_size&lt;/code&gt;属性,直接读取这个值比调用一个方法要快很多&lt;/p&gt;

&lt;p&gt;4.很多时候,特殊方法是隐式的,比如&lt;code class=&quot;highlighter-rouge&quot;&gt;for i in x:&lt;/code&gt;这个语句,背后其实用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;iter(x)&lt;/code&gt;,而这个函数的背后则是
&lt;code class=&quot;highlighter-rouge&quot;&gt;x.__iter__()&lt;/code&gt;方法,当然前提是这个方法在x中被实现了&lt;/p&gt;

&lt;p&gt;5.Python有个内置函数&lt;code class=&quot;highlighter-rouge&quot;&gt;repr&lt;/code&gt;,它能把一个对象用字符串的形式表达出来以便辨认,这就是”字符串表示形式”,repr就是通过
&lt;code class=&quot;highlighter-rouge&quot;&gt;__repr__&lt;/code&gt;这个特殊方法来得到一个对象的字符表示形式的,如果没有实现&lt;code class=&quot;highlighter-rouge&quot;&gt;__repr__&lt;/code&gt;,当我们在控制台里打印一个向量的实例时,
得到的字符串可能会是&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Vector object at 0x10e100070&amp;gt;&lt;/code&gt;.通常eval(repr(obj))和obj是等同的.&lt;code class=&quot;highlighter-rouge&quot;&gt;%r&lt;/code&gt;可获取对象各个属性的标
准字符串表示形式.&lt;/p&gt;

&lt;p&gt;6.&lt;code class=&quot;highlighter-rouge&quot;&gt;repr()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;str()&lt;/code&gt;的对比:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;repr()得到的结果是给python看的,方便调试和记录日志
str()得到的结果是用户看的,方便给终端用户看
如果一个对象没有__str__函数,而python又需要调用它时,解释器会用__repr__作为替代

import datetime
d=datetime.date.today()
print(&quot;%s&quot; % d)
print(&quot;%r&quot; % d)

输出:
2017-11-20
datetime.date(2017,11,20)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7.bool(x)的背后是调用&lt;code class=&quot;highlighter-rouge&quot;&gt;x.__bool__()&lt;/code&gt;的结果;如果不存在&lt;code class=&quot;highlighter-rouge&quot;&gt;__bool__&lt;/code&gt;方法,那么bool(x)会尝试调用&lt;code class=&quot;highlighter-rouge&quot;&gt;x.__len__()&lt;/code&gt;,若返回0,则
bool会返回False,否则返回True.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;None==[]==()=={}==False?    ====&amp;gt; 不是的
而是:
bool(None)==bool([])=bool(())==bool({})==False
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;8.在python中,输入import this会弹出python之禅&lt;/p&gt;

&lt;p&gt;9.len之所以不是一个普通的方法,是为了让python自带的数据结构可以走后门,因为如果x是一个内置类型的实例,那么len(x)会通
过CPython直接从一个C结构体里读取对象的长度得到,完全不会调用任何方法,获取一个集合中元素的数量是一个很常见的操作,在
str,list,memoryview等类型上,这个操作必须高效&lt;/p&gt;

&lt;p&gt;10.通过实现特殊方法,自定义数据类型可以表现得跟内置类型一样,从而让我们写出更具表达力的代码.如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class FrenchDeck:
    ranks=[str(n) for n in range(2,11)]+list('JQKA')
    suits='spades diamonds clubs hearts'.split()

    def __init__(self):
        self.cards=...

    def __len__(self):
        return len(self._cards)

    def __getitem__(self,position):
        return self._cards[position]
    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;11.python的&lt;a href=&quot;http://blog.csdn.net/yuan_j_y/article/details/9317817&quot;&gt;四个魔法方法&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/python/2017/11/20/%E6%B5%81%E7%95%85%E7%9A%84python%E7%AC%AC1%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2017/11/20/%E6%B5%81%E7%95%85%E7%9A%84python%E7%AC%AC1%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>python</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Linux内核源代码情景分析第1章笔记</title>
        <description>&lt;h3 id=&quot;预备知识&quot;&gt;预备知识&lt;/h3&gt;

&lt;p&gt;1.在安装好的linux系统中,内核源代码位于/usr/src/linux.如果是从gnu网站下载的linux内核的tar文件,则展开以后在一个叫
linux的子目录中.&lt;/p&gt;

&lt;p&gt;2.linux的源代码看似庞大,其实对于每一个具体的内核而言并不是所有的.c和.h文件都会用到,而是在编译(包括连接)时根据系统
的配置有选择地使用&lt;/p&gt;

&lt;p&gt;3.在版本号x.yy.zz中,yy一方面表示版本的变迁,一方面标志着版本的种类,即”发行版”或”开发版”.如果yy为偶数便表示一个相对
稳定,已经发行的版本,如果为奇数则表示还在开发中.”发行版”和”开发版”的zz是独立编号的,因此并没有固定的对应关系,例如,
当开发版本号达到2.3.99时,相应的发行版还只是2.2.18&lt;/p&gt;

&lt;p&gt;4.linux的内核基本上只有一种来源,那就是同Linus主持开发和维护的内核版本,但是有很多公司在发行linux操作系统不同的发行
版,如Red Hat,Caldera等等.原则上全世界只有一个linux,所谓”某某linux”只是它的一种发行版本或修订版本.另外,不要把Linux
内核的版本与发行商自己的版本(如”Red Hat6.0”)混淆,例如,Caldera2.2版的内核是2.2.5版&lt;/p&gt;

&lt;p&gt;5.对于大多数用户,由发行商提供的这些发行版起着十分重要的作用.让用户自行配置和生成整个系统是相当困难的,因为那样用户
不但要自己下载内核源程序,自己编译安装,还要从不同的ftp站点下载各种自由软件添加到自己的系统中,还要为系统加入各种有
用的工具,等等.而所有这些工作都是很费时费力的事情.linux的发行厂商正是看到了这一点,替用户做了这些工作,在内核上集成
了大量的应用软件.并且,为了安装软件,发行厂商同时还提供了用于软件安装的工具性软件,以利于用户安装管理.(apt-get/yum)&lt;/p&gt;

&lt;p&gt;6.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/linux/2017/11/20/Linux%E5%86%85%E6%A0%B8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E7%AC%AC1%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/linux/2017/11/20/Linux%E5%86%85%E6%A0%B8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E7%AC%AC1%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>kernel</category>
        
        <category>linux</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>angr解题</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;p&gt;1.kali linux安装angr&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install python-dev libffi-dev build-essential virtualenvwrapper
mkvirtualenv angr &amp;amp;&amp;amp; pip install angr
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.必读link&lt;/p&gt;

&lt;p&gt;1)&lt;a href=&quot;http://www.freebuf.com/articles/web/150296.html&quot;&gt;用法小结&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2)&lt;a href=&quot;http://angr.io/api-doc&quot;&gt;api文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3)&lt;a href=&quot;https://hitcon.org/2016/CMT/slide/day1-r1-a-1.pdf&quot;&gt;进阶文档&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x01-注意&quot;&gt;0x01 注意&lt;/h3&gt;

&lt;p&gt;1.获取程序的输出的值的方法为&lt;code class=&quot;highlighter-rouge&quot;&gt;ex.found[0].posix.dumps(1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.如果程序不能从开头执行(如:开头损坏),则可用&lt;code class=&quot;highlighter-rouge&quot;&gt;state = p.factory.blank_state(addr=xxx)&lt;/code&gt;,从开头运行则可用
&lt;code class=&quot;highlighter-rouge&quot;&gt;p.factory.entry_state&lt;/code&gt;,更多的state运行方法参考&lt;a href=&quot;https://github.com/angr/angr-doc/blob/master/docs/states.md&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.目前的理解是find是到哪里停,avoid是不能经过哪,在解题时,avoid可没有,find必需有,但是最好两者都有,这样可减少符号执
行的计算量&lt;/p&gt;

&lt;p&gt;4.通过字符串设置find方法:&lt;code class=&quot;highlighter-rouge&quot;&gt;pg.explore(find=lambda s:&quot;it is my secret&quot; ins.posix.dumps(1))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5.claripy的BVS函数可以创建一个指定长度的抽象数据,如下,要注意的是:BVS的第2个参数的大小是位数,不是字节数,claripy的
功能与z3相当&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import claripy
a = claripy.BVS(&quot;sym_val&quot;, 32)
b = claripy.RotateLeft(a, 8)
c = b + 4
s = claripy.Solver()
s.add(c == 0x41424344)
assert s.eval(c, 1)[0] == 0x41424344
assert s.eval(a, 1)[0] == 0x40414243
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x02-解题&quot;&gt;0x02 解题&lt;/h3&gt;

&lt;h4 id=&quot;0xa-命令行参数&quot;&gt;0xa 命令行参数&lt;/h4&gt;

&lt;p&gt;从命令行提供程序参数:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p = angr.Project('./ais3_crackme')
arg1=claripy.BVS('arg1',30*8)
state=p.factory.entry_state(args=[p.filename,arg1])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后获取命令行参数值:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arg1=ex.found[0].solver.eval(arg1,cast_to = str)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/cosmopolitanme/article/details/73284074&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import angr
import claripy
find = 0x400602
avoid = [0x40060e]

p = angr.Project('./ais3_crackme')
arg1 = claripy.BVS('arg1', 30 * 8)
state = p.factory.entry_state(args=[p.filename, arg1])

ex = p.factory.simgr(state)
ex.explore(find=find, avoid=avoid)

arg1 = ex.found[0].solver.eval(arg1, cast_to=str)
print(arg1)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;0xb-标准输入&quot;&gt;0xb 标准输入&lt;/h4&gt;

&lt;p&gt;从标准输入中提供程序参数:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;state.posix.files[0].read_from(30)
或
for _ in xrange(5):  
    k = state.posix.files[0].read_from(1)
    state.se.add(k!=10)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后获取标准输入值:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;inp = ex.found[0].posix.files[0].all_bytes()  
print ex.found[0].solver.eval(inp,cast_to = str)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://oj.xctf.org.cn/web/practice/defensetrain/465f6bb8f4ad4d65a70cce2bd69dfacf/&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import angr
find = (0x8048697,)
avoid = (0x804869e,)

p = angr.Project('./ppp')
state = p.factory.entry_state()
state.posix.files[0].read_from(50)

pg = p.factory.simgr(state, threads=8)
ex = pg.explore(find=find, avoid=avoid)

output = ex.found[0].posix.dumps(1)
print(output)
inp = ex.found[0].posix.files[0].all_bytes()
print ex.found[0].solver.eval(inp, cast_to=str)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;0xc-文件输入&quot;&gt;0xc 文件输入&lt;/h4&gt;

&lt;p&gt;从文件中提供程序’参数’&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ctfhacker.com/re/angr/2016/02/21/ctf-symbolic-execution.html&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解法:&lt;/p&gt;

&lt;p&gt;to be continue…&lt;/p&gt;

</description>
        <pubDate>Thu, 16 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/11/16/angr%E8%A7%A3%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/11/16/angr%E8%A7%A3%E9%A2%98/</guid>
        
        <category>angr</category>
        
        <category>符号执行</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>z3 solver学习</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;p&gt;z3是个解题神器,可用于ctf中的加解密和逆向和pwn类型的题目.安装方法为:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install z3-solver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-解题&quot;&gt;0x01 解题&lt;/h3&gt;

&lt;h4 id=&quot;0x0a-加减乘除&quot;&gt;0x0a 加减乘除&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://solution-36.blogspot.com/2014/08/solving-picoctf-2013-harder-serial-with.html&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from z3 import *
s=[Int('serial%d' % i) for i in range(20)]
solver = Solver()
solver.add(s[15] + s[4] == 10)
solver.add(s[1] * s[18] == 2 )
solver.add(s[15] / s[9] == 1)
solver.add(s[17] - s[0] == 4)
solver.add(s[5] - s[17] == -1)
solver.add(s[15] - s[1] == 5)
solver.add(s[1] * s[10] == 18)
solver.add(s[8] + s[13] == 14)
solver.add(s[18] * s[8] == 5)
solver.add(s[4] * s[11] == 0)
solver.add(s[8] + s[9] == 12)
solver.add(s[12] - s[19] == 1)
solver.add(s[9] % s[17] == 7)
solver.add(s[14] * s[16] == 40)
solver.add(s[7] - s[4] == 1)
solver.add(s[6] + s[0] == 6)
solver.add(s[2] - s[16] == 0)
solver.add(s[4] - s[6] == 1)
solver.add(s[0] % s[5] == 4)
solver.add(s[5] * s[11] == 0)
solver.add(s[10] % s[15] == 2)
solver.add(s[11] / s[3] == 0)
solver.add(s[14] - s[13] == -4)
solver.add(s[18] + s[19] == 3)

print(solver.check())
answer=solver.model()
print(answer)
tidy_answer=&quot;&quot;.join([str(answer[each]) for each in s])
print(tidy_answer)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;0x0b-未涉及bitvec类型&quot;&gt;0x0b 未涉及BitVec类型&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/p4-team/ctf/tree/master/2017-09-02-tokyo/crypto_simple&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;z3&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Solver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ciphertext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;7c153a474b6a2d3f7d3f7328703e6c2d243a083e2e773c45547748667c1511333f4f745e&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ciphertext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# print(cipher)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'k&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'flag&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TWCTF{&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'|'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'encrypted&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                           &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;
                                         &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;0x0c-bitvec类型&quot;&gt;0x0c BitVec类型&lt;/h4&gt;

&lt;p&gt;当实际问题中需要进行与二进制数据有关的操作(如异或操作),则需要用到BitVec类型变量,在z3中:&lt;/p&gt;

&lt;p&gt;1.只有BitVec变量可以进行异或&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;solver.add(Int('x')^Int('y')==5)不被允许
只能solver.add(BitVec('x',8)^BitVec('y',8)==5)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.BitVecVal值之间不能进行&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;或&amp;lt;&lt;/code&gt;比较,只能转换成python认识的类型才可以比较&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;不允许:if BitVecVal(98,8)&amp;gt;BitVecVal(97,8)
允许:if BitVecVal(98,8)==98:
允许:if BitVecVal(98,8).as_long()&amp;gt;97
允许:if BitVecVal(98,8).as_long()&amp;gt;BitVecVal(97,8).as_long()
z3重载了==符号,但是没有重载&amp;gt;和&amp;lt;号,在int类型与bit-vector类型进行&quot;==&quot;比较时会将int常量当作bit-vector类型来比较
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.BitVec变量值之间可进行&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;或&amp;lt;或=或&amp;gt;=或&amp;lt;=&lt;/code&gt;的比较&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;允许:BitVec('a',8)&amp;gt;=BitVec('b',8)
允许:BitVec('a',8)&amp;lt;=BitVec('b',8)
允许:BitVec('a',8)&amp;lt;=9
允许:BitVec('a',8)==9
不允许:BitVec('a',8).as_long(),而允许BitVecVal(98,8).as_long()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4.z3中不允许列表与列表之间添加&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;约束条件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;允许对列表中的每个元素分开进行==的条件限定约束:

from z3 import *
prefix=[ord(each) for each in &quot;flag{&quot;]
plain_line=[Int('x%d' % i) for i in range(5)]
s=Solver()
z=0
#s.add(plain_line[z:z+5]==prefix)
s.add(plain_line[z]==prefix[0])
s.add(plain_line[z+1]==prefix[1])
s.add(plain_line[z+2]==prefix[2])
s.add(plain_line[z+3]==prefix[3])
s.add(plain_line[z+4]==prefix[4])
s.check()
print(s.model())


不允许直接对列表进行==的条件限定约束,下面的用法是不允许的,会无解:

from z3 import *
prefix=[ord(each) for each in &quot;flag{&quot;]
plain_line=[Int('x%d' % i) for i in range(5)]
s=Solver()
z=0
s.add(plain_line[z:z+5]==prefix)
#s.add(plain_line[z]==prefix[0])
#s.add(plain_line[z+1]==prefix[1])
#s.add(plain_line[z+2]==prefix[2])
#s.add(plain_line[z+3]==prefix[3])
#s.add(plain_line[z+4]==prefix[4])
s.check()
print(s.model())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/3xp10it/ctf/blob/master/babyxor.md&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/babyxor_show.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from z3 import *
import base64

def encrypt(plaintext, key):
    plaintext += '|'
    plaintext += key
    key = key*(len(plaintext)//len(key))
    key += key[:len(plaintext)-len(key)]

    cipher = ''.join(chr(ord(i)^ord(j)) for i,j in zip(plaintext, key))
    cipher = base64.b64encode(cipher.encode('ascii'))
    return cipher.decode('ascii')

#z=11,y=17
ceshi_encrypted=encrypt(&quot;lalalanihaoflag{8989082399}&quot;,&quot;11122233344455566&quot;)


timu_encrypted=&quot;BCU8EGwlJzAdBjAcGCgaFxgsNyEKIy9iOBxDLwFePVtEIj1kOxBsJisnCg1jHFd4HQ0GaSYnF2wuLDIKT2MJVjxVDA5pKScQOGEuOBkGYwFMeAYLSyg3chcjYSQ0Cg9jBld4AQsZPTEgCiImYiMKBDENTCtVAgQ7ZCUCPzUnNU8aJglKK1lEBSwyNxFsKiw+GEM3AF14FxEZJy08BGwyKjACBmMHXngURAYsJTxDLS8mcR8GNxxBeAUFGD1/chAjYS44GQZjHFA5AUhLLT07DSttYjkKQy4BXzABRBgoPWhDLS0ucQIaYwRRPhBISygoPkMhOGIiGxEmBl8sHUQcLDY3QysoNDQBQzcHGCwdAUsvLTwGPzViMg4WMA0YMRtECiUochckJGImABEvDBR4AQwOaSI7BCQ1YjcAEWMcUD1VKAIrISACOCgtP08MJUh1ORsPAicgfEMEJDA0TwowSEwwEEQbOy0oBmwnLSNPFysBS3gZAR0sKGhDKi0jNhQ3Kw1nNRQDAiobJQw+JR04HDw7B0olCS0vGyceIg4QLTIsC3swTTwe&quot;

#encrypted=ceshi_encrypted
encrypted=timu_encrypted

cipher=base64.b64decode(encrypted.encode(&quot;ascii&quot;)).decode('ascii')
length=len(cipher)
cipher=[BitVecVal(ord(each),8) for each in cipher]
plain_line=[BitVec('p%d' % i,8) for i in range(length)]
key_line=[BitVec('k%d' % i,8) for i in range(length)]
prefix=[BitVecVal(ord(each),8) for each in &quot;flag{&quot;]
for y in range(1,length-7+1):
    for z in range(0,length-y-7+1):
        s=Solver()
        #s.add(plain_line[z:z+5]==prefix)
        s.add(plain_line[z]==prefix[0])
        s.add(plain_line[z+1]==prefix[1])
        s.add(plain_line[z+2]==prefix[2])
        s.add(plain_line[z+3]==prefix[3])
        s.add(plain_line[z+4]==prefix[4])
        for i in range(length):
            32&amp;lt;=plain_line[i]
            plain_line[i]&amp;lt;=126
            32&amp;lt;=key_line[i]
            key_line[i]&amp;lt;=126
        plain_line[-y-1]==ord('|')
        key=plain_line[-y:]
        for i in range(length):
            s.add(key_line[i]==key[i%y])
            s.add(plain_line[i]^key_line[i]==cipher[i])
        if s.check()==sat:
            answer=s.model()
            print(answer)
            key_line=&quot;&quot;.join([chr(answer[each].as_long()) for each in key_line])
            plain_line=&quot;&quot;.join([chr(answer[each].as_long()) for each in plain_line])
            print(&quot;key_line:&quot;)
            print(key_line)
            print(&quot;plain_line:&quot;)
            print(plain_line)
            input(&quot;Congratulations!&quot;)

        else:
            print(&quot;try key len:%d,'flag{' index:%d&quot; % (y,z))
            continue

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/babyxor_answer.png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 14 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/11/14/z3-solver%E5%AD%A6%E4%B9%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/11/14/z3-solver%E5%AD%A6%E4%B9%A0/</guid>
        
        <category>z3</category>
        
        <category>ctf</category>
        
        <category>python</category>
        
        
        <category>auxilary</category>
        
      </item>
    
  </channel>
</rss>
